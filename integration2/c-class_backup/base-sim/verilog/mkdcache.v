//
// Generated by Bluespec Compiler (build a026416)
//
// On Sat Aug  8 15:34:43 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_core_req_put               O     1
// core_resp_get                  O    72
// RDY_core_resp_get              O     1
// ptw_resp_get                   O    72
// RDY_ptw_resp_get               O     1
// read_mem_req_get               O    43 reg
// RDY_read_mem_req_get           O     1 reg
// RDY_read_mem_resp_put          O     1
// nc_read_req_get                O    43 reg
// RDY_nc_read_req_get            O     1 reg
// RDY_nc_read_resp_put           O     1
// RDY_pa_from_tlb_put            O     1
// write_mem_req_rd               O   555 reg
// RDY_write_mem_req_rd           O     1 reg
// RDY_write_mem_req_deq          O     1 reg
// RDY_write_mem_resp_put         O     1
// nc_write_req_get               O   107 reg
// RDY_nc_write_req_get           O     1 reg
// perf_counters                  O    13
// RDY_perf_counters              O     1 const
// RDY_cache_enable               O     1 const
// RDY_perform_store              O     1 reg
// cacheable_store                O     1
// RDY_cacheable_store            O     1 const
// cache_available                O     1
// RDY_cache_available            O     1 const
// storebuffer_empty              O     1
// RDY_storebuffer_empty          O     1 const
// hold_req_get                   O   141
// RDY_hold_req_get               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// core_req_put                   I   141
// read_mem_resp_put              I    66
// nc_read_resp_put               I    66
// pa_from_tlb_put                I    40
// write_mem_resp_put             I     1
// cache_enable_c                 I     1
// perform_store_currepoch        I     1
// EN_core_req_put                I     1
// EN_read_mem_resp_put           I     1
// EN_nc_read_resp_put            I     1
// EN_pa_from_tlb_put             I     1
// EN_write_mem_req_deq           I     1
// EN_write_mem_resp_put          I     1
// EN_cache_enable                I     1
// EN_perform_store               I     1
// EN_core_resp_get               I     1
// EN_ptw_resp_get                I     1
// EN_read_mem_req_get            I     1
// EN_nc_read_req_get             I     1
// EN_nc_write_req_get            I     1
// EN_hold_req_get                I     1
//
// Combinational paths from inputs to outputs:
//   (core_req_put,
//    nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    perform_store_currepoch,
//    EN_core_req_put,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable,
//    EN_perform_store) -> perf_counters
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> RDY_core_resp_get
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> RDY_ptw_resp_get
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> RDY_hold_req_get
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> core_resp_get
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> ptw_resp_get
//   (nc_read_resp_put,
//    pa_from_tlb_put,
//    cache_enable_c,
//    EN_nc_read_resp_put,
//    EN_pa_from_tlb_put,
//    EN_cache_enable) -> hold_req_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(CLK,
		RST_N,

		core_req_put,
		EN_core_req_put,
		RDY_core_req_put,

		EN_core_resp_get,
		core_resp_get,
		RDY_core_resp_get,

		EN_ptw_resp_get,
		ptw_resp_get,
		RDY_ptw_resp_get,

		EN_read_mem_req_get,
		read_mem_req_get,
		RDY_read_mem_req_get,

		read_mem_resp_put,
		EN_read_mem_resp_put,
		RDY_read_mem_resp_put,

		EN_nc_read_req_get,
		nc_read_req_get,
		RDY_nc_read_req_get,

		nc_read_resp_put,
		EN_nc_read_resp_put,
		RDY_nc_read_resp_put,

		pa_from_tlb_put,
		EN_pa_from_tlb_put,
		RDY_pa_from_tlb_put,

		write_mem_req_rd,
		RDY_write_mem_req_rd,

		EN_write_mem_req_deq,
		RDY_write_mem_req_deq,

		write_mem_resp_put,
		EN_write_mem_resp_put,
		RDY_write_mem_resp_put,

		EN_nc_write_req_get,
		nc_write_req_get,
		RDY_nc_write_req_get,

		perf_counters,
		RDY_perf_counters,

		cache_enable_c,
		EN_cache_enable,
		RDY_cache_enable,

		perform_store_currepoch,
		EN_perform_store,
		RDY_perform_store,

		cacheable_store,
		RDY_cacheable_store,

		cache_available,
		RDY_cache_available,

		storebuffer_empty,
		RDY_storebuffer_empty,

		EN_hold_req_get,
		hold_req_get,
		RDY_hold_req_get);
  input  CLK;
  input  RST_N;

  // action method core_req_put
  input  [140 : 0] core_req_put;
  input  EN_core_req_put;
  output RDY_core_req_put;

  // actionvalue method core_resp_get
  input  EN_core_resp_get;
  output [71 : 0] core_resp_get;
  output RDY_core_resp_get;

  // actionvalue method ptw_resp_get
  input  EN_ptw_resp_get;
  output [71 : 0] ptw_resp_get;
  output RDY_ptw_resp_get;

  // actionvalue method read_mem_req_get
  input  EN_read_mem_req_get;
  output [42 : 0] read_mem_req_get;
  output RDY_read_mem_req_get;

  // action method read_mem_resp_put
  input  [65 : 0] read_mem_resp_put;
  input  EN_read_mem_resp_put;
  output RDY_read_mem_resp_put;

  // actionvalue method nc_read_req_get
  input  EN_nc_read_req_get;
  output [42 : 0] nc_read_req_get;
  output RDY_nc_read_req_get;

  // action method nc_read_resp_put
  input  [65 : 0] nc_read_resp_put;
  input  EN_nc_read_resp_put;
  output RDY_nc_read_resp_put;

  // action method pa_from_tlb_put
  input  [39 : 0] pa_from_tlb_put;
  input  EN_pa_from_tlb_put;
  output RDY_pa_from_tlb_put;

  // value method write_mem_req_rd
  output [554 : 0] write_mem_req_rd;
  output RDY_write_mem_req_rd;

  // action method write_mem_req_deq
  input  EN_write_mem_req_deq;
  output RDY_write_mem_req_deq;

  // action method write_mem_resp_put
  input  write_mem_resp_put;
  input  EN_write_mem_resp_put;
  output RDY_write_mem_resp_put;

  // actionvalue method nc_write_req_get
  input  EN_nc_write_req_get;
  output [106 : 0] nc_write_req_get;
  output RDY_nc_write_req_get;

  // value method perf_counters
  output [12 : 0] perf_counters;
  output RDY_perf_counters;

  // action method cache_enable
  input  cache_enable_c;
  input  EN_cache_enable;
  output RDY_cache_enable;

  // action method perform_store
  input  perform_store_currepoch;
  input  EN_perform_store;
  output RDY_perform_store;

  // value method cacheable_store
  output cacheable_store;
  output RDY_cacheable_store;

  // value method cache_available
  output cache_available;
  output RDY_cache_available;

  // value method storebuffer_empty
  output storebuffer_empty;
  output RDY_storebuffer_empty;

  // actionvalue method hold_req_get
  input  EN_hold_req_get;
  output [140 : 0] hold_req_get;
  output RDY_hold_req_get;

  // signals for module outputs
  wire [554 : 0] write_mem_req_rd;
  wire [140 : 0] hold_req_get;
  wire [106 : 0] nc_write_req_get;
  wire [71 : 0] core_resp_get, ptw_resp_get;
  wire [42 : 0] nc_read_req_get, read_mem_req_get;
  wire [12 : 0] perf_counters;
  wire RDY_cache_available,
       RDY_cache_enable,
       RDY_cacheable_store,
       RDY_core_req_put,
       RDY_core_resp_get,
       RDY_hold_req_get,
       RDY_nc_read_req_get,
       RDY_nc_read_resp_put,
       RDY_nc_write_req_get,
       RDY_pa_from_tlb_put,
       RDY_perf_counters,
       RDY_perform_store,
       RDY_ptw_resp_get,
       RDY_read_mem_req_get,
       RDY_read_mem_resp_put,
       RDY_storebuffer_empty,
       RDY_write_mem_req_deq,
       RDY_write_mem_req_rd,
       RDY_write_mem_resp_put,
       cache_available,
       cacheable_store,
       storebuffer_empty;

  // inlined wires
  reg [72 : 0] ff_core_response_rv_port0__write_1;
  wire [141 : 0] ff_hold_request_rv_port0__write_1,
		 ff_hold_request_rv_port1__read,
		 ff_hold_request_rv_port1__write_1,
		 ff_hold_request_rv_port2__read;
  wire [72 : 0] ff_core_response_rv_port1__read,
		ff_core_response_rv_port1__write_1,
		ff_core_response_rv_port2__read,
		ff_ptw_response_rv_port0__write_1,
		ff_ptw_response_rv_port1__read,
		ff_ptw_response_rv_port2__read;
  wire [66 : 0] ff_nc_read_response_rv_port0__write_1,
		ff_nc_read_response_rv_port1__read,
		ff_nc_read_response_rv_port1__write_1,
		ff_nc_read_response_rv_port2__read,
		ff_read_mem_response_rv_port0__write_1,
		ff_read_mem_response_rv_port1__read,
		ff_read_mem_response_rv_port2__read;
  wire [40 : 0] ff_from_tlb_rv_port0__write_1,
		ff_from_tlb_rv_port1__read,
		ff_from_tlb_rv_port1__write_1,
		ff_from_tlb_rv_port2__read;
  wire [3 : 0] wr_fbbeingfilled_wget;
  wire [1 : 0] ff_write_mem_response_rv_port0__write_1,
	       ff_write_mem_response_rv_port1__read,
	       ff_write_mem_response_rv_port1__write_1,
	       ff_write_mem_response_rv_port2__read,
	       wr_cache_response_wget,
	       wr_fb_response_wget;
  wire _deq_RL_fence_operation_EN_ff_core_request_wget,
       _deq_RL_request_to_memory_EN_ff_core_request_wget,
       _port0__write_RL_respond_to_core_EN_ff_core_response_rv_wget,
       _write_RL_release_from_FB_EN_rg_replaylatest_wget,
       _write_RL_release_from_FB_EN_rg_valid_0_wget,
       _write_RL_release_from_FB_EN_rg_valid_1_wget,
       _write_RL_release_from_FB_EN_rg_valid_10_wget,
       _write_RL_release_from_FB_EN_rg_valid_11_wget,
       _write_RL_release_from_FB_EN_rg_valid_12_wget,
       _write_RL_release_from_FB_EN_rg_valid_13_wget,
       _write_RL_release_from_FB_EN_rg_valid_14_wget,
       _write_RL_release_from_FB_EN_rg_valid_15_wget,
       _write_RL_release_from_FB_EN_rg_valid_16_wget,
       _write_RL_release_from_FB_EN_rg_valid_17_wget,
       _write_RL_release_from_FB_EN_rg_valid_18_wget,
       _write_RL_release_from_FB_EN_rg_valid_19_wget,
       _write_RL_release_from_FB_EN_rg_valid_2_wget,
       _write_RL_release_from_FB_EN_rg_valid_20_wget,
       _write_RL_release_from_FB_EN_rg_valid_21_wget,
       _write_RL_release_from_FB_EN_rg_valid_22_wget,
       _write_RL_release_from_FB_EN_rg_valid_23_wget,
       _write_RL_release_from_FB_EN_rg_valid_24_wget,
       _write_RL_release_from_FB_EN_rg_valid_25_wget,
       _write_RL_release_from_FB_EN_rg_valid_26_wget,
       _write_RL_release_from_FB_EN_rg_valid_27_wget,
       _write_RL_release_from_FB_EN_rg_valid_28_wget,
       _write_RL_release_from_FB_EN_rg_valid_29_wget,
       _write_RL_release_from_FB_EN_rg_valid_3_wget,
       _write_RL_release_from_FB_EN_rg_valid_30_wget,
       _write_RL_release_from_FB_EN_rg_valid_31_wget,
       _write_RL_release_from_FB_EN_rg_valid_32_wget,
       _write_RL_release_from_FB_EN_rg_valid_33_wget,
       _write_RL_release_from_FB_EN_rg_valid_34_wget,
       _write_RL_release_from_FB_EN_rg_valid_35_wget,
       _write_RL_release_from_FB_EN_rg_valid_36_wget,
       _write_RL_release_from_FB_EN_rg_valid_37_wget,
       _write_RL_release_from_FB_EN_rg_valid_38_wget,
       _write_RL_release_from_FB_EN_rg_valid_39_wget,
       _write_RL_release_from_FB_EN_rg_valid_4_wget,
       _write_RL_release_from_FB_EN_rg_valid_40_wget,
       _write_RL_release_from_FB_EN_rg_valid_41_wget,
       _write_RL_release_from_FB_EN_rg_valid_42_wget,
       _write_RL_release_from_FB_EN_rg_valid_43_wget,
       _write_RL_release_from_FB_EN_rg_valid_44_wget,
       _write_RL_release_from_FB_EN_rg_valid_45_wget,
       _write_RL_release_from_FB_EN_rg_valid_46_wget,
       _write_RL_release_from_FB_EN_rg_valid_47_wget,
       _write_RL_release_from_FB_EN_rg_valid_48_wget,
       _write_RL_release_from_FB_EN_rg_valid_49_wget,
       _write_RL_release_from_FB_EN_rg_valid_5_wget,
       _write_RL_release_from_FB_EN_rg_valid_50_wget,
       _write_RL_release_from_FB_EN_rg_valid_51_wget,
       _write_RL_release_from_FB_EN_rg_valid_52_wget,
       _write_RL_release_from_FB_EN_rg_valid_53_wget,
       _write_RL_release_from_FB_EN_rg_valid_54_wget,
       _write_RL_release_from_FB_EN_rg_valid_55_wget,
       _write_RL_release_from_FB_EN_rg_valid_56_wget,
       _write_RL_release_from_FB_EN_rg_valid_57_wget,
       _write_RL_release_from_FB_EN_rg_valid_58_wget,
       _write_RL_release_from_FB_EN_rg_valid_59_wget,
       _write_RL_release_from_FB_EN_rg_valid_6_wget,
       _write_RL_release_from_FB_EN_rg_valid_60_wget,
       _write_RL_release_from_FB_EN_rg_valid_61_wget,
       _write_RL_release_from_FB_EN_rg_valid_62_wget,
       _write_RL_release_from_FB_EN_rg_valid_63_wget,
       _write_RL_release_from_FB_EN_rg_valid_7_wget,
       _write_RL_release_from_FB_EN_rg_valid_8_wget,
       _write_RL_release_from_FB_EN_rg_valid_9_wget,
       _write_RL_request_to_memory_EN_fb_valid_0_wget,
       _write_RL_request_to_memory_EN_fb_valid_1_wget,
       _write_RL_request_to_memory_EN_fb_valid_2_wget,
       _write_RL_request_to_memory_EN_fb_valid_3_wget,
       _write_RL_request_to_memory_EN_fb_valid_4_wget,
       _write_RL_request_to_memory_EN_fb_valid_5_wget,
       _write_RL_request_to_memory_EN_fb_valid_6_wget,
       _write_RL_request_to_memory_EN_fb_valid_7_wget,
       _write_RL_respond_to_core_EN_fb_valid_0_wget,
       _write_RL_respond_to_core_EN_fb_valid_1_wget,
       _write_RL_respond_to_core_EN_fb_valid_2_wget,
       _write_RL_respond_to_core_EN_fb_valid_3_wget,
       _write_RL_respond_to_core_EN_fb_valid_4_wget,
       _write_RL_respond_to_core_EN_fb_valid_5_wget,
       _write_RL_respond_to_core_EN_fb_valid_6_wget,
       _write_RL_respond_to_core_EN_fb_valid_7_wget,
       ff_core_response_rv_EN_port0__write,
       ff_from_tlb_rv_EN_port1__write,
       ff_hold_request_rv_EN_port0__write,
       ff_ptw_response_rv_EN_port0__write,
       rg_readdone_1_whas,
       wr_cache_hitword_whas,
       wr_cache_response_whas,
       wr_fb_err_wget,
       wr_fb_response_whas,
       wr_total_atomic_access_whas,
       wr_total_atomic_miss_whas,
       wr_total_atomicfb_hits_whas,
       wr_total_io_reads_whas,
       wr_total_io_writes_whas,
       wr_total_read_access_whas,
       wr_total_read_miss_whas,
       wr_total_readfb_hits_whas,
       wr_total_write_access_whas,
       wr_total_write_miss_whas,
       wr_total_writefb_hits_whas,
       wr_trap_from_tlb_whas,
       wr_upd_fillingdata_whas;

  // register data_arr_0_rg_output_0
  reg [511 : 0] data_arr_0_rg_output_0;
  wire [511 : 0] data_arr_0_rg_output_0_D_IN;
  wire data_arr_0_rg_output_0_EN;

  // register data_arr_1_rg_output_0
  reg [511 : 0] data_arr_1_rg_output_0;
  wire [511 : 0] data_arr_1_rg_output_0_D_IN;
  wire data_arr_1_rg_output_0_EN;

  // register data_arr_2_rg_output_0
  reg [511 : 0] data_arr_2_rg_output_0;
  wire [511 : 0] data_arr_2_rg_output_0_D_IN;
  wire data_arr_2_rg_output_0_EN;

  // register data_arr_3_rg_output_0
  reg [511 : 0] data_arr_3_rg_output_0;
  wire [511 : 0] data_arr_3_rg_output_0_D_IN;
  wire data_arr_3_rg_output_0_EN;

  // register fb_addr_0
  reg [31 : 0] fb_addr_0;
  wire [31 : 0] fb_addr_0_D_IN;
  wire fb_addr_0_EN;

  // register fb_addr_1
  reg [31 : 0] fb_addr_1;
  wire [31 : 0] fb_addr_1_D_IN;
  wire fb_addr_1_EN;

  // register fb_addr_2
  reg [31 : 0] fb_addr_2;
  wire [31 : 0] fb_addr_2_D_IN;
  wire fb_addr_2_EN;

  // register fb_addr_3
  reg [31 : 0] fb_addr_3;
  wire [31 : 0] fb_addr_3_D_IN;
  wire fb_addr_3_EN;

  // register fb_addr_4
  reg [31 : 0] fb_addr_4;
  wire [31 : 0] fb_addr_4_D_IN;
  wire fb_addr_4_EN;

  // register fb_addr_5
  reg [31 : 0] fb_addr_5;
  wire [31 : 0] fb_addr_5_D_IN;
  wire fb_addr_5_EN;

  // register fb_addr_6
  reg [31 : 0] fb_addr_6;
  wire [31 : 0] fb_addr_6_D_IN;
  wire fb_addr_6_EN;

  // register fb_addr_7
  reg [31 : 0] fb_addr_7;
  wire [31 : 0] fb_addr_7_D_IN;
  wire fb_addr_7_EN;

  // register fb_dataline_0
  reg [511 : 0] fb_dataline_0;
  reg [511 : 0] fb_dataline_0_D_IN;
  wire fb_dataline_0_EN;

  // register fb_dataline_1
  reg [511 : 0] fb_dataline_1;
  reg [511 : 0] fb_dataline_1_D_IN;
  wire fb_dataline_1_EN;

  // register fb_dataline_2
  reg [511 : 0] fb_dataline_2;
  reg [511 : 0] fb_dataline_2_D_IN;
  wire fb_dataline_2_EN;

  // register fb_dataline_3
  reg [511 : 0] fb_dataline_3;
  reg [511 : 0] fb_dataline_3_D_IN;
  wire fb_dataline_3_EN;

  // register fb_dataline_4
  reg [511 : 0] fb_dataline_4;
  reg [511 : 0] fb_dataline_4_D_IN;
  wire fb_dataline_4_EN;

  // register fb_dataline_5
  reg [511 : 0] fb_dataline_5;
  reg [511 : 0] fb_dataline_5_D_IN;
  wire fb_dataline_5_EN;

  // register fb_dataline_6
  reg [511 : 0] fb_dataline_6;
  reg [511 : 0] fb_dataline_6_D_IN;
  wire fb_dataline_6_EN;

  // register fb_dataline_7
  reg [511 : 0] fb_dataline_7;
  reg [511 : 0] fb_dataline_7_D_IN;
  wire fb_dataline_7_EN;

  // register fb_dirty_0
  reg fb_dirty_0;
  reg fb_dirty_0_D_IN;
  wire fb_dirty_0_EN;

  // register fb_dirty_1
  reg fb_dirty_1;
  reg fb_dirty_1_D_IN;
  wire fb_dirty_1_EN;

  // register fb_dirty_2
  reg fb_dirty_2;
  reg fb_dirty_2_D_IN;
  wire fb_dirty_2_EN;

  // register fb_dirty_3
  reg fb_dirty_3;
  reg fb_dirty_3_D_IN;
  wire fb_dirty_3_EN;

  // register fb_dirty_4
  reg fb_dirty_4;
  reg fb_dirty_4_D_IN;
  wire fb_dirty_4_EN;

  // register fb_dirty_5
  reg fb_dirty_5;
  reg fb_dirty_5_D_IN;
  wire fb_dirty_5_EN;

  // register fb_dirty_6
  reg fb_dirty_6;
  reg fb_dirty_6_D_IN;
  wire fb_dirty_6_EN;

  // register fb_dirty_7
  reg fb_dirty_7;
  reg fb_dirty_7_D_IN;
  wire fb_dirty_7_EN;

  // register fb_enables_0
  reg [7 : 0] fb_enables_0;
  reg [7 : 0] fb_enables_0_D_IN;
  wire fb_enables_0_EN;

  // register fb_enables_1
  reg [7 : 0] fb_enables_1;
  reg [7 : 0] fb_enables_1_D_IN;
  wire fb_enables_1_EN;

  // register fb_enables_2
  reg [7 : 0] fb_enables_2;
  reg [7 : 0] fb_enables_2_D_IN;
  wire fb_enables_2_EN;

  // register fb_enables_3
  reg [7 : 0] fb_enables_3;
  reg [7 : 0] fb_enables_3_D_IN;
  wire fb_enables_3_EN;

  // register fb_enables_4
  reg [7 : 0] fb_enables_4;
  reg [7 : 0] fb_enables_4_D_IN;
  wire fb_enables_4_EN;

  // register fb_enables_5
  reg [7 : 0] fb_enables_5;
  reg [7 : 0] fb_enables_5_D_IN;
  wire fb_enables_5_EN;

  // register fb_enables_6
  reg [7 : 0] fb_enables_6;
  reg [7 : 0] fb_enables_6_D_IN;
  wire fb_enables_6_EN;

  // register fb_enables_7
  reg [7 : 0] fb_enables_7;
  reg [7 : 0] fb_enables_7_D_IN;
  wire fb_enables_7_EN;

  // register fb_err_0
  reg fb_err_0;
  wire fb_err_0_D_IN, fb_err_0_EN;

  // register fb_err_1
  reg fb_err_1;
  wire fb_err_1_D_IN, fb_err_1_EN;

  // register fb_err_2
  reg fb_err_2;
  wire fb_err_2_D_IN, fb_err_2_EN;

  // register fb_err_3
  reg fb_err_3;
  wire fb_err_3_D_IN, fb_err_3_EN;

  // register fb_err_4
  reg fb_err_4;
  wire fb_err_4_D_IN, fb_err_4_EN;

  // register fb_err_5
  reg fb_err_5;
  wire fb_err_5_D_IN, fb_err_5_EN;

  // register fb_err_6
  reg fb_err_6;
  wire fb_err_6_D_IN, fb_err_6_EN;

  // register fb_err_7
  reg fb_err_7;
  wire fb_err_7_D_IN, fb_err_7_EN;

  // register fb_valid_0
  reg fb_valid_0;
  reg fb_valid_0_D_IN;
  wire fb_valid_0_EN;

  // register fb_valid_1
  reg fb_valid_1;
  reg fb_valid_1_D_IN;
  wire fb_valid_1_EN;

  // register fb_valid_2
  reg fb_valid_2;
  reg fb_valid_2_D_IN;
  wire fb_valid_2_EN;

  // register fb_valid_3
  reg fb_valid_3;
  reg fb_valid_3_D_IN;
  wire fb_valid_3_EN;

  // register fb_valid_4
  reg fb_valid_4;
  reg fb_valid_4_D_IN;
  wire fb_valid_4_EN;

  // register fb_valid_5
  reg fb_valid_5;
  reg fb_valid_5_D_IN;
  wire fb_valid_5_EN;

  // register fb_valid_6
  reg fb_valid_6;
  reg fb_valid_6_D_IN;
  wire fb_valid_6_EN;

  // register fb_valid_7
  reg fb_valid_7;
  reg fb_valid_7_D_IN;
  wire fb_valid_7_EN;

  // register ff_core_response_rv
  reg [72 : 0] ff_core_response_rv;
  wire [72 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_from_tlb_rv
  reg [40 : 0] ff_from_tlb_rv;
  wire [40 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_hold_request_rv
  reg [141 : 0] ff_hold_request_rv;
  wire [141 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_nc_read_response_rv
  reg [66 : 0] ff_nc_read_response_rv;
  wire [66 : 0] ff_nc_read_response_rv_D_IN;
  wire ff_nc_read_response_rv_EN;

  // register ff_ptw_response_rv
  reg [72 : 0] ff_ptw_response_rv;
  wire [72 : 0] ff_ptw_response_rv_D_IN;
  wire ff_ptw_response_rv_EN;

  // register ff_read_mem_response_rv
  reg [66 : 0] ff_read_mem_response_rv;
  wire [66 : 0] ff_read_mem_response_rv_D_IN;
  wire ff_read_mem_response_rv_EN;

  // register ff_write_mem_response_rv
  reg [1 : 0] ff_write_mem_response_rv;
  wire [1 : 0] ff_write_mem_response_rv_D_IN;
  wire ff_write_mem_response_rv_EN;

  // register repl_v_count_0
  reg [1 : 0] repl_v_count_0;
  wire [1 : 0] repl_v_count_0_D_IN;
  wire repl_v_count_0_EN;

  // register repl_v_count_1
  reg [1 : 0] repl_v_count_1;
  wire [1 : 0] repl_v_count_1_D_IN;
  wire repl_v_count_1_EN;

  // register repl_v_count_10
  reg [1 : 0] repl_v_count_10;
  wire [1 : 0] repl_v_count_10_D_IN;
  wire repl_v_count_10_EN;

  // register repl_v_count_11
  reg [1 : 0] repl_v_count_11;
  wire [1 : 0] repl_v_count_11_D_IN;
  wire repl_v_count_11_EN;

  // register repl_v_count_12
  reg [1 : 0] repl_v_count_12;
  wire [1 : 0] repl_v_count_12_D_IN;
  wire repl_v_count_12_EN;

  // register repl_v_count_13
  reg [1 : 0] repl_v_count_13;
  wire [1 : 0] repl_v_count_13_D_IN;
  wire repl_v_count_13_EN;

  // register repl_v_count_14
  reg [1 : 0] repl_v_count_14;
  wire [1 : 0] repl_v_count_14_D_IN;
  wire repl_v_count_14_EN;

  // register repl_v_count_15
  reg [1 : 0] repl_v_count_15;
  wire [1 : 0] repl_v_count_15_D_IN;
  wire repl_v_count_15_EN;

  // register repl_v_count_16
  reg [1 : 0] repl_v_count_16;
  wire [1 : 0] repl_v_count_16_D_IN;
  wire repl_v_count_16_EN;

  // register repl_v_count_17
  reg [1 : 0] repl_v_count_17;
  wire [1 : 0] repl_v_count_17_D_IN;
  wire repl_v_count_17_EN;

  // register repl_v_count_18
  reg [1 : 0] repl_v_count_18;
  wire [1 : 0] repl_v_count_18_D_IN;
  wire repl_v_count_18_EN;

  // register repl_v_count_19
  reg [1 : 0] repl_v_count_19;
  wire [1 : 0] repl_v_count_19_D_IN;
  wire repl_v_count_19_EN;

  // register repl_v_count_2
  reg [1 : 0] repl_v_count_2;
  wire [1 : 0] repl_v_count_2_D_IN;
  wire repl_v_count_2_EN;

  // register repl_v_count_20
  reg [1 : 0] repl_v_count_20;
  wire [1 : 0] repl_v_count_20_D_IN;
  wire repl_v_count_20_EN;

  // register repl_v_count_21
  reg [1 : 0] repl_v_count_21;
  wire [1 : 0] repl_v_count_21_D_IN;
  wire repl_v_count_21_EN;

  // register repl_v_count_22
  reg [1 : 0] repl_v_count_22;
  wire [1 : 0] repl_v_count_22_D_IN;
  wire repl_v_count_22_EN;

  // register repl_v_count_23
  reg [1 : 0] repl_v_count_23;
  wire [1 : 0] repl_v_count_23_D_IN;
  wire repl_v_count_23_EN;

  // register repl_v_count_24
  reg [1 : 0] repl_v_count_24;
  wire [1 : 0] repl_v_count_24_D_IN;
  wire repl_v_count_24_EN;

  // register repl_v_count_25
  reg [1 : 0] repl_v_count_25;
  wire [1 : 0] repl_v_count_25_D_IN;
  wire repl_v_count_25_EN;

  // register repl_v_count_26
  reg [1 : 0] repl_v_count_26;
  wire [1 : 0] repl_v_count_26_D_IN;
  wire repl_v_count_26_EN;

  // register repl_v_count_27
  reg [1 : 0] repl_v_count_27;
  wire [1 : 0] repl_v_count_27_D_IN;
  wire repl_v_count_27_EN;

  // register repl_v_count_28
  reg [1 : 0] repl_v_count_28;
  wire [1 : 0] repl_v_count_28_D_IN;
  wire repl_v_count_28_EN;

  // register repl_v_count_29
  reg [1 : 0] repl_v_count_29;
  wire [1 : 0] repl_v_count_29_D_IN;
  wire repl_v_count_29_EN;

  // register repl_v_count_3
  reg [1 : 0] repl_v_count_3;
  wire [1 : 0] repl_v_count_3_D_IN;
  wire repl_v_count_3_EN;

  // register repl_v_count_30
  reg [1 : 0] repl_v_count_30;
  wire [1 : 0] repl_v_count_30_D_IN;
  wire repl_v_count_30_EN;

  // register repl_v_count_31
  reg [1 : 0] repl_v_count_31;
  wire [1 : 0] repl_v_count_31_D_IN;
  wire repl_v_count_31_EN;

  // register repl_v_count_32
  reg [1 : 0] repl_v_count_32;
  wire [1 : 0] repl_v_count_32_D_IN;
  wire repl_v_count_32_EN;

  // register repl_v_count_33
  reg [1 : 0] repl_v_count_33;
  wire [1 : 0] repl_v_count_33_D_IN;
  wire repl_v_count_33_EN;

  // register repl_v_count_34
  reg [1 : 0] repl_v_count_34;
  wire [1 : 0] repl_v_count_34_D_IN;
  wire repl_v_count_34_EN;

  // register repl_v_count_35
  reg [1 : 0] repl_v_count_35;
  wire [1 : 0] repl_v_count_35_D_IN;
  wire repl_v_count_35_EN;

  // register repl_v_count_36
  reg [1 : 0] repl_v_count_36;
  wire [1 : 0] repl_v_count_36_D_IN;
  wire repl_v_count_36_EN;

  // register repl_v_count_37
  reg [1 : 0] repl_v_count_37;
  wire [1 : 0] repl_v_count_37_D_IN;
  wire repl_v_count_37_EN;

  // register repl_v_count_38
  reg [1 : 0] repl_v_count_38;
  wire [1 : 0] repl_v_count_38_D_IN;
  wire repl_v_count_38_EN;

  // register repl_v_count_39
  reg [1 : 0] repl_v_count_39;
  wire [1 : 0] repl_v_count_39_D_IN;
  wire repl_v_count_39_EN;

  // register repl_v_count_4
  reg [1 : 0] repl_v_count_4;
  wire [1 : 0] repl_v_count_4_D_IN;
  wire repl_v_count_4_EN;

  // register repl_v_count_40
  reg [1 : 0] repl_v_count_40;
  wire [1 : 0] repl_v_count_40_D_IN;
  wire repl_v_count_40_EN;

  // register repl_v_count_41
  reg [1 : 0] repl_v_count_41;
  wire [1 : 0] repl_v_count_41_D_IN;
  wire repl_v_count_41_EN;

  // register repl_v_count_42
  reg [1 : 0] repl_v_count_42;
  wire [1 : 0] repl_v_count_42_D_IN;
  wire repl_v_count_42_EN;

  // register repl_v_count_43
  reg [1 : 0] repl_v_count_43;
  wire [1 : 0] repl_v_count_43_D_IN;
  wire repl_v_count_43_EN;

  // register repl_v_count_44
  reg [1 : 0] repl_v_count_44;
  wire [1 : 0] repl_v_count_44_D_IN;
  wire repl_v_count_44_EN;

  // register repl_v_count_45
  reg [1 : 0] repl_v_count_45;
  wire [1 : 0] repl_v_count_45_D_IN;
  wire repl_v_count_45_EN;

  // register repl_v_count_46
  reg [1 : 0] repl_v_count_46;
  wire [1 : 0] repl_v_count_46_D_IN;
  wire repl_v_count_46_EN;

  // register repl_v_count_47
  reg [1 : 0] repl_v_count_47;
  wire [1 : 0] repl_v_count_47_D_IN;
  wire repl_v_count_47_EN;

  // register repl_v_count_48
  reg [1 : 0] repl_v_count_48;
  wire [1 : 0] repl_v_count_48_D_IN;
  wire repl_v_count_48_EN;

  // register repl_v_count_49
  reg [1 : 0] repl_v_count_49;
  wire [1 : 0] repl_v_count_49_D_IN;
  wire repl_v_count_49_EN;

  // register repl_v_count_5
  reg [1 : 0] repl_v_count_5;
  wire [1 : 0] repl_v_count_5_D_IN;
  wire repl_v_count_5_EN;

  // register repl_v_count_50
  reg [1 : 0] repl_v_count_50;
  wire [1 : 0] repl_v_count_50_D_IN;
  wire repl_v_count_50_EN;

  // register repl_v_count_51
  reg [1 : 0] repl_v_count_51;
  wire [1 : 0] repl_v_count_51_D_IN;
  wire repl_v_count_51_EN;

  // register repl_v_count_52
  reg [1 : 0] repl_v_count_52;
  wire [1 : 0] repl_v_count_52_D_IN;
  wire repl_v_count_52_EN;

  // register repl_v_count_53
  reg [1 : 0] repl_v_count_53;
  wire [1 : 0] repl_v_count_53_D_IN;
  wire repl_v_count_53_EN;

  // register repl_v_count_54
  reg [1 : 0] repl_v_count_54;
  wire [1 : 0] repl_v_count_54_D_IN;
  wire repl_v_count_54_EN;

  // register repl_v_count_55
  reg [1 : 0] repl_v_count_55;
  wire [1 : 0] repl_v_count_55_D_IN;
  wire repl_v_count_55_EN;

  // register repl_v_count_56
  reg [1 : 0] repl_v_count_56;
  wire [1 : 0] repl_v_count_56_D_IN;
  wire repl_v_count_56_EN;

  // register repl_v_count_57
  reg [1 : 0] repl_v_count_57;
  wire [1 : 0] repl_v_count_57_D_IN;
  wire repl_v_count_57_EN;

  // register repl_v_count_58
  reg [1 : 0] repl_v_count_58;
  wire [1 : 0] repl_v_count_58_D_IN;
  wire repl_v_count_58_EN;

  // register repl_v_count_59
  reg [1 : 0] repl_v_count_59;
  wire [1 : 0] repl_v_count_59_D_IN;
  wire repl_v_count_59_EN;

  // register repl_v_count_6
  reg [1 : 0] repl_v_count_6;
  wire [1 : 0] repl_v_count_6_D_IN;
  wire repl_v_count_6_EN;

  // register repl_v_count_60
  reg [1 : 0] repl_v_count_60;
  wire [1 : 0] repl_v_count_60_D_IN;
  wire repl_v_count_60_EN;

  // register repl_v_count_61
  reg [1 : 0] repl_v_count_61;
  wire [1 : 0] repl_v_count_61_D_IN;
  wire repl_v_count_61_EN;

  // register repl_v_count_62
  reg [1 : 0] repl_v_count_62;
  wire [1 : 0] repl_v_count_62_D_IN;
  wire repl_v_count_62_EN;

  // register repl_v_count_63
  reg [1 : 0] repl_v_count_63;
  wire [1 : 0] repl_v_count_63_D_IN;
  wire repl_v_count_63_EN;

  // register repl_v_count_7
  reg [1 : 0] repl_v_count_7;
  wire [1 : 0] repl_v_count_7_D_IN;
  wire repl_v_count_7_EN;

  // register repl_v_count_8
  reg [1 : 0] repl_v_count_8;
  wire [1 : 0] repl_v_count_8_D_IN;
  wire repl_v_count_8_EN;

  // register repl_v_count_9
  reg [1 : 0] repl_v_count_9;
  wire [1 : 0] repl_v_count_9_D_IN;
  wire repl_v_count_9_EN;

  // register rg_dirty_0
  reg [3 : 0] rg_dirty_0;
  reg [3 : 0] rg_dirty_0_D_IN;
  wire rg_dirty_0_EN;

  // register rg_dirty_1
  reg [3 : 0] rg_dirty_1;
  reg [3 : 0] rg_dirty_1_D_IN;
  wire rg_dirty_1_EN;

  // register rg_dirty_10
  reg [3 : 0] rg_dirty_10;
  reg [3 : 0] rg_dirty_10_D_IN;
  wire rg_dirty_10_EN;

  // register rg_dirty_11
  reg [3 : 0] rg_dirty_11;
  reg [3 : 0] rg_dirty_11_D_IN;
  wire rg_dirty_11_EN;

  // register rg_dirty_12
  reg [3 : 0] rg_dirty_12;
  reg [3 : 0] rg_dirty_12_D_IN;
  wire rg_dirty_12_EN;

  // register rg_dirty_13
  reg [3 : 0] rg_dirty_13;
  reg [3 : 0] rg_dirty_13_D_IN;
  wire rg_dirty_13_EN;

  // register rg_dirty_14
  reg [3 : 0] rg_dirty_14;
  reg [3 : 0] rg_dirty_14_D_IN;
  wire rg_dirty_14_EN;

  // register rg_dirty_15
  reg [3 : 0] rg_dirty_15;
  reg [3 : 0] rg_dirty_15_D_IN;
  wire rg_dirty_15_EN;

  // register rg_dirty_16
  reg [3 : 0] rg_dirty_16;
  reg [3 : 0] rg_dirty_16_D_IN;
  wire rg_dirty_16_EN;

  // register rg_dirty_17
  reg [3 : 0] rg_dirty_17;
  reg [3 : 0] rg_dirty_17_D_IN;
  wire rg_dirty_17_EN;

  // register rg_dirty_18
  reg [3 : 0] rg_dirty_18;
  reg [3 : 0] rg_dirty_18_D_IN;
  wire rg_dirty_18_EN;

  // register rg_dirty_19
  reg [3 : 0] rg_dirty_19;
  reg [3 : 0] rg_dirty_19_D_IN;
  wire rg_dirty_19_EN;

  // register rg_dirty_2
  reg [3 : 0] rg_dirty_2;
  reg [3 : 0] rg_dirty_2_D_IN;
  wire rg_dirty_2_EN;

  // register rg_dirty_20
  reg [3 : 0] rg_dirty_20;
  reg [3 : 0] rg_dirty_20_D_IN;
  wire rg_dirty_20_EN;

  // register rg_dirty_21
  reg [3 : 0] rg_dirty_21;
  reg [3 : 0] rg_dirty_21_D_IN;
  wire rg_dirty_21_EN;

  // register rg_dirty_22
  reg [3 : 0] rg_dirty_22;
  reg [3 : 0] rg_dirty_22_D_IN;
  wire rg_dirty_22_EN;

  // register rg_dirty_23
  reg [3 : 0] rg_dirty_23;
  reg [3 : 0] rg_dirty_23_D_IN;
  wire rg_dirty_23_EN;

  // register rg_dirty_24
  reg [3 : 0] rg_dirty_24;
  reg [3 : 0] rg_dirty_24_D_IN;
  wire rg_dirty_24_EN;

  // register rg_dirty_25
  reg [3 : 0] rg_dirty_25;
  reg [3 : 0] rg_dirty_25_D_IN;
  wire rg_dirty_25_EN;

  // register rg_dirty_26
  reg [3 : 0] rg_dirty_26;
  reg [3 : 0] rg_dirty_26_D_IN;
  wire rg_dirty_26_EN;

  // register rg_dirty_27
  reg [3 : 0] rg_dirty_27;
  reg [3 : 0] rg_dirty_27_D_IN;
  wire rg_dirty_27_EN;

  // register rg_dirty_28
  reg [3 : 0] rg_dirty_28;
  reg [3 : 0] rg_dirty_28_D_IN;
  wire rg_dirty_28_EN;

  // register rg_dirty_29
  reg [3 : 0] rg_dirty_29;
  reg [3 : 0] rg_dirty_29_D_IN;
  wire rg_dirty_29_EN;

  // register rg_dirty_3
  reg [3 : 0] rg_dirty_3;
  reg [3 : 0] rg_dirty_3_D_IN;
  wire rg_dirty_3_EN;

  // register rg_dirty_30
  reg [3 : 0] rg_dirty_30;
  reg [3 : 0] rg_dirty_30_D_IN;
  wire rg_dirty_30_EN;

  // register rg_dirty_31
  reg [3 : 0] rg_dirty_31;
  reg [3 : 0] rg_dirty_31_D_IN;
  wire rg_dirty_31_EN;

  // register rg_dirty_32
  reg [3 : 0] rg_dirty_32;
  reg [3 : 0] rg_dirty_32_D_IN;
  wire rg_dirty_32_EN;

  // register rg_dirty_33
  reg [3 : 0] rg_dirty_33;
  reg [3 : 0] rg_dirty_33_D_IN;
  wire rg_dirty_33_EN;

  // register rg_dirty_34
  reg [3 : 0] rg_dirty_34;
  reg [3 : 0] rg_dirty_34_D_IN;
  wire rg_dirty_34_EN;

  // register rg_dirty_35
  reg [3 : 0] rg_dirty_35;
  reg [3 : 0] rg_dirty_35_D_IN;
  wire rg_dirty_35_EN;

  // register rg_dirty_36
  reg [3 : 0] rg_dirty_36;
  reg [3 : 0] rg_dirty_36_D_IN;
  wire rg_dirty_36_EN;

  // register rg_dirty_37
  reg [3 : 0] rg_dirty_37;
  reg [3 : 0] rg_dirty_37_D_IN;
  wire rg_dirty_37_EN;

  // register rg_dirty_38
  reg [3 : 0] rg_dirty_38;
  reg [3 : 0] rg_dirty_38_D_IN;
  wire rg_dirty_38_EN;

  // register rg_dirty_39
  reg [3 : 0] rg_dirty_39;
  reg [3 : 0] rg_dirty_39_D_IN;
  wire rg_dirty_39_EN;

  // register rg_dirty_4
  reg [3 : 0] rg_dirty_4;
  reg [3 : 0] rg_dirty_4_D_IN;
  wire rg_dirty_4_EN;

  // register rg_dirty_40
  reg [3 : 0] rg_dirty_40;
  reg [3 : 0] rg_dirty_40_D_IN;
  wire rg_dirty_40_EN;

  // register rg_dirty_41
  reg [3 : 0] rg_dirty_41;
  reg [3 : 0] rg_dirty_41_D_IN;
  wire rg_dirty_41_EN;

  // register rg_dirty_42
  reg [3 : 0] rg_dirty_42;
  reg [3 : 0] rg_dirty_42_D_IN;
  wire rg_dirty_42_EN;

  // register rg_dirty_43
  reg [3 : 0] rg_dirty_43;
  reg [3 : 0] rg_dirty_43_D_IN;
  wire rg_dirty_43_EN;

  // register rg_dirty_44
  reg [3 : 0] rg_dirty_44;
  reg [3 : 0] rg_dirty_44_D_IN;
  wire rg_dirty_44_EN;

  // register rg_dirty_45
  reg [3 : 0] rg_dirty_45;
  reg [3 : 0] rg_dirty_45_D_IN;
  wire rg_dirty_45_EN;

  // register rg_dirty_46
  reg [3 : 0] rg_dirty_46;
  reg [3 : 0] rg_dirty_46_D_IN;
  wire rg_dirty_46_EN;

  // register rg_dirty_47
  reg [3 : 0] rg_dirty_47;
  reg [3 : 0] rg_dirty_47_D_IN;
  wire rg_dirty_47_EN;

  // register rg_dirty_48
  reg [3 : 0] rg_dirty_48;
  reg [3 : 0] rg_dirty_48_D_IN;
  wire rg_dirty_48_EN;

  // register rg_dirty_49
  reg [3 : 0] rg_dirty_49;
  reg [3 : 0] rg_dirty_49_D_IN;
  wire rg_dirty_49_EN;

  // register rg_dirty_5
  reg [3 : 0] rg_dirty_5;
  reg [3 : 0] rg_dirty_5_D_IN;
  wire rg_dirty_5_EN;

  // register rg_dirty_50
  reg [3 : 0] rg_dirty_50;
  reg [3 : 0] rg_dirty_50_D_IN;
  wire rg_dirty_50_EN;

  // register rg_dirty_51
  reg [3 : 0] rg_dirty_51;
  reg [3 : 0] rg_dirty_51_D_IN;
  wire rg_dirty_51_EN;

  // register rg_dirty_52
  reg [3 : 0] rg_dirty_52;
  reg [3 : 0] rg_dirty_52_D_IN;
  wire rg_dirty_52_EN;

  // register rg_dirty_53
  reg [3 : 0] rg_dirty_53;
  reg [3 : 0] rg_dirty_53_D_IN;
  wire rg_dirty_53_EN;

  // register rg_dirty_54
  reg [3 : 0] rg_dirty_54;
  reg [3 : 0] rg_dirty_54_D_IN;
  wire rg_dirty_54_EN;

  // register rg_dirty_55
  reg [3 : 0] rg_dirty_55;
  reg [3 : 0] rg_dirty_55_D_IN;
  wire rg_dirty_55_EN;

  // register rg_dirty_56
  reg [3 : 0] rg_dirty_56;
  reg [3 : 0] rg_dirty_56_D_IN;
  wire rg_dirty_56_EN;

  // register rg_dirty_57
  reg [3 : 0] rg_dirty_57;
  reg [3 : 0] rg_dirty_57_D_IN;
  wire rg_dirty_57_EN;

  // register rg_dirty_58
  reg [3 : 0] rg_dirty_58;
  reg [3 : 0] rg_dirty_58_D_IN;
  wire rg_dirty_58_EN;

  // register rg_dirty_59
  reg [3 : 0] rg_dirty_59;
  reg [3 : 0] rg_dirty_59_D_IN;
  wire rg_dirty_59_EN;

  // register rg_dirty_6
  reg [3 : 0] rg_dirty_6;
  reg [3 : 0] rg_dirty_6_D_IN;
  wire rg_dirty_6_EN;

  // register rg_dirty_60
  reg [3 : 0] rg_dirty_60;
  reg [3 : 0] rg_dirty_60_D_IN;
  wire rg_dirty_60_EN;

  // register rg_dirty_61
  reg [3 : 0] rg_dirty_61;
  reg [3 : 0] rg_dirty_61_D_IN;
  wire rg_dirty_61_EN;

  // register rg_dirty_62
  reg [3 : 0] rg_dirty_62;
  reg [3 : 0] rg_dirty_62_D_IN;
  wire rg_dirty_62_EN;

  // register rg_dirty_63
  reg [3 : 0] rg_dirty_63;
  reg [3 : 0] rg_dirty_63_D_IN;
  wire rg_dirty_63_EN;

  // register rg_dirty_7
  reg [3 : 0] rg_dirty_7;
  reg [3 : 0] rg_dirty_7_D_IN;
  wire rg_dirty_7_EN;

  // register rg_dirty_8
  reg [3 : 0] rg_dirty_8;
  reg [3 : 0] rg_dirty_8_D_IN;
  wire rg_dirty_8_EN;

  // register rg_dirty_9
  reg [3 : 0] rg_dirty_9;
  reg [3 : 0] rg_dirty_9_D_IN;
  wire rg_dirty_9_EN;

  // register rg_fbfillenable
  reg [7 : 0] rg_fbfillenable;
  wire [7 : 0] rg_fbfillenable_D_IN;
  wire rg_fbfillenable_EN;

  // register rg_fbmissallocate
  reg [2 : 0] rg_fbmissallocate;
  wire [2 : 0] rg_fbmissallocate_D_IN;
  wire rg_fbmissallocate_EN;

  // register rg_fbwriteback
  reg [2 : 0] rg_fbwriteback;
  wire [2 : 0] rg_fbwriteback_D_IN;
  wire rg_fbwriteback_EN;

  // register rg_fence_pending
  reg rg_fence_pending;
  wire rg_fence_pending_D_IN, rg_fence_pending_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fenceinit
  reg rg_fenceinit;
  wire rg_fenceinit_D_IN, rg_fenceinit_EN;

  // register rg_globaldirty
  reg rg_globaldirty;
  wire rg_globaldirty_D_IN, rg_globaldirty_EN;

  // register rg_latest_index
  reg [5 : 0] rg_latest_index;
  wire [5 : 0] rg_latest_index_D_IN;
  wire rg_latest_index_EN;

  // register rg_miss_ongoing
  reg rg_miss_ongoing;
  wire rg_miss_ongoing_D_IN, rg_miss_ongoing_EN;

  // register rg_polling
  reg rg_polling;
  wire rg_polling_D_IN, rg_polling_EN;

  // register rg_readdone
  reg rg_readdone;
  wire rg_readdone_D_IN, rg_readdone_EN;

  // register rg_replaylatest
  reg rg_replaylatest;
  wire rg_replaylatest_D_IN, rg_replaylatest_EN;

  // register rg_set_select
  reg [5 : 0] rg_set_select;
  wire [5 : 0] rg_set_select_D_IN;
  wire rg_set_select_EN;

  // register rg_storehead
  reg rg_storehead;
  wire rg_storehead_D_IN, rg_storehead_EN;

  // register rg_storetail
  reg rg_storetail;
  wire rg_storetail_D_IN, rg_storetail_EN;

  // register rg_valid_0
  reg [3 : 0] rg_valid_0;
  reg [3 : 0] rg_valid_0_D_IN;
  wire rg_valid_0_EN;

  // register rg_valid_1
  reg [3 : 0] rg_valid_1;
  reg [3 : 0] rg_valid_1_D_IN;
  wire rg_valid_1_EN;

  // register rg_valid_10
  reg [3 : 0] rg_valid_10;
  reg [3 : 0] rg_valid_10_D_IN;
  wire rg_valid_10_EN;

  // register rg_valid_11
  reg [3 : 0] rg_valid_11;
  reg [3 : 0] rg_valid_11_D_IN;
  wire rg_valid_11_EN;

  // register rg_valid_12
  reg [3 : 0] rg_valid_12;
  reg [3 : 0] rg_valid_12_D_IN;
  wire rg_valid_12_EN;

  // register rg_valid_13
  reg [3 : 0] rg_valid_13;
  reg [3 : 0] rg_valid_13_D_IN;
  wire rg_valid_13_EN;

  // register rg_valid_14
  reg [3 : 0] rg_valid_14;
  reg [3 : 0] rg_valid_14_D_IN;
  wire rg_valid_14_EN;

  // register rg_valid_15
  reg [3 : 0] rg_valid_15;
  reg [3 : 0] rg_valid_15_D_IN;
  wire rg_valid_15_EN;

  // register rg_valid_16
  reg [3 : 0] rg_valid_16;
  reg [3 : 0] rg_valid_16_D_IN;
  wire rg_valid_16_EN;

  // register rg_valid_17
  reg [3 : 0] rg_valid_17;
  reg [3 : 0] rg_valid_17_D_IN;
  wire rg_valid_17_EN;

  // register rg_valid_18
  reg [3 : 0] rg_valid_18;
  reg [3 : 0] rg_valid_18_D_IN;
  wire rg_valid_18_EN;

  // register rg_valid_19
  reg [3 : 0] rg_valid_19;
  reg [3 : 0] rg_valid_19_D_IN;
  wire rg_valid_19_EN;

  // register rg_valid_2
  reg [3 : 0] rg_valid_2;
  reg [3 : 0] rg_valid_2_D_IN;
  wire rg_valid_2_EN;

  // register rg_valid_20
  reg [3 : 0] rg_valid_20;
  reg [3 : 0] rg_valid_20_D_IN;
  wire rg_valid_20_EN;

  // register rg_valid_21
  reg [3 : 0] rg_valid_21;
  reg [3 : 0] rg_valid_21_D_IN;
  wire rg_valid_21_EN;

  // register rg_valid_22
  reg [3 : 0] rg_valid_22;
  reg [3 : 0] rg_valid_22_D_IN;
  wire rg_valid_22_EN;

  // register rg_valid_23
  reg [3 : 0] rg_valid_23;
  reg [3 : 0] rg_valid_23_D_IN;
  wire rg_valid_23_EN;

  // register rg_valid_24
  reg [3 : 0] rg_valid_24;
  reg [3 : 0] rg_valid_24_D_IN;
  wire rg_valid_24_EN;

  // register rg_valid_25
  reg [3 : 0] rg_valid_25;
  reg [3 : 0] rg_valid_25_D_IN;
  wire rg_valid_25_EN;

  // register rg_valid_26
  reg [3 : 0] rg_valid_26;
  reg [3 : 0] rg_valid_26_D_IN;
  wire rg_valid_26_EN;

  // register rg_valid_27
  reg [3 : 0] rg_valid_27;
  reg [3 : 0] rg_valid_27_D_IN;
  wire rg_valid_27_EN;

  // register rg_valid_28
  reg [3 : 0] rg_valid_28;
  reg [3 : 0] rg_valid_28_D_IN;
  wire rg_valid_28_EN;

  // register rg_valid_29
  reg [3 : 0] rg_valid_29;
  reg [3 : 0] rg_valid_29_D_IN;
  wire rg_valid_29_EN;

  // register rg_valid_3
  reg [3 : 0] rg_valid_3;
  reg [3 : 0] rg_valid_3_D_IN;
  wire rg_valid_3_EN;

  // register rg_valid_30
  reg [3 : 0] rg_valid_30;
  reg [3 : 0] rg_valid_30_D_IN;
  wire rg_valid_30_EN;

  // register rg_valid_31
  reg [3 : 0] rg_valid_31;
  reg [3 : 0] rg_valid_31_D_IN;
  wire rg_valid_31_EN;

  // register rg_valid_32
  reg [3 : 0] rg_valid_32;
  reg [3 : 0] rg_valid_32_D_IN;
  wire rg_valid_32_EN;

  // register rg_valid_33
  reg [3 : 0] rg_valid_33;
  reg [3 : 0] rg_valid_33_D_IN;
  wire rg_valid_33_EN;

  // register rg_valid_34
  reg [3 : 0] rg_valid_34;
  reg [3 : 0] rg_valid_34_D_IN;
  wire rg_valid_34_EN;

  // register rg_valid_35
  reg [3 : 0] rg_valid_35;
  reg [3 : 0] rg_valid_35_D_IN;
  wire rg_valid_35_EN;

  // register rg_valid_36
  reg [3 : 0] rg_valid_36;
  reg [3 : 0] rg_valid_36_D_IN;
  wire rg_valid_36_EN;

  // register rg_valid_37
  reg [3 : 0] rg_valid_37;
  reg [3 : 0] rg_valid_37_D_IN;
  wire rg_valid_37_EN;

  // register rg_valid_38
  reg [3 : 0] rg_valid_38;
  reg [3 : 0] rg_valid_38_D_IN;
  wire rg_valid_38_EN;

  // register rg_valid_39
  reg [3 : 0] rg_valid_39;
  reg [3 : 0] rg_valid_39_D_IN;
  wire rg_valid_39_EN;

  // register rg_valid_4
  reg [3 : 0] rg_valid_4;
  reg [3 : 0] rg_valid_4_D_IN;
  wire rg_valid_4_EN;

  // register rg_valid_40
  reg [3 : 0] rg_valid_40;
  reg [3 : 0] rg_valid_40_D_IN;
  wire rg_valid_40_EN;

  // register rg_valid_41
  reg [3 : 0] rg_valid_41;
  reg [3 : 0] rg_valid_41_D_IN;
  wire rg_valid_41_EN;

  // register rg_valid_42
  reg [3 : 0] rg_valid_42;
  reg [3 : 0] rg_valid_42_D_IN;
  wire rg_valid_42_EN;

  // register rg_valid_43
  reg [3 : 0] rg_valid_43;
  reg [3 : 0] rg_valid_43_D_IN;
  wire rg_valid_43_EN;

  // register rg_valid_44
  reg [3 : 0] rg_valid_44;
  reg [3 : 0] rg_valid_44_D_IN;
  wire rg_valid_44_EN;

  // register rg_valid_45
  reg [3 : 0] rg_valid_45;
  reg [3 : 0] rg_valid_45_D_IN;
  wire rg_valid_45_EN;

  // register rg_valid_46
  reg [3 : 0] rg_valid_46;
  reg [3 : 0] rg_valid_46_D_IN;
  wire rg_valid_46_EN;

  // register rg_valid_47
  reg [3 : 0] rg_valid_47;
  reg [3 : 0] rg_valid_47_D_IN;
  wire rg_valid_47_EN;

  // register rg_valid_48
  reg [3 : 0] rg_valid_48;
  reg [3 : 0] rg_valid_48_D_IN;
  wire rg_valid_48_EN;

  // register rg_valid_49
  reg [3 : 0] rg_valid_49;
  reg [3 : 0] rg_valid_49_D_IN;
  wire rg_valid_49_EN;

  // register rg_valid_5
  reg [3 : 0] rg_valid_5;
  reg [3 : 0] rg_valid_5_D_IN;
  wire rg_valid_5_EN;

  // register rg_valid_50
  reg [3 : 0] rg_valid_50;
  reg [3 : 0] rg_valid_50_D_IN;
  wire rg_valid_50_EN;

  // register rg_valid_51
  reg [3 : 0] rg_valid_51;
  reg [3 : 0] rg_valid_51_D_IN;
  wire rg_valid_51_EN;

  // register rg_valid_52
  reg [3 : 0] rg_valid_52;
  reg [3 : 0] rg_valid_52_D_IN;
  wire rg_valid_52_EN;

  // register rg_valid_53
  reg [3 : 0] rg_valid_53;
  reg [3 : 0] rg_valid_53_D_IN;
  wire rg_valid_53_EN;

  // register rg_valid_54
  reg [3 : 0] rg_valid_54;
  reg [3 : 0] rg_valid_54_D_IN;
  wire rg_valid_54_EN;

  // register rg_valid_55
  reg [3 : 0] rg_valid_55;
  reg [3 : 0] rg_valid_55_D_IN;
  wire rg_valid_55_EN;

  // register rg_valid_56
  reg [3 : 0] rg_valid_56;
  reg [3 : 0] rg_valid_56_D_IN;
  wire rg_valid_56_EN;

  // register rg_valid_57
  reg [3 : 0] rg_valid_57;
  reg [3 : 0] rg_valid_57_D_IN;
  wire rg_valid_57_EN;

  // register rg_valid_58
  reg [3 : 0] rg_valid_58;
  reg [3 : 0] rg_valid_58_D_IN;
  wire rg_valid_58_EN;

  // register rg_valid_59
  reg [3 : 0] rg_valid_59;
  reg [3 : 0] rg_valid_59_D_IN;
  wire rg_valid_59_EN;

  // register rg_valid_6
  reg [3 : 0] rg_valid_6;
  reg [3 : 0] rg_valid_6_D_IN;
  wire rg_valid_6_EN;

  // register rg_valid_60
  reg [3 : 0] rg_valid_60;
  reg [3 : 0] rg_valid_60_D_IN;
  wire rg_valid_60_EN;

  // register rg_valid_61
  reg [3 : 0] rg_valid_61;
  reg [3 : 0] rg_valid_61_D_IN;
  wire rg_valid_61_EN;

  // register rg_valid_62
  reg [3 : 0] rg_valid_62;
  reg [3 : 0] rg_valid_62_D_IN;
  wire rg_valid_62_EN;

  // register rg_valid_63
  reg [3 : 0] rg_valid_63;
  reg [3 : 0] rg_valid_63_D_IN;
  wire rg_valid_63_EN;

  // register rg_valid_7
  reg [3 : 0] rg_valid_7;
  reg [3 : 0] rg_valid_7_D_IN;
  wire rg_valid_7_EN;

  // register rg_valid_8
  reg [3 : 0] rg_valid_8;
  reg [3 : 0] rg_valid_8_D_IN;
  wire rg_valid_8_EN;

  // register rg_valid_9
  reg [3 : 0] rg_valid_9;
  reg [3 : 0] rg_valid_9_D_IN;
  wire rg_valid_9_EN;

  // register rg_way_select
  reg [3 : 0] rg_way_select;
  wire [3 : 0] rg_way_select_D_IN;
  wire rg_way_select_EN;

  // register store_addr_0
  reg [31 : 0] store_addr_0;
  wire [31 : 0] store_addr_0_D_IN;
  wire store_addr_0_EN;

  // register store_addr_1
  reg [31 : 0] store_addr_1;
  wire [31 : 0] store_addr_1_D_IN;
  wire store_addr_1_EN;

  // register store_data_0
  reg [63 : 0] store_data_0;
  wire [63 : 0] store_data_0_D_IN;
  wire store_data_0_EN;

  // register store_data_1
  reg [63 : 0] store_data_1;
  wire [63 : 0] store_data_1_D_IN;
  wire store_data_1_EN;

  // register store_epoch_0
  reg store_epoch_0;
  wire store_epoch_0_D_IN, store_epoch_0_EN;

  // register store_epoch_1
  reg store_epoch_1;
  wire store_epoch_1_D_IN, store_epoch_1_EN;

  // register store_fbindex_0
  reg [2 : 0] store_fbindex_0;
  wire [2 : 0] store_fbindex_0_D_IN;
  wire store_fbindex_0_EN;

  // register store_fbindex_1
  reg [2 : 0] store_fbindex_1;
  wire [2 : 0] store_fbindex_1_D_IN;
  wire store_fbindex_1_EN;

  // register store_io_0
  reg store_io_0;
  wire store_io_0_D_IN, store_io_0_EN;

  // register store_io_1
  reg store_io_1;
  wire store_io_1_D_IN, store_io_1_EN;

  // register store_size_0
  reg [1 : 0] store_size_0;
  wire [1 : 0] store_size_0_D_IN;
  wire store_size_0_EN;

  // register store_size_1
  reg [1 : 0] store_size_1;
  wire [1 : 0] store_size_1_D_IN;
  wire store_size_1_EN;

  // register store_valid_0
  reg store_valid_0;
  wire store_valid_0_D_IN, store_valid_0_EN;

  // register store_valid_0_1
  reg store_valid_0_1;
  wire store_valid_0_1_D_IN, store_valid_0_1_EN;

  // register store_valid_1
  reg store_valid_1;
  wire store_valid_1_D_IN, store_valid_1_EN;

  // register store_valid_1_1
  reg store_valid_1_1;
  wire store_valid_1_1_D_IN, store_valid_1_1_EN;

  // register tag_arr_0_rg_output_0
  reg [19 : 0] tag_arr_0_rg_output_0;
  wire [19 : 0] tag_arr_0_rg_output_0_D_IN;
  wire tag_arr_0_rg_output_0_EN;

  // register tag_arr_1_rg_output_0
  reg [19 : 0] tag_arr_1_rg_output_0;
  wire [19 : 0] tag_arr_1_rg_output_0_D_IN;
  wire tag_arr_1_rg_output_0_EN;

  // register tag_arr_2_rg_output_0
  reg [19 : 0] tag_arr_2_rg_output_0;
  wire [19 : 0] tag_arr_2_rg_output_0_D_IN;
  wire tag_arr_2_rg_output_0_EN;

  // register tag_arr_3_rg_output_0
  reg [19 : 0] tag_arr_3_rg_output_0;
  wire [19 : 0] tag_arr_3_rg_output_0_D_IN;
  wire tag_arr_3_rg_output_0_EN;

  // ports of submodule data_arr_0_ram_single_0
  reg [511 : 0] data_arr_0_ram_single_0_dina;
  reg [5 : 0] data_arr_0_ram_single_0_addra;
  wire [511 : 0] data_arr_0_ram_single_0_douta;
  wire data_arr_0_ram_single_0_ena, data_arr_0_ram_single_0_wea;

  // ports of submodule data_arr_1_ram_single_0
  reg [511 : 0] data_arr_1_ram_single_0_dina;
  reg [5 : 0] data_arr_1_ram_single_0_addra;
  wire [511 : 0] data_arr_1_ram_single_0_douta;
  wire data_arr_1_ram_single_0_ena, data_arr_1_ram_single_0_wea;

  // ports of submodule data_arr_2_ram_single_0
  reg [511 : 0] data_arr_2_ram_single_0_dina;
  reg [5 : 0] data_arr_2_ram_single_0_addra;
  wire [511 : 0] data_arr_2_ram_single_0_douta;
  wire data_arr_2_ram_single_0_ena, data_arr_2_ram_single_0_wea;

  // ports of submodule data_arr_3_ram_single_0
  reg [511 : 0] data_arr_3_ram_single_0_dina;
  reg [5 : 0] data_arr_3_ram_single_0_addra;
  wire [511 : 0] data_arr_3_ram_single_0_douta;
  wire data_arr_3_ram_single_0_ena, data_arr_3_ram_single_0_wea;

  // ports of submodule ff_core_request
  wire [140 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_fb_fillindex
  wire [2 : 0] ff_fb_fillindex_D_IN, ff_fb_fillindex_D_OUT;
  wire ff_fb_fillindex_CLR,
       ff_fb_fillindex_DEQ,
       ff_fb_fillindex_EMPTY_N,
       ff_fb_fillindex_ENQ,
       ff_fb_fillindex_FULL_N;

  // ports of submodule ff_nc_read_request
  wire [42 : 0] ff_nc_read_request_D_IN, ff_nc_read_request_D_OUT;
  wire ff_nc_read_request_CLR,
       ff_nc_read_request_DEQ,
       ff_nc_read_request_EMPTY_N,
       ff_nc_read_request_ENQ,
       ff_nc_read_request_FULL_N;

  // ports of submodule ff_nc_write_request
  wire [106 : 0] ff_nc_write_request_D_IN, ff_nc_write_request_D_OUT;
  wire ff_nc_write_request_CLR,
       ff_nc_write_request_DEQ,
       ff_nc_write_request_EMPTY_N,
       ff_nc_write_request_ENQ,
       ff_nc_write_request_FULL_N;

  // ports of submodule ff_read_mem_request
  wire [42 : 0] ff_read_mem_request_D_IN, ff_read_mem_request_D_OUT;
  wire ff_read_mem_request_CLR,
       ff_read_mem_request_DEQ,
       ff_read_mem_request_EMPTY_N,
       ff_read_mem_request_ENQ,
       ff_read_mem_request_FULL_N;

  // ports of submodule ff_write_mem_request
  wire [554 : 0] ff_write_mem_request_D_IN, ff_write_mem_request_D_OUT;
  wire ff_write_mem_request_CLR,
       ff_write_mem_request_DEQ,
       ff_write_mem_request_EMPTY_N,
       ff_write_mem_request_ENQ,
       ff_write_mem_request_FULL_N;

  // ports of submodule tag_arr_0_ram_single_0
  reg [5 : 0] tag_arr_0_ram_single_0_addra;
  wire [19 : 0] tag_arr_0_ram_single_0_dina, tag_arr_0_ram_single_0_douta;
  wire tag_arr_0_ram_single_0_ena, tag_arr_0_ram_single_0_wea;

  // ports of submodule tag_arr_1_ram_single_0
  reg [5 : 0] tag_arr_1_ram_single_0_addra;
  wire [19 : 0] tag_arr_1_ram_single_0_dina, tag_arr_1_ram_single_0_douta;
  wire tag_arr_1_ram_single_0_ena, tag_arr_1_ram_single_0_wea;

  // ports of submodule tag_arr_2_ram_single_0
  reg [5 : 0] tag_arr_2_ram_single_0_addra;
  wire [19 : 0] tag_arr_2_ram_single_0_dina, tag_arr_2_ram_single_0_douta;
  wire tag_arr_2_ram_single_0_ena, tag_arr_2_ram_single_0_wea;

  // ports of submodule tag_arr_3_ram_single_0
  reg [5 : 0] tag_arr_3_ram_single_0_addra;
  wire [19 : 0] tag_arr_3_ram_single_0_dina, tag_arr_3_ram_single_0_douta;
  wire tag_arr_3_ram_single_0_ena, tag_arr_3_ram_single_0_wea;

  // rule scheduling signals
  wire CAN_FIRE_RL_allocate_storebuffer,
       CAN_FIRE_RL_check_fb_for_corerequest,
       CAN_FIRE_RL_check_hit_in_storebuffer,
       CAN_FIRE_RL_data_arr_0_capture_output,
       CAN_FIRE_RL_data_arr_1_capture_output,
       CAN_FIRE_RL_data_arr_2_capture_output,
       CAN_FIRE_RL_data_arr_3_capture_output,
       CAN_FIRE_RL_deq_write_response,
       CAN_FIRE_RL_display_stuff,
       CAN_FIRE_RL_fence_operation,
       CAN_FIRE_RL_receive_memory_response,
       CAN_FIRE_RL_receive_nc_response,
       CAN_FIRE_RL_release_from_FB,
       CAN_FIRE_RL_replay_latest_request,
       CAN_FIRE_RL_request_to_memory,
       CAN_FIRE_RL_respond_to_core,
       CAN_FIRE_RL_rg_readdone__dreg_update,
       CAN_FIRE_RL_tag_arr_0_capture_output,
       CAN_FIRE_RL_tag_arr_1_capture_output,
       CAN_FIRE_RL_tag_arr_2_capture_output,
       CAN_FIRE_RL_tag_arr_3_capture_output,
       CAN_FIRE_RL_tag_match,
       CAN_FIRE_RL_update_fb_with_memory_response,
       CAN_FIRE_cache_enable,
       CAN_FIRE_core_req_put,
       CAN_FIRE_core_resp_get,
       CAN_FIRE_hold_req_get,
       CAN_FIRE_nc_read_req_get,
       CAN_FIRE_nc_read_resp_put,
       CAN_FIRE_nc_write_req_get,
       CAN_FIRE_pa_from_tlb_put,
       CAN_FIRE_perform_store,
       CAN_FIRE_ptw_resp_get,
       CAN_FIRE_read_mem_req_get,
       CAN_FIRE_read_mem_resp_put,
       CAN_FIRE_write_mem_req_deq,
       CAN_FIRE_write_mem_resp_put,
       WILL_FIRE_RL_allocate_storebuffer,
       WILL_FIRE_RL_check_fb_for_corerequest,
       WILL_FIRE_RL_check_hit_in_storebuffer,
       WILL_FIRE_RL_data_arr_0_capture_output,
       WILL_FIRE_RL_data_arr_1_capture_output,
       WILL_FIRE_RL_data_arr_2_capture_output,
       WILL_FIRE_RL_data_arr_3_capture_output,
       WILL_FIRE_RL_deq_write_response,
       WILL_FIRE_RL_display_stuff,
       WILL_FIRE_RL_fence_operation,
       WILL_FIRE_RL_receive_memory_response,
       WILL_FIRE_RL_receive_nc_response,
       WILL_FIRE_RL_release_from_FB,
       WILL_FIRE_RL_replay_latest_request,
       WILL_FIRE_RL_request_to_memory,
       WILL_FIRE_RL_respond_to_core,
       WILL_FIRE_RL_rg_readdone__dreg_update,
       WILL_FIRE_RL_tag_arr_0_capture_output,
       WILL_FIRE_RL_tag_arr_1_capture_output,
       WILL_FIRE_RL_tag_arr_2_capture_output,
       WILL_FIRE_RL_tag_arr_3_capture_output,
       WILL_FIRE_RL_tag_match,
       WILL_FIRE_RL_update_fb_with_memory_response,
       WILL_FIRE_cache_enable,
       WILL_FIRE_core_req_put,
       WILL_FIRE_core_resp_get,
       WILL_FIRE_hold_req_get,
       WILL_FIRE_nc_read_req_get,
       WILL_FIRE_nc_read_resp_put,
       WILL_FIRE_nc_write_req_get,
       WILL_FIRE_pa_from_tlb_put,
       WILL_FIRE_perform_store,
       WILL_FIRE_ptw_resp_get,
       WILL_FIRE_read_mem_req_get,
       WILL_FIRE_read_mem_resp_put,
       WILL_FIRE_write_mem_req_deq,
       WILL_FIRE_write_mem_resp_put;

  // inputs to muxes for submodule ports
  reg [511 : 0] MUX_data_arr_0_ram_single_0_request_3__VAL_2;
  wire [554 : 0] MUX_ff_write_mem_request_enq_1__VAL_1,
		 MUX_ff_write_mem_request_enq_1__VAL_2;
  wire [511 : 0] MUX_fb_dataline_0_write_1__VAL_1,
		 MUX_fb_dataline_0_write_1__VAL_2,
		 MUX_fb_dataline_0_write_1__VAL_3;
  wire [72 : 0] MUX_ff_core_response_rv_port0__write_1__VAL_1,
		MUX_ff_core_response_rv_port0__write_1__VAL_2;
  wire [40 : 0] MUX_ff_from_tlb_rv_port1__write_1__VAL_1;
  wire [7 : 0] MUX_fb_enables_0_write_1__VAL_4;
  wire [3 : 0] MUX_rg_dirty_0_write_1__VAL_1,
	       MUX_rg_dirty_0_write_1__VAL_2,
	       MUX_rg_valid_0_write_1__VAL_1,
	       MUX_rg_valid_0_write_1__VAL_2;
  wire [2 : 0] MUX_rg_fbmissallocate_write_1__VAL_1;
  wire [1 : 0] MUX_repl_v_count_0_write_1__VAL_2;
  wire MUX_data_arr_0_ram_single_0_request_1__SEL_1,
       MUX_data_arr_1_ram_single_0_request_1__SEL_1,
       MUX_data_arr_2_ram_single_0_request_1__SEL_1,
       MUX_data_arr_3_ram_single_0_request_1__SEL_1,
       MUX_fb_addr_4_write_1__SEL_1,
       MUX_fb_addr_4_write_1__SEL_2,
       MUX_fb_addr_5_write_1__SEL_1,
       MUX_fb_addr_5_write_1__SEL_2,
       MUX_fb_addr_6_write_1__SEL_1,
       MUX_fb_addr_6_write_1__SEL_2,
       MUX_fb_addr_7_write_1__SEL_1,
       MUX_fb_addr_7_write_1__SEL_2,
       MUX_fb_dataline_0_write_1__SEL_1,
       MUX_fb_dataline_0_write_1__SEL_3,
       MUX_fb_dataline_1_write_1__SEL_1,
       MUX_fb_dataline_1_write_1__SEL_3,
       MUX_fb_dataline_2_write_1__SEL_1,
       MUX_fb_dataline_2_write_1__SEL_3,
       MUX_fb_dataline_3_write_1__SEL_1,
       MUX_fb_dataline_3_write_1__SEL_3,
       MUX_fb_dataline_4_write_1__SEL_1,
       MUX_fb_dataline_4_write_1__SEL_3,
       MUX_fb_dataline_5_write_1__SEL_1,
       MUX_fb_dataline_5_write_1__SEL_3,
       MUX_fb_dataline_6_write_1__SEL_1,
       MUX_fb_dataline_6_write_1__SEL_3,
       MUX_fb_dataline_7_write_1__SEL_1,
       MUX_fb_dataline_7_write_1__SEL_3,
       MUX_fb_dirty_0_write_1__SEL_1,
       MUX_fb_dirty_0_write_1__VAL_3,
       MUX_fb_dirty_1_write_1__SEL_1,
       MUX_fb_dirty_2_write_1__SEL_1,
       MUX_fb_dirty_3_write_1__SEL_1,
       MUX_fb_dirty_4_write_1__SEL_1,
       MUX_fb_dirty_5_write_1__SEL_1,
       MUX_fb_dirty_6_write_1__SEL_1,
       MUX_fb_dirty_7_write_1__SEL_1,
       MUX_fb_enables_0_write_1__SEL_1,
       MUX_fb_enables_1_write_1__SEL_1,
       MUX_fb_enables_2_write_1__SEL_1,
       MUX_fb_enables_3_write_1__SEL_1,
       MUX_fb_valid_0_write_1__SEL_1,
       MUX_fb_valid_0_write_1__SEL_3,
       MUX_fb_valid_1_write_1__SEL_1,
       MUX_fb_valid_1_write_1__SEL_3,
       MUX_fb_valid_2_write_1__SEL_1,
       MUX_fb_valid_2_write_1__SEL_3,
       MUX_fb_valid_3_write_1__SEL_1,
       MUX_fb_valid_3_write_1__SEL_3,
       MUX_fb_valid_4_write_1__SEL_1,
       MUX_fb_valid_5_write_1__SEL_1,
       MUX_fb_valid_6_write_1__SEL_1,
       MUX_fb_valid_7_write_1__SEL_1,
       MUX_ff_core_response_rv_port0__write_1__SEL_1,
       MUX_ff_core_response_rv_port0__write_1__SEL_2,
       MUX_ff_write_mem_request_enq_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_2,
       MUX_rg_fbmissallocate_write_1__SEL_1,
       MUX_rg_fence_stall_write_1__SEL_1,
       MUX_rg_globaldirty_write_1__SEL_1,
       MUX_rg_miss_ongoing_write_1__SEL_1,
       MUX_rg_replaylatest_write_1__SEL_1,
       MUX_rg_valid_0_write_1__SEL_1,
       MUX_rg_valid_0_write_1__SEL_2,
       MUX_rg_valid_1_write_1__SEL_1,
       MUX_rg_valid_1_write_1__SEL_2,
       MUX_rg_valid_10_write_1__SEL_1,
       MUX_rg_valid_10_write_1__SEL_2,
       MUX_rg_valid_11_write_1__SEL_1,
       MUX_rg_valid_11_write_1__SEL_2,
       MUX_rg_valid_12_write_1__SEL_1,
       MUX_rg_valid_12_write_1__SEL_2,
       MUX_rg_valid_13_write_1__SEL_1,
       MUX_rg_valid_13_write_1__SEL_2,
       MUX_rg_valid_14_write_1__SEL_1,
       MUX_rg_valid_14_write_1__SEL_2,
       MUX_rg_valid_15_write_1__SEL_1,
       MUX_rg_valid_15_write_1__SEL_2,
       MUX_rg_valid_16_write_1__SEL_1,
       MUX_rg_valid_16_write_1__SEL_2,
       MUX_rg_valid_17_write_1__SEL_1,
       MUX_rg_valid_17_write_1__SEL_2,
       MUX_rg_valid_18_write_1__SEL_1,
       MUX_rg_valid_18_write_1__SEL_2,
       MUX_rg_valid_19_write_1__SEL_1,
       MUX_rg_valid_19_write_1__SEL_2,
       MUX_rg_valid_2_write_1__SEL_1,
       MUX_rg_valid_2_write_1__SEL_2,
       MUX_rg_valid_20_write_1__SEL_1,
       MUX_rg_valid_20_write_1__SEL_2,
       MUX_rg_valid_21_write_1__SEL_1,
       MUX_rg_valid_21_write_1__SEL_2,
       MUX_rg_valid_22_write_1__SEL_1,
       MUX_rg_valid_22_write_1__SEL_2,
       MUX_rg_valid_23_write_1__SEL_1,
       MUX_rg_valid_23_write_1__SEL_2,
       MUX_rg_valid_24_write_1__SEL_1,
       MUX_rg_valid_24_write_1__SEL_2,
       MUX_rg_valid_25_write_1__SEL_1,
       MUX_rg_valid_25_write_1__SEL_2,
       MUX_rg_valid_26_write_1__SEL_1,
       MUX_rg_valid_26_write_1__SEL_2,
       MUX_rg_valid_27_write_1__SEL_1,
       MUX_rg_valid_27_write_1__SEL_2,
       MUX_rg_valid_28_write_1__SEL_1,
       MUX_rg_valid_28_write_1__SEL_2,
       MUX_rg_valid_29_write_1__SEL_1,
       MUX_rg_valid_29_write_1__SEL_2,
       MUX_rg_valid_3_write_1__SEL_1,
       MUX_rg_valid_3_write_1__SEL_2,
       MUX_rg_valid_30_write_1__SEL_1,
       MUX_rg_valid_30_write_1__SEL_2,
       MUX_rg_valid_31_write_1__SEL_1,
       MUX_rg_valid_31_write_1__SEL_2,
       MUX_rg_valid_32_write_1__SEL_1,
       MUX_rg_valid_32_write_1__SEL_2,
       MUX_rg_valid_33_write_1__SEL_1,
       MUX_rg_valid_33_write_1__SEL_2,
       MUX_rg_valid_34_write_1__SEL_1,
       MUX_rg_valid_34_write_1__SEL_2,
       MUX_rg_valid_35_write_1__SEL_1,
       MUX_rg_valid_35_write_1__SEL_2,
       MUX_rg_valid_36_write_1__SEL_1,
       MUX_rg_valid_36_write_1__SEL_2,
       MUX_rg_valid_37_write_1__SEL_1,
       MUX_rg_valid_37_write_1__SEL_2,
       MUX_rg_valid_38_write_1__SEL_1,
       MUX_rg_valid_38_write_1__SEL_2,
       MUX_rg_valid_39_write_1__SEL_1,
       MUX_rg_valid_39_write_1__SEL_2,
       MUX_rg_valid_4_write_1__SEL_1,
       MUX_rg_valid_4_write_1__SEL_2,
       MUX_rg_valid_40_write_1__SEL_1,
       MUX_rg_valid_40_write_1__SEL_2,
       MUX_rg_valid_41_write_1__SEL_1,
       MUX_rg_valid_41_write_1__SEL_2,
       MUX_rg_valid_42_write_1__SEL_1,
       MUX_rg_valid_42_write_1__SEL_2,
       MUX_rg_valid_43_write_1__SEL_1,
       MUX_rg_valid_43_write_1__SEL_2,
       MUX_rg_valid_44_write_1__SEL_1,
       MUX_rg_valid_44_write_1__SEL_2,
       MUX_rg_valid_45_write_1__SEL_1,
       MUX_rg_valid_45_write_1__SEL_2,
       MUX_rg_valid_46_write_1__SEL_1,
       MUX_rg_valid_46_write_1__SEL_2,
       MUX_rg_valid_47_write_1__SEL_1,
       MUX_rg_valid_47_write_1__SEL_2,
       MUX_rg_valid_48_write_1__SEL_1,
       MUX_rg_valid_48_write_1__SEL_2,
       MUX_rg_valid_49_write_1__SEL_1,
       MUX_rg_valid_49_write_1__SEL_2,
       MUX_rg_valid_5_write_1__SEL_1,
       MUX_rg_valid_5_write_1__SEL_2,
       MUX_rg_valid_50_write_1__SEL_1,
       MUX_rg_valid_50_write_1__SEL_2,
       MUX_rg_valid_51_write_1__SEL_1,
       MUX_rg_valid_51_write_1__SEL_2,
       MUX_rg_valid_52_write_1__SEL_1,
       MUX_rg_valid_52_write_1__SEL_2,
       MUX_rg_valid_53_write_1__SEL_1,
       MUX_rg_valid_53_write_1__SEL_2,
       MUX_rg_valid_54_write_1__SEL_1,
       MUX_rg_valid_54_write_1__SEL_2,
       MUX_rg_valid_55_write_1__SEL_1,
       MUX_rg_valid_55_write_1__SEL_2,
       MUX_rg_valid_56_write_1__SEL_1,
       MUX_rg_valid_56_write_1__SEL_2,
       MUX_rg_valid_57_write_1__SEL_1,
       MUX_rg_valid_57_write_1__SEL_2,
       MUX_rg_valid_58_write_1__SEL_1,
       MUX_rg_valid_58_write_1__SEL_2,
       MUX_rg_valid_59_write_1__SEL_1,
       MUX_rg_valid_59_write_1__SEL_2,
       MUX_rg_valid_6_write_1__SEL_1,
       MUX_rg_valid_6_write_1__SEL_2,
       MUX_rg_valid_60_write_1__SEL_1,
       MUX_rg_valid_60_write_1__SEL_2,
       MUX_rg_valid_61_write_1__SEL_1,
       MUX_rg_valid_61_write_1__SEL_2,
       MUX_rg_valid_62_write_1__SEL_1,
       MUX_rg_valid_62_write_1__SEL_2,
       MUX_rg_valid_63_write_1__SEL_1,
       MUX_rg_valid_63_write_1__SEL_2,
       MUX_rg_valid_7_write_1__SEL_1,
       MUX_rg_valid_7_write_1__SEL_2,
       MUX_rg_valid_8_write_1__SEL_1,
       MUX_rg_valid_8_write_1__SEL_2,
       MUX_rg_valid_9_write_1__SEL_1,
       MUX_rg_valid_9_write_1__SEL_2,
       MUX_store_valid_0_1_write_1__SEL_1,
       MUX_store_valid_0_1_write_1__SEL_2,
       MUX_store_valid_1_1_write_1__SEL_1,
       MUX_store_valid_1_1_write_1__SEL_2,
       MUX_tag_arr_0_ram_single_0_request_1__SEL_1,
       MUX_tag_arr_1_ram_single_0_request_1__SEL_1,
       MUX_tag_arr_2_ram_single_0_request_1__SEL_1,
       MUX_tag_arr_3_ram_single_0_request_2__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d3008;
  reg TASK_testplusargs___d3009;
  reg TASK_testplusargs___d3010;
  reg [63 : 0] v__h398266;
  reg TASK_testplusargs___d13;
  reg TASK_testplusargs___d14;
  reg TASK_testplusargs___d15;
  reg [63 : 0] v__h23932;
  reg TASK_testplusargs___d55;
  reg TASK_testplusargs___d56;
  reg TASK_testplusargs___d57;
  reg [63 : 0] v__h26157;
  reg TASK_testplusargs___d70;
  reg TASK_testplusargs___d71;
  reg TASK_testplusargs___d72;
  reg [63 : 0] v__h26965;
  reg TASK_testplusargs___d2539;
  reg TASK_testplusargs___d2540;
  reg TASK_testplusargs___d2541;
  reg [63 : 0] v__h374915;
  reg TASK_testplusargs___d2551;
  reg TASK_testplusargs___d2552;
  reg TASK_testplusargs___d2553;
  reg [63 : 0] v__h375099;
  reg TASK_testplusargs___d2561;
  reg TASK_testplusargs___d2562;
  reg TASK_testplusargs___d2563;
  reg [63 : 0] v__h375389;
  reg TASK_testplusargs___d2996;
  reg TASK_testplusargs___d2997;
  reg TASK_testplusargs___d2998;
  reg [63 : 0] v__h396582;
  reg TASK_testplusargs___d248;
  reg TASK_testplusargs___d249;
  reg TASK_testplusargs___d250;
  reg [63 : 0] v__h30689;
  reg TASK_testplusargs___d1343;
  reg TASK_testplusargs___d1344;
  reg TASK_testplusargs___d1345;
  reg [63 : 0] v__h288916;
  reg TASK_testplusargs___d1349;
  reg TASK_testplusargs___d1350;
  reg TASK_testplusargs___d1351;
  reg [63 : 0] v__h289062;
  reg TASK_testplusargs___d1439;
  reg TASK_testplusargs___d1440;
  reg TASK_testplusargs___d1441;
  reg [63 : 0] v__h291788;
  reg TASK_testplusargs___d1455;
  reg TASK_testplusargs___d1456;
  reg TASK_testplusargs___d1457;
  reg [63 : 0] v__h291990;
  reg TASK_testplusargs___d1467;
  reg TASK_testplusargs___d1468;
  reg TASK_testplusargs___d1469;
  reg [63 : 0] v__h292174;
  reg TASK_testplusargs___d1647;
  reg TASK_testplusargs___d1648;
  reg TASK_testplusargs___d1649;
  reg [63 : 0] v__h294801;
  reg TASK_testplusargs___d1655;
  reg TASK_testplusargs___d1656;
  reg TASK_testplusargs___d1657;
  reg [63 : 0] v__h294993;
  reg TASK_testplusargs___d2060;
  reg TASK_testplusargs___d2061;
  reg TASK_testplusargs___d2062;
  reg [63 : 0] v__h307934;
  reg TASK_testplusargs___d2178;
  reg TASK_testplusargs___d2179;
  reg TASK_testplusargs___d2180;
  reg [63 : 0] v__h310104;
  reg TASK_testplusargs___d2185;
  reg TASK_testplusargs___d2186;
  reg TASK_testplusargs___d2187;
  reg [63 : 0] v__h310259;
  reg TASK_testplusargs___d2199;
  reg TASK_testplusargs___d2200;
  reg TASK_testplusargs___d2201;
  reg [63 : 0] v__h310702;
  reg TASK_testplusargs___d2208;
  reg TASK_testplusargs___d2209;
  reg TASK_testplusargs___d2210;
  reg [63 : 0] v__h310925;
  reg TASK_testplusargs___d1829;
  reg TASK_testplusargs___d1830;
  reg TASK_testplusargs___d1831;
  reg [63 : 0] v__h298843;
  reg TASK_testplusargs___d2714;
  reg TASK_testplusargs___d2715;
  reg TASK_testplusargs___d2716;
  reg [63 : 0] v__h378775;
  reg TASK_testplusargs___d2731;
  reg TASK_testplusargs___d2732;
  reg TASK_testplusargs___d2733;
  reg [63 : 0] v__h380697;
  reg TASK_testplusargs___d2980;
  reg TASK_testplusargs___d2981;
  reg TASK_testplusargs___d2982;
  reg [63 : 0] v__h395025;
  reg TASK_testplusargs___d3091;
  reg TASK_testplusargs___d3092;
  reg TASK_testplusargs___d3093;
  reg [63 : 0] v__h399469;
  reg TASK_testplusargs___d3109;
  reg TASK_testplusargs___d3110;
  reg TASK_testplusargs___d3111;
  reg [63 : 0] v__h399729;
  reg TASK_testplusargs___d3148;
  reg TASK_testplusargs___d3149;
  reg TASK_testplusargs___d3150;
  reg [63 : 0] v__h401224;
  reg TASK_testplusargs___d3164;
  reg TASK_testplusargs___d3165;
  reg TASK_testplusargs___d3166;
  reg [63 : 0] v__h401393;
  reg TASK_testplusargs___d3204;
  reg TASK_testplusargs___d3205;
  reg TASK_testplusargs___d3206;
  reg [63 : 0] v__h409996;
  reg __duses1897;
  reg __duses2726;
  reg SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d253;
  reg ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2204;
  reg ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2213;
  reg SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2719;
  reg SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3114;
  reg wr_fbbeingfilled_whas__121_AND_wr_fbbeingfille_ETC___d3153;
  reg NOT_wr_fbbeingfilled_whas__121_157_OR_NOT_wr_f_ETC___d3169;
  reg TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1452;
  reg TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1454;
  reg TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1462;
  reg TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1463;
  reg TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1465;
  reg TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1466;
  reg TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1653;
  reg TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1654;
  reg wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2183;
  reg wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2190;
  reg TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2545;
  reg TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2547;
  reg TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2548;
  reg TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2550;
  reg TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2569;
  reg TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2571;
  reg TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2573;
  reg TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2575;
  reg TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3015;
  reg TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3017;
  reg TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3023;
  reg TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3025;
  reg NOT_SEL_ARR_store_epoch_0_099_store_epoch_1_10_ETC___d3209;
  // synopsys translate_on

  // remaining internal signals
  reg [511 : 0] v__h380270, y__h311709, y__h402605;
  reg [63 : 0] CASE_rg_storetail_0_store_data_0_1_store_data__ETC__q3,
	       CASE_x95611_0_store_data_0_1_store_data_1_DONT_ETC__q2,
	       IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805,
	       SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098,
	       temp__h295517,
	       temp__h295735,
	       temp__h399397,
	       word__h307867,
	       x__h296016,
	       y_avValue_snd__h299337;
  reg [31 : 0] SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324,
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242,
	       addr__h399391,
	       x__h295470,
	       x__h295720;
  reg [19 : 0] SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261,
	       v__h379929;
  reg [7 : 0] SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240,
	      x__h375884;
  reg [3 : 0] bs__h28594,
	      bs__h300273,
	      dirty__h375918,
	      valid__h375917,
	      w__h301646,
	      x__h277884;
  reg [2 : 0] fbindex__h399390;
  reg [1 : 0] SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677,
	      x__h295609,
	      x__h295787,
	      x__h400003;
  reg CASE_rg_storehead_0_store_valid_0_1_1_store_va_ETC__q4,
      SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707,
      SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026,
      SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884,
      SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600,
      SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107,
      epoch__h399395;
  wire [511 : 0] IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1420,
		 IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1421,
		 IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1422,
		 IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1605,
		 IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1606,
		 IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1607,
		 IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1608,
		 IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1609,
		 IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1610,
		 SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1041,
		 SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d781,
		 _theResult_____1__h311600,
		 _theResult_____6_fst__h292529,
		 final_data__h311602,
		 final_line___1__h28112,
		 final_mask__h311601,
		 hitline__h290167,
		 mask__h399398,
		 mask__h399401,
		 new_value__h400137,
		 x3__h277175,
		 x__h291577,
		 x__h293784,
		 x__h311706,
		 x__h311708,
		 x__h373748,
		 x__h401597,
		 x__h402604,
		 x__read__h23414,
		 x_wget__h19161,
		 x_wget__h23332,
		 x_wget__h23403,
		 y__h311707,
		 y__h373749,
		 y__h373751,
		 y__h373757,
		 y__h401598;
  wire [63 : 0] IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806,
		_theResult_____1__h295434,
		_theResult_____4__h308265,
		_theResult_____6__h295433,
		data1__h295435,
		data2__h295436,
		loaded__h296825,
		op1___1__h296885,
		op1__h296828,
		op2___1__h296886,
		op2__h296827,
		storemask2___1__h295737,
		temp__h295518,
		temp__h295736,
		updated_word__h299246,
		updated_word__h299247,
		updated_word__h307700,
		updated_word__h307701,
		v__h298924,
		we__h311764,
		we__h311793,
		we__h311822,
		we__h311851,
		we__h311880,
		we__h311909,
		we__h311938,
		we__h311967,
		word___1__h307702,
		word__h299361,
		x__h307714,
		x__h307810,
		x__read__h19030,
		x__read__h21625,
		x_wget__h23616,
		x_wget__h23687,
		y__h295749,
		y__h307715,
		y__h307716,
		y_avValue_snd__h299325,
		y_avValue_snd__h299342,
		y_avValue_snd__h299356;
  wire [31 : 0] ff_core_requestD_OUT_BITS_37_TO_6__q1,
		final_address__h28113,
		final_address__h380608,
		loaded96825_BITS_31_TO_0__q8,
		word99361_BITS_31_TO_0__q7,
		x_address__h309373;
  wire [15 : 0] word99361_BITS_15_TO_0__q6;
  wire [8 : 0] block_offset__h289252, block_offset__h399400;
  wire [7 : 0] IF_fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff__ETC___d1543,
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1547,
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1551,
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1555,
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1559,
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1563,
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1567,
	       _theResult_____6__h311237,
	       _theResult_____6_snd_snd_fst__h293294,
	       _theResult_____6_snd_snd_fst__h293311,
	       _theResult_____6_snd_snd_fst__h293328,
	       _theResult_____6_snd_snd_fst__h293345,
	       _theResult_____6_snd_snd_fst__h293362,
	       _theResult_____6_snd_snd_fst__h293379,
	       _theResult_____6_snd_snd_fst__h293396,
	       fbhit__h292477,
	       temp__h311366,
	       word99361_BITS_7_TO_0__q5;
  wire [6 : 0] index__h27062, next_set__h27061, v__h28117, v__h28131;
  wire [5 : 0] _theResult_____5_cause__h308247,
	       loadoffset__h298906,
	       shiftamt1__h295425,
	       shiftamt2__h295734,
	       v_cause__h308302;
  wire [3 : 0] IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1399,
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1403,
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1407,
	       _theResult_____1_fst__h290574,
	       _theResult_____1_fst__h290700,
	       _theResult_____1_fst__h290826,
	       hit__h290166,
	       x__h293919,
	       x__h295094,
	       x__h295106,
	       x__h295118,
	       x__h295130,
	       x__h295142,
	       x__h295154,
	       x__h295166,
	       x__h301648,
	       x__h381594,
	       y__h295095,
	       y__h295107,
	       y__h295119,
	       y__h295131,
	       y__h295143,
	       y__h295155,
	       y__h295167,
	       y__h301664,
	       y__h384884;
  wire [2 : 0] IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2123,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2136,
	       _theResult_____1_fst__h308810,
	       _theResult_____1_snd__h308811,
	       _theResult_____2__h308713,
	       fbindex__h295994,
	       result__h308828,
	       temp1__h308711,
	       x__h28162,
	       x__h290192,
	       x__h292275,
	       x__h292287,
	       x__h292299,
	       x__read__h21696,
	       y__h292276,
	       y__h292288,
	       y__h292300;
  wire [1 : 0] IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730,
	       IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734,
	       IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749,
	       i__h300274,
	       v__h375911,
	       x__h308746,
	       x__h308758,
	       x__h309046,
	       x__h309058,
	       y__h308747,
	       y__h308759,
	       y__h309047,
	       y__h309059;
  wire IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092,
       IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2108,
       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2723,
       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2725,
       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2727,
       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2729,
       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1530,
       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1590,
       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1640,
       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1532,
       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1592,
       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1641,
       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1534,
       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1594,
       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1642,
       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1536,
       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1596,
       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1643,
       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1538,
       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1598,
       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1644,
       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1540,
       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1600,
       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1645,
       IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1542,
       IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1602,
       IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1788,
       IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1793,
       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1742,
       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751,
       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1848,
       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d2162,
       NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2133,
       NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2146,
       NOT_0_CONCAT_IF_SEL_ARR_rg_valid_0_79_rg_valid_ETC___d1481,
       NOT_0_CONCAT_IF_fb_addr_7_read__322_BITS_31_TO_ETC___d1677,
       NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132,
       NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162,
       NOT_SEL_ARR_store_valid_0_1_1_store_valid_1_1__ETC___d3216,
       NOT_fb_valid_1_0_5_AND_NOT_fb_valid_2_1_6_AND__ETC___d47,
       NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377,
       NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374,
       NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588,
       NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d1380,
       NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d3029,
       SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914,
       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586,
       SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1042,
       SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d263,
       SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d522,
       SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d782,
       SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694,
       SEL_ARR_store_addr_0_680_store_addr_1_681_682__ETC___d1687,
       SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103,
       SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130,
       _dfoo1,
       _dfoo11,
       _dfoo13,
       _dfoo15,
       _dfoo17,
       _dfoo21,
       _dfoo25,
       _dfoo29,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       _dfoo9,
       dirty_and_valid__h27063,
       fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524,
       fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527,
       fb_enables_1_read__521_BIT_ff_core_request_fir_ETC___d1522,
       fb_enables_2_read__516_BIT_ff_core_request_fir_ETC___d1517,
       fb_enables_3_read__511_BIT_ff_core_request_fir_ETC___d1512,
       fb_enables_4_read__506_BIT_ff_core_request_fir_ETC___d1507,
       fb_enables_5_read__501_BIT_ff_core_request_fir_ETC___d1502,
       fb_enables_6_read__496_BIT_ff_core_request_fir_ETC___d1497,
       fb_enables_7_read__490_BIT_ff_core_request_fir_ETC___d1492,
       fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2595,
       fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2598,
       fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2605,
       fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2910,
       fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32,
       fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225,
       fb_valid_4_3_OR_fb_valid_5_4_OR_fb_valid_6_5_O_ETC___d2222,
       ff_core_request_first__4_BIT_76_5_AND_rg_fence_ETC___d91,
       ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164,
       ff_from_tlb_rv_port1__read__360_BIT_40_361_AND_ETC___d2153,
       x__h295611,
       x__h378533,
       y__h378534;

  // action method core_req_put
  assign RDY_core_req_put =
	     NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d3029 &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_core_req_put =
	     NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d3029 &&
	     ff_core_request_FULL_N ;
  assign WILL_FIRE_core_req_put = EN_core_req_put ;

  // actionvalue method core_resp_get
  assign core_resp_get = ff_core_response_rv_port1__read[71:0] ;
  assign RDY_core_resp_get = CAN_FIRE_core_resp_get ;
  assign CAN_FIRE_core_resp_get = ff_core_response_rv_port1__read[72] ;
  assign WILL_FIRE_core_resp_get = EN_core_resp_get ;

  // actionvalue method ptw_resp_get
  assign ptw_resp_get = ff_ptw_response_rv_port1__read[71:0] ;
  assign RDY_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign CAN_FIRE_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign WILL_FIRE_ptw_resp_get = EN_ptw_resp_get ;

  // actionvalue method read_mem_req_get
  assign read_mem_req_get = ff_read_mem_request_D_OUT ;
  assign RDY_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign CAN_FIRE_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign WILL_FIRE_read_mem_req_get = EN_read_mem_req_get ;

  // action method read_mem_resp_put
  assign RDY_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign CAN_FIRE_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign WILL_FIRE_read_mem_resp_put = EN_read_mem_resp_put ;

  // actionvalue method nc_read_req_get
  assign nc_read_req_get = ff_nc_read_request_D_OUT ;
  assign RDY_nc_read_req_get = ff_nc_read_request_EMPTY_N ;
  assign CAN_FIRE_nc_read_req_get = ff_nc_read_request_EMPTY_N ;
  assign WILL_FIRE_nc_read_req_get = EN_nc_read_req_get ;

  // action method nc_read_resp_put
  assign RDY_nc_read_resp_put = !ff_nc_read_response_rv[66] ;
  assign CAN_FIRE_nc_read_resp_put = !ff_nc_read_response_rv[66] ;
  assign WILL_FIRE_nc_read_resp_put = EN_nc_read_resp_put ;

  // action method pa_from_tlb_put
  assign RDY_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign CAN_FIRE_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign WILL_FIRE_pa_from_tlb_put = EN_pa_from_tlb_put ;

  // value method write_mem_req_rd
  assign write_mem_req_rd = ff_write_mem_request_D_OUT ;
  assign RDY_write_mem_req_rd = ff_write_mem_request_EMPTY_N ;

  // action method write_mem_req_deq
  assign RDY_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign CAN_FIRE_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign WILL_FIRE_write_mem_req_deq = EN_write_mem_req_deq ;

  // action method write_mem_resp_put
  assign RDY_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign CAN_FIRE_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign WILL_FIRE_write_mem_resp_put = EN_write_mem_resp_put ;

  // actionvalue method nc_write_req_get
  assign nc_write_req_get = ff_nc_write_request_D_OUT ;
  assign RDY_nc_write_req_get = ff_nc_write_request_EMPTY_N ;
  assign CAN_FIRE_nc_write_req_get = ff_nc_write_request_EMPTY_N ;
  assign WILL_FIRE_nc_write_req_get = EN_nc_write_req_get ;

  // value method perf_counters
  assign perf_counters =
	     { wr_total_read_access_whas,
	       wr_total_write_access_whas,
	       wr_total_atomic_access_whas,
	       wr_total_io_reads_whas,
	       wr_total_io_writes_whas,
	       wr_total_read_miss_whas,
	       wr_total_write_miss_whas,
	       wr_total_atomic_miss_whas,
	       wr_total_readfb_hits_whas,
	       wr_total_writefb_hits_whas,
	       wr_total_atomicfb_hits_whas,
	       WILL_FIRE_RL_release_from_FB,
	       MUX_ff_write_mem_request_enq_1__SEL_2 } ;
  assign RDY_perf_counters = 1'd1 ;

  // action method cache_enable
  assign RDY_cache_enable = 1'd1 ;
  assign CAN_FIRE_cache_enable = 1'd1 ;
  assign WILL_FIRE_cache_enable = EN_cache_enable ;

  // action method perform_store
  assign RDY_perform_store = ff_nc_write_request_FULL_N ;
  assign CAN_FIRE_perform_store = ff_nc_write_request_FULL_N ;
  assign WILL_FIRE_perform_store = EN_perform_store ;

  // value method cacheable_store
  assign cacheable_store =
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign RDY_cacheable_store = 1'd1 ;

  // value method cache_available
  assign cache_available =
	     ff_core_request_FULL_N && !ff_core_response_rv[72] &&
	     !rg_replaylatest &&
	     !rg_fence_stall &&
	     (!fb_valid_0 ||
	      NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377) &&
	     (!store_valid_0_1 || !store_valid_1_1) ;
  assign RDY_cache_available = 1'd1 ;

  // value method storebuffer_empty
  assign storebuffer_empty = !store_valid_0_1 && !store_valid_1_1 ;
  assign RDY_storebuffer_empty = 1'd1 ;

  // actionvalue method hold_req_get
  assign hold_req_get = ff_hold_request_rv_port1__read[140:0] ;
  assign RDY_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign CAN_FIRE_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign WILL_FIRE_hold_req_get = EN_hold_req_get ;

  // submodule data_arr_0_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd512),
	     .MEMSIZE(32'd64)) data_arr_0_ram_single_0(.clka(CLK),
						       .addra(data_arr_0_ram_single_0_addra),
						       .dina(data_arr_0_ram_single_0_dina),
						       .wea(data_arr_0_ram_single_0_wea),
						       .ena(data_arr_0_ram_single_0_ena),
						       .douta(data_arr_0_ram_single_0_douta));

  // submodule data_arr_1_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd512),
	     .MEMSIZE(32'd64)) data_arr_1_ram_single_0(.clka(CLK),
						       .addra(data_arr_1_ram_single_0_addra),
						       .dina(data_arr_1_ram_single_0_dina),
						       .wea(data_arr_1_ram_single_0_wea),
						       .ena(data_arr_1_ram_single_0_ena),
						       .douta(data_arr_1_ram_single_0_douta));

  // submodule data_arr_2_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd512),
	     .MEMSIZE(32'd64)) data_arr_2_ram_single_0(.clka(CLK),
						       .addra(data_arr_2_ram_single_0_addra),
						       .dina(data_arr_2_ram_single_0_dina),
						       .wea(data_arr_2_ram_single_0_wea),
						       .ena(data_arr_2_ram_single_0_ena),
						       .douta(data_arr_2_ram_single_0_douta));

  // submodule data_arr_3_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd512),
	     .MEMSIZE(32'd64)) data_arr_3_ram_single_0(.clka(CLK),
						       .addra(data_arr_3_ram_single_0_addra),
						       .dina(data_arr_3_ram_single_0_dina),
						       .wea(data_arr_3_ram_single_0_wea),
						       .ena(data_arr_3_ram_single_0_ena),
						       .douta(data_arr_3_ram_single_0_douta));

  // submodule ff_core_request
  FIFO2 #(.width(32'd141), .guarded(32'd1)) ff_core_request(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_core_request_D_IN),
							    .ENQ(ff_core_request_ENQ),
							    .DEQ(ff_core_request_DEQ),
							    .CLR(ff_core_request_CLR),
							    .D_OUT(ff_core_request_D_OUT),
							    .FULL_N(ff_core_request_FULL_N),
							    .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_fb_fillindex
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ff_fb_fillindex(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_fb_fillindex_D_IN),
							  .ENQ(ff_fb_fillindex_ENQ),
							  .DEQ(ff_fb_fillindex_DEQ),
							  .CLR(ff_fb_fillindex_CLR),
							  .D_OUT(ff_fb_fillindex_D_OUT),
							  .FULL_N(ff_fb_fillindex_FULL_N),
							  .EMPTY_N(ff_fb_fillindex_EMPTY_N));

  // submodule ff_nc_read_request
  FIFO2 #(.width(32'd43), .guarded(32'd1)) ff_nc_read_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_nc_read_request_D_IN),
							      .ENQ(ff_nc_read_request_ENQ),
							      .DEQ(ff_nc_read_request_DEQ),
							      .CLR(ff_nc_read_request_CLR),
							      .D_OUT(ff_nc_read_request_D_OUT),
							      .FULL_N(ff_nc_read_request_FULL_N),
							      .EMPTY_N(ff_nc_read_request_EMPTY_N));

  // submodule ff_nc_write_request
  FIFO2 #(.width(32'd107), .guarded(32'd1)) ff_nc_write_request(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ff_nc_write_request_D_IN),
								.ENQ(ff_nc_write_request_ENQ),
								.DEQ(ff_nc_write_request_DEQ),
								.CLR(ff_nc_write_request_CLR),
								.D_OUT(ff_nc_write_request_D_OUT),
								.FULL_N(ff_nc_write_request_FULL_N),
								.EMPTY_N(ff_nc_write_request_EMPTY_N));

  // submodule ff_read_mem_request
  FIFO2 #(.width(32'd43), .guarded(32'd1)) ff_read_mem_request(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ff_read_mem_request_D_IN),
							       .ENQ(ff_read_mem_request_ENQ),
							       .DEQ(ff_read_mem_request_DEQ),
							       .CLR(ff_read_mem_request_CLR),
							       .D_OUT(ff_read_mem_request_D_OUT),
							       .FULL_N(ff_read_mem_request_FULL_N),
							       .EMPTY_N(ff_read_mem_request_EMPTY_N));

  // submodule ff_write_mem_request
  FIFO1 #(.width(32'd555), .guarded(32'd1)) ff_write_mem_request(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ff_write_mem_request_D_IN),
								 .ENQ(ff_write_mem_request_ENQ),
								 .DEQ(ff_write_mem_request_DEQ),
								 .CLR(ff_write_mem_request_CLR),
								 .D_OUT(ff_write_mem_request_D_OUT),
								 .FULL_N(ff_write_mem_request_FULL_N),
								 .EMPTY_N(ff_write_mem_request_EMPTY_N));

  // submodule tag_arr_0_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) tag_arr_0_ram_single_0(.clka(CLK),
						      .addra(tag_arr_0_ram_single_0_addra),
						      .dina(tag_arr_0_ram_single_0_dina),
						      .wea(tag_arr_0_ram_single_0_wea),
						      .ena(tag_arr_0_ram_single_0_ena),
						      .douta(tag_arr_0_ram_single_0_douta));

  // submodule tag_arr_1_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) tag_arr_1_ram_single_0(.clka(CLK),
						      .addra(tag_arr_1_ram_single_0_addra),
						      .dina(tag_arr_1_ram_single_0_dina),
						      .wea(tag_arr_1_ram_single_0_wea),
						      .ena(tag_arr_1_ram_single_0_ena),
						      .douta(tag_arr_1_ram_single_0_douta));

  // submodule tag_arr_2_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) tag_arr_2_ram_single_0(.clka(CLK),
						      .addra(tag_arr_2_ram_single_0_addra),
						      .dina(tag_arr_2_ram_single_0_dina),
						      .wea(tag_arr_2_ram_single_0_wea),
						      .ena(tag_arr_2_ram_single_0_ena),
						      .douta(tag_arr_2_ram_single_0_douta));

  // submodule tag_arr_3_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) tag_arr_3_ram_single_0(.clka(CLK),
						      .addra(tag_arr_3_ram_single_0_addra),
						      .dina(tag_arr_3_ram_single_0_dina),
						      .wea(tag_arr_3_ram_single_0_wea),
						      .ena(tag_arr_3_ram_single_0_ena),
						      .douta(tag_arr_3_ram_single_0_douta));

  // rule RL_display_stuff
  assign CAN_FIRE_RL_display_stuff = EN_cache_enable ;
  assign WILL_FIRE_RL_display_stuff = EN_cache_enable ;

  // rule RL_receive_memory_response
  assign CAN_FIRE_RL_receive_memory_response =
	     ff_core_request_EMPTY_N && rg_fence_pending &&
	     ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_receive_memory_response =
	     CAN_FIRE_RL_receive_memory_response ;

  // rule RL_deq_write_response
  assign CAN_FIRE_RL_deq_write_response =
	     ff_write_mem_response_rv_port1__read[1] ;
  assign WILL_FIRE_RL_deq_write_response = CAN_FIRE_RL_deq_write_response ;

  // rule RL_check_hit_in_storebuffer
  assign CAN_FIRE_RL_check_hit_in_storebuffer =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     !ff_core_response_rv[72] &&
	     !ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_check_hit_in_storebuffer =
	     CAN_FIRE_RL_check_hit_in_storebuffer ;

  // rule RL_update_fb_with_memory_response
  assign CAN_FIRE_RL_update_fb_with_memory_response =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_fb_fillindex_EMPTY_N &&
	     (fb_valid_0 ||
	      fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225) ;
  assign WILL_FIRE_RL_update_fb_with_memory_response =
	     CAN_FIRE_RL_update_fb_with_memory_response ;

  // rule RL_receive_nc_response
  assign CAN_FIRE_RL_receive_nc_response =
	     ff_nc_read_response_rv_port1__read[66] ;
  assign WILL_FIRE_RL_receive_nc_response = CAN_FIRE_RL_receive_nc_response ;

  // rule RL_replay_latest_request
  assign CAN_FIRE_RL_replay_latest_request = rg_replaylatest ;
  assign WILL_FIRE_RL_replay_latest_request = rg_replaylatest ;

  // rule RL_data_arr_0_capture_output
  assign CAN_FIRE_RL_data_arr_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_data_arr_0_capture_output = 1'd1 ;

  // rule RL_tag_arr_0_capture_output
  assign CAN_FIRE_RL_tag_arr_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_tag_arr_0_capture_output = 1'd1 ;

  // rule RL_data_arr_1_capture_output
  assign CAN_FIRE_RL_data_arr_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_data_arr_1_capture_output = 1'd1 ;

  // rule RL_tag_arr_1_capture_output
  assign CAN_FIRE_RL_tag_arr_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_tag_arr_1_capture_output = 1'd1 ;

  // rule RL_data_arr_2_capture_output
  assign CAN_FIRE_RL_data_arr_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_data_arr_2_capture_output = 1'd1 ;

  // rule RL_tag_arr_2_capture_output
  assign CAN_FIRE_RL_tag_arr_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_tag_arr_2_capture_output = 1'd1 ;

  // rule RL_data_arr_3_capture_output
  assign CAN_FIRE_RL_data_arr_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_data_arr_3_capture_output = 1'd1 ;

  // rule RL_tag_arr_3_capture_output
  assign CAN_FIRE_RL_tag_arr_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_tag_arr_3_capture_output = 1'd1 ;

  // rule RL_fence_operation
  assign CAN_FIRE_RL_fence_operation =
	     ff_core_request_EMPTY_N && ff_write_mem_request_FULL_N &&
	     !ff_core_response_rv[72] &&
	     ff_core_request_first__4_BIT_76_5_AND_rg_fence_ETC___d91 &&
	     !store_valid_0_1 &&
	     !store_valid_1_1 &&
	     !rg_fence_pending ;
  assign WILL_FIRE_RL_fence_operation = CAN_FIRE_RL_fence_operation ;

  // rule RL_tag_match
  assign CAN_FIRE_RL_tag_match =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_cache_enable &&
	     NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d1380 &&
	     (!store_valid_0_1 || !store_valid_1_1) ;
  assign WILL_FIRE_RL_tag_match = CAN_FIRE_RL_tag_match ;

  // rule RL_check_fb_for_corerequest
  assign CAN_FIRE_RL_check_fb_for_corerequest =
	     ff_from_tlb_rv_port1__read[40] && EN_cache_enable &&
	     ff_core_request_EMPTY_N &&
	     !ff_core_response_rv[72] &&
	     !ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_check_fb_for_corerequest =
	     CAN_FIRE_RL_check_fb_for_corerequest ;

  // rule RL_respond_to_core
  assign CAN_FIRE_RL_respond_to_core =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     !ff_core_response_rv[72] &&
	     !ff_ptw_response_rv[72] &&
	     !ff_hold_request_rv[141] &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1848 ;
  assign WILL_FIRE_RL_respond_to_core = CAN_FIRE_RL_respond_to_core ;

  // rule RL_request_to_memory
  assign CAN_FIRE_RL_request_to_memory =
	     EN_cache_enable && ff_core_request_EMPTY_N &&
	     ff_from_tlb_rv_port1__read__360_BIT_40_361_AND_ETC___d2153 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d2162 ;
  assign WILL_FIRE_RL_request_to_memory = CAN_FIRE_RL_request_to_memory ;

  // rule RL_allocate_storebuffer
  assign CAN_FIRE_RL_allocate_storebuffer =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     !ff_core_request_D_OUT[76] &&
	     !wr_trap_from_tlb_whas ;
  assign WILL_FIRE_RL_allocate_storebuffer =
	     CAN_FIRE_RL_allocate_storebuffer ;

  // rule RL_release_from_FB
  assign CAN_FIRE_RL_release_from_FB =
	     ff_write_mem_request_FULL_N &&
	     fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2605 ;
  assign WILL_FIRE_RL_release_from_FB =
	     CAN_FIRE_RL_release_from_FB &&
	     !WILL_FIRE_RL_allocate_storebuffer &&
	     !EN_core_req_put ;

  // rule RL_rg_readdone__dreg_update
  assign CAN_FIRE_RL_rg_readdone__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_readdone__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_data_arr_0_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo29 ;
  assign MUX_data_arr_1_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo25 ;
  assign MUX_data_arr_2_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo21 ;
  assign MUX_data_arr_3_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo17 ;
  assign MUX_fb_addr_4_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_addr_4_write_1__SEL_2 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_addr_5_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_addr_5_write_1__SEL_2 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_addr_6_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_addr_6_write_1__SEL_2 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_addr_7_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_addr_7_write_1__SEL_2 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_dataline_0_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd0 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_0_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd0 ;
  assign MUX_fb_dataline_1_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd1 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_1_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd1 ;
  assign MUX_fb_dataline_2_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd2 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_2_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd2 ;
  assign MUX_fb_dataline_3_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd3 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_3_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd3 ;
  assign MUX_fb_dataline_4_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd4 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_4_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd4 ;
  assign MUX_fb_dataline_5_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd5 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_5_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd5 ;
  assign MUX_fb_dataline_6_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd6 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_6_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd6 ;
  assign MUX_fb_dataline_7_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd7 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;
  assign MUX_fb_dataline_7_write_1__SEL_3 =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd7 ;
  assign MUX_fb_dirty_0_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd0 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_1_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd1 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_2_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd2 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_3_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd3 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_4_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd4 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_5_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd5 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_6_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd6 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_dirty_7_write_1__SEL_1 =
	     EN_perform_store && fbindex__h399390 == 3'd7 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign MUX_fb_enables_0_write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_enables_1_write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_enables_2_write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_enables_3_write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign MUX_fb_valid_0_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo15 ;
  assign MUX_fb_valid_0_write_1__SEL_3 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_valid_1_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo13 ;
  assign MUX_fb_valid_1_write_1__SEL_3 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_valid_2_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo11 ;
  assign MUX_fb_valid_2_write_1__SEL_3 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_valid_3_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo9 ;
  assign MUX_fb_valid_3_write_1__SEL_3 =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_fb_valid_4_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo7 ;
  assign MUX_fb_valid_5_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo5 ;
  assign MUX_fb_valid_6_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo3 ;
  assign MUX_fb_valid_7_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo1 ;
  assign MUX_ff_core_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory &&
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign MUX_ff_core_response_rv_port0__write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     _port0__write_RL_respond_to_core_EN_ff_core_response_rv_wget ;
  assign MUX_ff_write_mem_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_fence_operation && !rg_fenceinit &&
	     rg_globaldirty &&
	     dirty_and_valid__h27063 ;
  assign MUX_ff_write_mem_request_enq_1__SEL_2 =
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     rg_readdone ;
  assign MUX_rg_fbmissallocate_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_fence_stall_write_1__SEL_1 =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ;
  assign MUX_rg_globaldirty_write_1__SEL_1 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0 ||
	      IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	      2'd0) ;
  assign MUX_rg_miss_ongoing_write_1__SEL_1 =
	     WILL_FIRE_RL_request_to_memory &&
	     (cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	      ff_core_request_D_OUT[74:73] == 2'd0 ||
	      ff_core_request_D_OUT[74:73] == 2'd2) ;
  assign MUX_rg_replaylatest_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_replaylatest_wget ;
  assign MUX_rg_valid_0_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_0_wget ;
  assign MUX_rg_valid_0_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_1_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_1_wget ;
  assign MUX_rg_valid_1_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_10_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_10_wget ;
  assign MUX_rg_valid_10_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd10 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_11_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_11_wget ;
  assign MUX_rg_valid_11_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd11 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_12_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_12_wget ;
  assign MUX_rg_valid_12_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd12 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_13_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_13_wget ;
  assign MUX_rg_valid_13_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd13 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_14_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_14_wget ;
  assign MUX_rg_valid_14_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd14 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_15_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_15_wget ;
  assign MUX_rg_valid_15_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd15 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_16_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_16_wget ;
  assign MUX_rg_valid_16_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd16 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_17_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_17_wget ;
  assign MUX_rg_valid_17_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd17 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_18_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_18_wget ;
  assign MUX_rg_valid_18_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd18 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_19_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_19_wget ;
  assign MUX_rg_valid_19_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd19 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_2_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_2_wget ;
  assign MUX_rg_valid_2_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_20_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_20_wget ;
  assign MUX_rg_valid_20_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd20 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_21_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_21_wget ;
  assign MUX_rg_valid_21_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd21 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_22_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_22_wget ;
  assign MUX_rg_valid_22_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd22 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_23_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_23_wget ;
  assign MUX_rg_valid_23_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd23 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_24_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_24_wget ;
  assign MUX_rg_valid_24_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd24 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_25_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_25_wget ;
  assign MUX_rg_valid_25_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd25 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_26_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_26_wget ;
  assign MUX_rg_valid_26_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd26 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_27_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_27_wget ;
  assign MUX_rg_valid_27_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd27 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_28_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_28_wget ;
  assign MUX_rg_valid_28_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd28 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_29_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_29_wget ;
  assign MUX_rg_valid_29_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd29 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_3_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_3_wget ;
  assign MUX_rg_valid_3_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_30_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_30_wget ;
  assign MUX_rg_valid_30_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd30 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_31_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_31_wget ;
  assign MUX_rg_valid_31_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd31 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_32_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_32_wget ;
  assign MUX_rg_valid_32_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd32 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_33_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_33_wget ;
  assign MUX_rg_valid_33_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd33 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_34_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_34_wget ;
  assign MUX_rg_valid_34_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd34 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_35_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_35_wget ;
  assign MUX_rg_valid_35_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd35 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_36_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_36_wget ;
  assign MUX_rg_valid_36_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd36 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_37_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_37_wget ;
  assign MUX_rg_valid_37_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd37 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_38_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_38_wget ;
  assign MUX_rg_valid_38_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd38 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_39_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_39_wget ;
  assign MUX_rg_valid_39_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd39 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_4_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_4_wget ;
  assign MUX_rg_valid_4_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_40_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_40_wget ;
  assign MUX_rg_valid_40_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd40 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_41_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_41_wget ;
  assign MUX_rg_valid_41_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd41 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_42_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_42_wget ;
  assign MUX_rg_valid_42_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd42 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_43_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_43_wget ;
  assign MUX_rg_valid_43_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd43 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_44_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_44_wget ;
  assign MUX_rg_valid_44_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd44 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_45_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_45_wget ;
  assign MUX_rg_valid_45_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd45 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_46_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_46_wget ;
  assign MUX_rg_valid_46_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd46 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_47_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_47_wget ;
  assign MUX_rg_valid_47_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd47 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_48_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_48_wget ;
  assign MUX_rg_valid_48_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd48 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_49_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_49_wget ;
  assign MUX_rg_valid_49_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd49 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_5_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_5_wget ;
  assign MUX_rg_valid_5_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_50_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_50_wget ;
  assign MUX_rg_valid_50_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd50 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_51_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_51_wget ;
  assign MUX_rg_valid_51_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd51 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_52_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_52_wget ;
  assign MUX_rg_valid_52_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd52 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_53_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_53_wget ;
  assign MUX_rg_valid_53_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd53 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_54_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_54_wget ;
  assign MUX_rg_valid_54_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd54 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_55_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_55_wget ;
  assign MUX_rg_valid_55_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd55 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_56_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_56_wget ;
  assign MUX_rg_valid_56_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd56 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_57_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_57_wget ;
  assign MUX_rg_valid_57_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd57 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_58_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_58_wget ;
  assign MUX_rg_valid_58_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd58 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_59_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_59_wget ;
  assign MUX_rg_valid_59_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd59 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_6_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_6_wget ;
  assign MUX_rg_valid_6_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_60_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_60_wget ;
  assign MUX_rg_valid_60_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd60 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_61_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_61_wget ;
  assign MUX_rg_valid_61_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd61 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_62_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_62_wget ;
  assign MUX_rg_valid_62_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd62 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_63_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_63_wget ;
  assign MUX_rg_valid_63_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd63 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_7_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_7_wget ;
  assign MUX_rg_valid_7_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_8_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_8_wget ;
  assign MUX_rg_valid_8_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd8 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_rg_valid_9_write_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_9_wget ;
  assign MUX_rg_valid_9_write_1__SEL_2 =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd9 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign MUX_store_valid_0_1_write_1__SEL_1 =
	     EN_perform_store && rg_storehead == 1'd0 ;
  assign MUX_store_valid_0_1_write_1__SEL_2 =
	     WILL_FIRE_RL_allocate_storebuffer && rg_storetail == 1'd0 ;
  assign MUX_store_valid_1_1_write_1__SEL_1 =
	     EN_perform_store && rg_storehead == 1'd1 ;
  assign MUX_store_valid_1_1_write_1__SEL_2 =
	     WILL_FIRE_RL_allocate_storebuffer && rg_storetail == 1'd1 ;
  assign MUX_tag_arr_0_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo29 ;
  assign MUX_tag_arr_1_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo25 ;
  assign MUX_tag_arr_2_ram_single_0_request_1__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo21 ;
  assign MUX_tag_arr_3_ram_single_0_request_2__SEL_1 =
	     WILL_FIRE_RL_release_from_FB && _dfoo17 ;
  always@(rg_fbwriteback or
	  fb_dataline_0 or
	  fb_dataline_1 or
	  fb_dataline_2 or
	  fb_dataline_3 or
	  fb_dataline_4 or fb_dataline_5 or fb_dataline_6 or fb_dataline_7)
  begin
    case (rg_fbwriteback)
      3'd0: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_0;
      3'd1: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_1;
      3'd2: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_2;
      3'd3: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_3;
      3'd4: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_4;
      3'd5: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_5;
      3'd6: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_6;
      3'd7: MUX_data_arr_0_ram_single_0_request_3__VAL_2 = fb_dataline_7;
    endcase
  end
  assign MUX_fb_dataline_0_write_1__VAL_1 = x__h401597 | y__h401598 ;
  assign MUX_fb_dataline_0_write_1__VAL_2 =
	     CAN_FIRE_RL_tag_match ? x_wget__h19161 : 512'd0 ;
  assign MUX_fb_dataline_0_write_1__VAL_3 = x__h311706 | y__h311707 ;
  assign MUX_fb_dirty_0_write_1__VAL_3 = bs__h300273[i__h300274] ;
  assign MUX_fb_enables_0_write_1__VAL_4 =
	     SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 |
	     _theResult_____6__h311237 ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       ff_core_request_D_OUT[81:75] } ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       _theResult_____4__h308265,
	       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	       2'd0 &&
	       IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092 ||
	       ff_from_tlb_rv_port1__read[7],
	       v_cause__h308302,
	       ff_core_request_D_OUT[75] } ;
  assign MUX_ff_from_tlb_rv_port1__write_1__VAL_1 =
	     { 1'd0,
	       40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_1 =
	     { final_address__h28113, final_line___1__h28112, 11'd59 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_2 =
	     { final_address__h380608, v__h380270, 11'd59 } ;
  assign MUX_repl_v_count_0_write_1__VAL_2 =
	     SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 -
	     2'd1 ;
  assign MUX_rg_dirty_0_write_1__VAL_1 =
	     SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 ?
	       dirty__h375918 | x__h381594 :
	       dirty__h375918 & y__h384884 ;
  assign MUX_rg_dirty_0_write_1__VAL_2 = bs__h300273 & y__h301664 ;
  assign MUX_rg_fbmissallocate_write_1__VAL_1 = rg_fbmissallocate + 3'd1 ;
  assign MUX_rg_valid_0_write_1__VAL_1 = valid__h375917 | x__h381594 ;
  assign MUX_rg_valid_0_write_1__VAL_2 = w__h301646 & y__h301664 ;

  // inlined wires
  assign wr_total_read_access_whas =
	     EN_core_req_put && core_req_put[74:73] == 2'd0 ;
  assign wr_total_write_access_whas =
	     EN_core_req_put && core_req_put[74:73] == 2'd1 ;
  assign wr_total_atomic_access_whas =
	     EN_core_req_put && core_req_put[74:73] == 2'd2 ;
  assign wr_total_io_reads_whas =
	     WILL_FIRE_RL_respond_to_core &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	     2'd0 &&
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 !=
	     2'd0 &&
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	     2'd0 &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_total_io_writes_whas =
	     EN_perform_store &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;
  assign wr_total_read_miss_whas =
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_total_write_miss_whas =
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign wr_total_atomic_miss_whas =
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign wr_total_readfb_hits_whas =
	     WILL_FIRE_RL_respond_to_core &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	     2'd0 &&
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd0 &&
	     !rg_miss_ongoing &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_total_writefb_hits_whas =
	     WILL_FIRE_RL_respond_to_core &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	     2'd0 &&
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd0 &&
	     !rg_miss_ongoing &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign wr_total_atomicfb_hits_whas =
	     WILL_FIRE_RL_respond_to_core &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	     2'd0 &&
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd0 &&
	     !rg_miss_ongoing &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign wr_cache_response_wget =
	     (hit__h290166 != 4'd0 && cache_enable_c) ? 2'd0 : 2'd1 ;
  assign wr_cache_response_whas =
	     WILL_FIRE_RL_tag_match && !ff_from_tlb_rv_port1__read[7] &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign wr_cache_hitword_whas =
	     WILL_FIRE_RL_tag_match && !ff_from_tlb_rv_port1__read[7] &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     hit__h290166 != 4'd0 &&
	     cache_enable_c ;
  assign wr_fb_response_wget =
	     cache_enable_c ?
	       (IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1542 ?
		  2'd0 :
		  2'd1) :
	       2'd1 ;
  assign wr_fb_response_whas =
	     WILL_FIRE_RL_check_fb_for_corerequest &&
	     (IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1542 ||
	      fbhit__h292477 == 8'd0 ||
	      !cache_enable_c) ;
  assign wr_fb_err_wget =
	     (fb_addr_7[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_7) ?
	       fb_err_7 :
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1645 ;
  assign wr_fbbeingfilled_wget = { 1'd1, ff_fb_fillindex_D_OUT } ;
  assign rg_readdone_1_whas =
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	     !rg_readdone ;
  assign wr_upd_fillingdata_whas =
	     EN_perform_store &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132 ;
  assign wr_trap_from_tlb_whas =
	     WILL_FIRE_RL_tag_match &&
	     (ff_from_tlb_rv_port1__read[7] ||
	      ff_from_tlb_rv_port1__read[0]) ;
  assign _deq_RL_request_to_memory_EN_ff_core_request_wget =
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign _write_RL_request_to_memory_EN_fb_valid_0_wget =
	     rg_fbmissallocate == 3'd0 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_1_wget =
	     rg_fbmissallocate == 3'd1 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_2_wget =
	     rg_fbmissallocate == 3'd2 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_3_wget =
	     rg_fbmissallocate == 3'd3 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_4_wget =
	     rg_fbmissallocate == 3'd4 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_5_wget =
	     rg_fbmissallocate == 3'd5 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_6_wget =
	     rg_fbmissallocate == 3'd6 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _write_RL_request_to_memory_EN_fb_valid_7_wget =
	     rg_fbmissallocate == 3'd7 && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign _port0__write_RL_respond_to_core_EN_ff_core_response_rv_wget =
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	     2'd0 &&
	     IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092 ||
	     ff_from_tlb_rv_port1__read[7] ||
	     !ff_core_request_D_OUT[0] && !ff_from_tlb_rv_port1__read[0] ;
  assign _write_RL_respond_to_core_EN_fb_valid_0_wget =
	     rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_1_wget =
	     rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_2_wget =
	     rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_3_wget =
	     rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_4_wget =
	     rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_5_wget =
	     rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_6_wget =
	     rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _write_RL_respond_to_core_EN_fb_valid_7_wget =
	     rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ;
  assign _deq_RL_fence_operation_EN_ff_core_request_wget =
	     index__h27062 == 7'd63 &&
	     (rg_way_select[3] || x__h277884 == 4'd0) ||
	     !rg_globaldirty ;
  assign _write_RL_release_from_FB_EN_rg_replaylatest_wget =
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) &&
	     fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2910 ;
  assign _write_RL_release_from_FB_EN_rg_valid_0_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd0 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_1_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd1 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_2_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd2 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_3_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd3 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_4_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd4 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_5_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd5 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_6_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd6 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_7_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd7 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_8_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd8 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_9_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd9 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_10_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd10 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_11_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd11 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_12_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd12 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_13_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd13 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_14_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd14 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_15_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd15 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_16_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd16 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_17_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd17 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_18_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd18 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_19_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd19 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_20_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd20 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_21_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd21 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_22_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd22 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_23_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd23 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_24_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd24 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_25_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd25 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_26_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd26 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_27_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd27 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_28_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd28 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_29_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd29 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_30_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd30 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_31_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd31 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_32_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd32 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_33_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd33 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_34_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd34 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_35_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd35 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_36_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd36 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_37_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd37 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_38_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd38 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_39_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd39 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_40_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd40 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_41_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd41 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_42_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd42 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_43_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd43 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_44_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd44 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_45_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd45 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_46_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd46 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_47_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd47 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_48_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd48 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_49_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd49 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_50_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd50 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_51_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd51 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_52_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd52 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_53_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd53 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_54_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd54 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_55_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd55 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_56_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd56 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_57_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd57 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_58_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd58 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_59_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd59 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_60_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd60 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_61_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd61 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_62_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd62 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _write_RL_release_from_FB_EN_rg_valid_63_wget =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd63 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign ff_core_response_rv_EN_port0__write =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     _port0__write_RL_respond_to_core_EN_ff_core_response_rv_wget ||
	     WILL_FIRE_RL_request_to_memory &&
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  always@(MUX_ff_core_response_rv_port0__write_1__SEL_1 or
	  MUX_ff_core_response_rv_port0__write_1__VAL_1 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_2 or
	  MUX_ff_core_response_rv_port0__write_1__VAL_2 or
	  MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_ff_core_response_rv_port0__write_1__SEL_1:
	ff_core_response_rv_port0__write_1 =
	    MUX_ff_core_response_rv_port0__write_1__VAL_1;
    MUX_ff_core_response_rv_port0__write_1__SEL_2:
	ff_core_response_rv_port0__write_1 =
	    MUX_ff_core_response_rv_port0__write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1:
	ff_core_response_rv_port0__write_1 =
	    MUX_ff_core_response_rv_port0__write_1__VAL_1;
    default: ff_core_response_rv_port0__write_1 =
		 73'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign ff_core_response_rv_port1__read =
	     ff_core_response_rv_EN_port0__write ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_core_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_ptw_response_rv_EN_port0__write =
	     WILL_FIRE_RL_respond_to_core &&
	     (IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	      2'd0 ||
	      IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2108) &&
	     !ff_from_tlb_rv_port1__read[7] &&
	     ff_core_request_D_OUT[0] &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign ff_ptw_response_rv_port0__write_1 =
	     { 1'd1,
	       word__h307867,
	       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	       2'd0 &&
	       IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092 ||
	       ff_from_tlb_rv_port1__read[7],
	       v_cause__h308302,
	       ff_core_request_D_OUT[75] } ;
  assign ff_ptw_response_rv_port1__read =
	     ff_ptw_response_rv_EN_port0__write ?
	       ff_ptw_response_rv_port0__write_1 :
	       ff_ptw_response_rv ;
  assign ff_ptw_response_rv_port2__read =
	     EN_ptw_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_ptw_response_rv_port1__read ;
  assign ff_read_mem_response_rv_port0__write_1 =
	     { 1'd1, read_mem_resp_put } ;
  assign ff_read_mem_response_rv_port1__read =
	     EN_read_mem_resp_put ?
	       ff_read_mem_response_rv_port0__write_1 :
	       ff_read_mem_response_rv ;
  assign ff_read_mem_response_rv_port2__read =
	     CAN_FIRE_RL_update_fb_with_memory_response ?
	       ff_nc_read_response_rv_port1__write_1 :
	       ff_read_mem_response_rv_port1__read ;
  assign ff_nc_read_response_rv_port0__write_1 = { 1'd1, nc_read_resp_put } ;
  assign ff_nc_read_response_rv_port1__read =
	     EN_nc_read_resp_put ?
	       ff_nc_read_response_rv_port0__write_1 :
	       ff_nc_read_response_rv ;
  assign ff_nc_read_response_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_nc_read_response_rv_port2__read =
	     ff_nc_read_response_rv_port1__read[66] ?
	       ff_nc_read_response_rv_port1__write_1 :
	       ff_nc_read_response_rv_port1__read ;
  assign ff_write_mem_response_rv_port0__write_1 =
	     { 1'd1, write_mem_resp_put } ;
  assign ff_write_mem_response_rv_port1__read =
	     EN_write_mem_resp_put ?
	       ff_write_mem_response_rv_port0__write_1 :
	       ff_write_mem_response_rv ;
  assign ff_write_mem_response_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_write_mem_response_rv_port2__read =
	     ff_write_mem_response_rv_port1__read[1] ?
	       ff_write_mem_response_rv_port1__write_1 :
	       ff_write_mem_response_rv_port1__read ;
  assign ff_hold_request_rv_EN_port0__write =
	     WILL_FIRE_RL_respond_to_core && ff_from_tlb_rv_port1__read[0] ;
  assign ff_hold_request_rv_port0__write_1 = { 1'd1, ff_core_request_D_OUT } ;
  assign ff_hold_request_rv_port1__read =
	     ff_hold_request_rv_EN_port0__write ?
	       ff_hold_request_rv_port0__write_1 :
	       ff_hold_request_rv ;
  assign ff_hold_request_rv_port1__write_1 =
	     { 1'd0,
	       141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_hold_request_rv_port2__read =
	     EN_hold_req_get ?
	       ff_hold_request_rv_port1__write_1 :
	       ff_hold_request_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_EN_port1__write =
	     WILL_FIRE_RL_request_to_memory &&
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ||
	     WILL_FIRE_RL_respond_to_core ;
  assign ff_from_tlb_rv_port1__write_1 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_from_tlb_rv_port1__write_1__VAL_1 :
	       MUX_ff_from_tlb_rv_port1__write_1__VAL_1 ;
  assign ff_from_tlb_rv_port2__read =
	     ff_from_tlb_rv_EN_port1__write ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;

  // register data_arr_0_rg_output_0
  assign data_arr_0_rg_output_0_D_IN = data_arr_0_ram_single_0_douta ;
  assign data_arr_0_rg_output_0_EN = 1'b1 ;

  // register data_arr_1_rg_output_0
  assign data_arr_1_rg_output_0_D_IN = data_arr_1_ram_single_0_douta ;
  assign data_arr_1_rg_output_0_EN = 1'b1 ;

  // register data_arr_2_rg_output_0
  assign data_arr_2_rg_output_0_D_IN = data_arr_2_ram_single_0_douta ;
  assign data_arr_2_rg_output_0_EN = 1'b1 ;

  // register data_arr_3_rg_output_0
  assign data_arr_3_rg_output_0_D_IN = data_arr_3_ram_single_0_douta ;
  assign data_arr_3_rg_output_0_EN = 1'b1 ;

  // register fb_addr_0
  assign fb_addr_0_D_IN =
	     MUX_fb_valid_0_write_1__SEL_3 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_0_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_1
  assign fb_addr_1_D_IN =
	     MUX_fb_valid_1_write_1__SEL_3 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_1_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_2
  assign fb_addr_2_D_IN =
	     MUX_fb_valid_2_write_1__SEL_3 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_2_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_3
  assign fb_addr_3_D_IN =
	     MUX_fb_valid_3_write_1__SEL_3 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_3_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_4
  assign fb_addr_4_D_IN =
	     MUX_fb_addr_4_write_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_4_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_5
  assign fb_addr_5_D_IN =
	     MUX_fb_addr_5_write_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_5_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_6
  assign fb_addr_6_D_IN =
	     MUX_fb_addr_6_write_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_6_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_addr_7
  assign fb_addr_7_D_IN =
	     MUX_fb_addr_7_write_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       x_address__h309373 ;
  assign fb_addr_7_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_dataline_0
  always@(MUX_fb_dataline_0_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_valid_0_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_0_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_0_write_1__SEL_1:
	fb_dataline_0_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_valid_0_write_1__SEL_3:
	fb_dataline_0_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_0_write_1__SEL_3:
	fb_dataline_0_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_0_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_0_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd0 ||
	     EN_perform_store && fbindex__h399390 == 3'd0 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_1
  always@(MUX_fb_dataline_1_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_valid_1_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_1_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_1_write_1__SEL_1:
	fb_dataline_1_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_valid_1_write_1__SEL_3:
	fb_dataline_1_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_1_write_1__SEL_3:
	fb_dataline_1_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_1_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_1_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd1 ||
	     EN_perform_store && fbindex__h399390 == 3'd1 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_2
  always@(MUX_fb_dataline_2_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_valid_2_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_2_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_2_write_1__SEL_1:
	fb_dataline_2_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_valid_2_write_1__SEL_3:
	fb_dataline_2_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_2_write_1__SEL_3:
	fb_dataline_2_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_2_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_2_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd2 ||
	     EN_perform_store && fbindex__h399390 == 3'd2 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_3
  always@(MUX_fb_dataline_3_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_valid_3_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_3_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_3_write_1__SEL_1:
	fb_dataline_3_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_valid_3_write_1__SEL_3:
	fb_dataline_3_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_3_write_1__SEL_3:
	fb_dataline_3_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_3_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_3_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd3 ||
	     EN_perform_store && fbindex__h399390 == 3'd3 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_4
  always@(MUX_fb_dataline_4_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_addr_4_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_4_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_4_write_1__SEL_1:
	fb_dataline_4_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_addr_4_write_1__SEL_1:
	fb_dataline_4_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_4_write_1__SEL_3:
	fb_dataline_4_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_4_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_4_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd4 ||
	     EN_perform_store && fbindex__h399390 == 3'd4 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_5
  always@(MUX_fb_dataline_5_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_addr_5_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_5_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_5_write_1__SEL_1:
	fb_dataline_5_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_addr_5_write_1__SEL_1:
	fb_dataline_5_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_5_write_1__SEL_3:
	fb_dataline_5_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_5_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_5_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd5 ||
	     EN_perform_store && fbindex__h399390 == 3'd5 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_6
  always@(MUX_fb_dataline_6_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_addr_6_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_6_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_6_write_1__SEL_1:
	fb_dataline_6_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_addr_6_write_1__SEL_1:
	fb_dataline_6_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_6_write_1__SEL_3:
	fb_dataline_6_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_6_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_6_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd6 ||
	     EN_perform_store && fbindex__h399390 == 3'd6 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dataline_7
  always@(MUX_fb_dataline_7_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_1 or
	  MUX_fb_addr_7_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__VAL_2 or
	  MUX_fb_dataline_7_write_1__SEL_3 or
	  MUX_fb_dataline_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dataline_7_write_1__SEL_1:
	fb_dataline_7_D_IN = MUX_fb_dataline_0_write_1__VAL_1;
    MUX_fb_addr_7_write_1__SEL_1:
	fb_dataline_7_D_IN = MUX_fb_dataline_0_write_1__VAL_2;
    MUX_fb_dataline_7_write_1__SEL_3:
	fb_dataline_7_D_IN = MUX_fb_dataline_0_write_1__VAL_3;
    default: fb_dataline_7_D_IN =
		 512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_dataline_7_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd7 ||
	     EN_perform_store && fbindex__h399390 == 3'd7 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 ;

  // register fb_dirty_0
  always@(MUX_fb_dirty_0_write_1__SEL_1 or
	  MUX_fb_enables_0_write_1__SEL_1 or
	  MUX_fb_valid_0_write_1__SEL_3 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_0_write_1__SEL_1: fb_dirty_0_D_IN = 1'b1;
    MUX_fb_enables_0_write_1__SEL_1: fb_dirty_0_D_IN = 1'd0;
    MUX_fb_valid_0_write_1__SEL_3:
	fb_dirty_0_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_0_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_0_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd0 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_1
  always@(MUX_fb_dirty_1_write_1__SEL_1 or
	  MUX_fb_enables_1_write_1__SEL_1 or
	  MUX_fb_valid_1_write_1__SEL_3 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_1_write_1__SEL_1: fb_dirty_1_D_IN = 1'b1;
    MUX_fb_enables_1_write_1__SEL_1: fb_dirty_1_D_IN = 1'd0;
    MUX_fb_valid_1_write_1__SEL_3:
	fb_dirty_1_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_1_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_1_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd1 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_2
  always@(MUX_fb_dirty_2_write_1__SEL_1 or
	  MUX_fb_enables_2_write_1__SEL_1 or
	  MUX_fb_valid_2_write_1__SEL_3 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_2_write_1__SEL_1: fb_dirty_2_D_IN = 1'b1;
    MUX_fb_enables_2_write_1__SEL_1: fb_dirty_2_D_IN = 1'd0;
    MUX_fb_valid_2_write_1__SEL_3:
	fb_dirty_2_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_2_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_2_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd2 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_3
  always@(MUX_fb_dirty_3_write_1__SEL_1 or
	  MUX_fb_enables_3_write_1__SEL_1 or
	  MUX_fb_valid_3_write_1__SEL_3 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_3_write_1__SEL_1: fb_dirty_3_D_IN = 1'b1;
    MUX_fb_enables_3_write_1__SEL_1: fb_dirty_3_D_IN = 1'd0;
    MUX_fb_valid_3_write_1__SEL_3:
	fb_dirty_3_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_3_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_3_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd3 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_4
  always@(MUX_fb_dirty_4_write_1__SEL_1 or
	  MUX_fb_addr_4_write_1__SEL_2 or
	  MUX_fb_addr_4_write_1__SEL_1 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_4_write_1__SEL_1: fb_dirty_4_D_IN = 1'b1;
    MUX_fb_addr_4_write_1__SEL_2: fb_dirty_4_D_IN = 1'd0;
    MUX_fb_addr_4_write_1__SEL_1:
	fb_dirty_4_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_4_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_4_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd4 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_5
  always@(MUX_fb_dirty_5_write_1__SEL_1 or
	  MUX_fb_addr_5_write_1__SEL_2 or
	  MUX_fb_addr_5_write_1__SEL_1 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_5_write_1__SEL_1: fb_dirty_5_D_IN = 1'b1;
    MUX_fb_addr_5_write_1__SEL_2: fb_dirty_5_D_IN = 1'd0;
    MUX_fb_addr_5_write_1__SEL_1:
	fb_dirty_5_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_5_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_5_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd5 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_6
  always@(MUX_fb_dirty_6_write_1__SEL_1 or
	  MUX_fb_addr_6_write_1__SEL_2 or
	  MUX_fb_addr_6_write_1__SEL_1 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_6_write_1__SEL_1: fb_dirty_6_D_IN = 1'b1;
    MUX_fb_addr_6_write_1__SEL_2: fb_dirty_6_D_IN = 1'd0;
    MUX_fb_addr_6_write_1__SEL_1:
	fb_dirty_6_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_6_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_6_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd6 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_dirty_7
  always@(MUX_fb_dirty_7_write_1__SEL_1 or
	  MUX_fb_addr_7_write_1__SEL_2 or
	  MUX_fb_addr_7_write_1__SEL_1 or MUX_fb_dirty_0_write_1__VAL_3)
  case (1'b1)
    MUX_fb_dirty_7_write_1__SEL_1: fb_dirty_7_D_IN = 1'b1;
    MUX_fb_addr_7_write_1__SEL_2: fb_dirty_7_D_IN = 1'd0;
    MUX_fb_addr_7_write_1__SEL_1:
	fb_dirty_7_D_IN = MUX_fb_dirty_0_write_1__VAL_3;
    default: fb_dirty_7_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_dirty_7_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     EN_perform_store && fbindex__h399390 == 3'd7 &&
	     SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 ;

  // register fb_enables_0
  always@(MUX_fb_enables_0_write_1__SEL_1 or
	  MUX_fb_valid_0_write_1__SEL_3 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_0_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_enables_0_write_1__SEL_1: fb_enables_0_D_IN = 8'd0;
    MUX_fb_valid_0_write_1__SEL_3: fb_enables_0_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_0_D_IN = 8'd0;
    MUX_fb_dataline_0_write_1__SEL_3:
	fb_enables_0_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_0_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_0_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd0 ;

  // register fb_enables_1
  always@(MUX_fb_enables_1_write_1__SEL_1 or
	  MUX_fb_valid_1_write_1__SEL_3 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_1_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_enables_1_write_1__SEL_1: fb_enables_1_D_IN = 8'd0;
    MUX_fb_valid_1_write_1__SEL_3: fb_enables_1_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_1_D_IN = 8'd0;
    MUX_fb_dataline_1_write_1__SEL_3:
	fb_enables_1_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_1_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_1_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd1 ;

  // register fb_enables_2
  always@(MUX_fb_enables_2_write_1__SEL_1 or
	  MUX_fb_valid_2_write_1__SEL_3 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_2_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_enables_2_write_1__SEL_1: fb_enables_2_D_IN = 8'd0;
    MUX_fb_valid_2_write_1__SEL_3: fb_enables_2_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_2_D_IN = 8'd0;
    MUX_fb_dataline_2_write_1__SEL_3:
	fb_enables_2_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_2_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_2_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd2 ;

  // register fb_enables_3
  always@(MUX_fb_enables_3_write_1__SEL_1 or
	  MUX_fb_valid_3_write_1__SEL_3 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_3_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_enables_3_write_1__SEL_1: fb_enables_3_D_IN = 8'd0;
    MUX_fb_valid_3_write_1__SEL_3: fb_enables_3_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_3_D_IN = 8'd0;
    MUX_fb_dataline_3_write_1__SEL_3:
	fb_enables_3_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_3_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_3_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd3 ;

  // register fb_enables_4
  always@(MUX_fb_addr_4_write_1__SEL_2 or
	  MUX_fb_addr_4_write_1__SEL_1 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_4_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_addr_4_write_1__SEL_2: fb_enables_4_D_IN = 8'd0;
    MUX_fb_addr_4_write_1__SEL_1: fb_enables_4_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_4_D_IN = 8'd0;
    MUX_fb_dataline_4_write_1__SEL_3:
	fb_enables_4_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_4_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_4_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd4 ;

  // register fb_enables_5
  always@(MUX_fb_addr_5_write_1__SEL_2 or
	  MUX_fb_addr_5_write_1__SEL_1 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_5_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_addr_5_write_1__SEL_2: fb_enables_5_D_IN = 8'd0;
    MUX_fb_addr_5_write_1__SEL_1: fb_enables_5_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_5_D_IN = 8'd0;
    MUX_fb_dataline_5_write_1__SEL_3:
	fb_enables_5_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_5_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_5_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd5 ;

  // register fb_enables_6
  always@(MUX_fb_addr_6_write_1__SEL_2 or
	  MUX_fb_addr_6_write_1__SEL_1 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_6_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_addr_6_write_1__SEL_2: fb_enables_6_D_IN = 8'd0;
    MUX_fb_addr_6_write_1__SEL_1: fb_enables_6_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_6_D_IN = 8'd0;
    MUX_fb_dataline_6_write_1__SEL_3:
	fb_enables_6_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_6_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_6_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd6 ;

  // register fb_enables_7
  always@(MUX_fb_addr_7_write_1__SEL_2 or
	  MUX_fb_addr_7_write_1__SEL_1 or
	  MUX_rg_fence_stall_write_1__SEL_1 or
	  MUX_fb_dataline_7_write_1__SEL_3 or MUX_fb_enables_0_write_1__VAL_4)
  case (1'b1)
    MUX_fb_addr_7_write_1__SEL_2: fb_enables_7_D_IN = 8'd0;
    MUX_fb_addr_7_write_1__SEL_1: fb_enables_7_D_IN = 8'd255;
    MUX_rg_fence_stall_write_1__SEL_1: fb_enables_7_D_IN = 8'd0;
    MUX_fb_dataline_7_write_1__SEL_3:
	fb_enables_7_D_IN = MUX_fb_enables_0_write_1__VAL_4;
    default: fb_enables_7_D_IN = 8'bxxxxxxxx /* unspecified value */ ;
  endcase
  assign fb_enables_7_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd7 ;

  // register fb_err_0
  assign fb_err_0_D_IN =
	     !MUX_fb_enables_0_write_1__SEL_1 &&
	     !MUX_fb_valid_0_write_1__SEL_3 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_0_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd0 ;

  // register fb_err_1
  assign fb_err_1_D_IN =
	     !MUX_fb_enables_1_write_1__SEL_1 &&
	     !MUX_fb_valid_1_write_1__SEL_3 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_1_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd1 ;

  // register fb_err_2
  assign fb_err_2_D_IN =
	     !MUX_fb_enables_2_write_1__SEL_1 &&
	     !MUX_fb_valid_2_write_1__SEL_3 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_2_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd2 ;

  // register fb_err_3
  assign fb_err_3_D_IN =
	     !MUX_fb_enables_3_write_1__SEL_1 &&
	     !MUX_fb_valid_3_write_1__SEL_3 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_3_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd3 ;

  // register fb_err_4
  assign fb_err_4_D_IN =
	     !MUX_fb_addr_4_write_1__SEL_2 && !MUX_fb_addr_4_write_1__SEL_1 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_4_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd4 ;

  // register fb_err_5
  assign fb_err_5_D_IN =
	     !MUX_fb_addr_5_write_1__SEL_2 && !MUX_fb_addr_5_write_1__SEL_1 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_5_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd5 ;

  // register fb_err_6
  assign fb_err_6_D_IN =
	     !MUX_fb_addr_6_write_1__SEL_2 && !MUX_fb_addr_6_write_1__SEL_1 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_6_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd6 ;

  // register fb_err_7
  assign fb_err_7_D_IN =
	     !MUX_fb_addr_7_write_1__SEL_2 && !MUX_fb_addr_7_write_1__SEL_1 &&
	     ff_read_mem_response_rv_port1__read[0] ;
  assign fb_err_7_EN =
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_fb_fillindex_D_OUT == 3'd7 ;

  // register fb_valid_0
  always@(MUX_fb_valid_0_write_1__SEL_1 or
	  MUX_fb_enables_0_write_1__SEL_1 or
	  MUX_fb_valid_0_write_1__SEL_3 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_0_write_1__SEL_1: fb_valid_0_D_IN = 1'd0;
    MUX_fb_enables_0_write_1__SEL_1 || MUX_fb_valid_0_write_1__SEL_3:
	fb_valid_0_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_0_D_IN = 1'd0;
    default: fb_valid_0_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_0_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo15 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd0 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_1
  always@(MUX_fb_valid_1_write_1__SEL_1 or
	  MUX_fb_enables_1_write_1__SEL_1 or
	  MUX_fb_valid_1_write_1__SEL_3 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_1_write_1__SEL_1: fb_valid_1_D_IN = 1'd0;
    MUX_fb_enables_1_write_1__SEL_1 || MUX_fb_valid_1_write_1__SEL_3:
	fb_valid_1_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_1_D_IN = 1'd0;
    default: fb_valid_1_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_1_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo13 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd1 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_2
  always@(MUX_fb_valid_2_write_1__SEL_1 or
	  MUX_fb_enables_2_write_1__SEL_1 or
	  MUX_fb_valid_2_write_1__SEL_3 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_2_write_1__SEL_1: fb_valid_2_D_IN = 1'd0;
    MUX_fb_enables_2_write_1__SEL_1 || MUX_fb_valid_2_write_1__SEL_3:
	fb_valid_2_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_2_D_IN = 1'd0;
    default: fb_valid_2_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_2_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo11 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd2 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_3
  always@(MUX_fb_valid_3_write_1__SEL_1 or
	  MUX_fb_enables_3_write_1__SEL_1 or
	  MUX_fb_valid_3_write_1__SEL_3 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_3_write_1__SEL_1: fb_valid_3_D_IN = 1'd0;
    MUX_fb_enables_3_write_1__SEL_1 || MUX_fb_valid_3_write_1__SEL_3:
	fb_valid_3_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_3_D_IN = 1'd0;
    default: fb_valid_3_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_3_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo9 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd3 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_4
  always@(MUX_fb_valid_4_write_1__SEL_1 or
	  MUX_fb_addr_4_write_1__SEL_2 or
	  MUX_fb_addr_4_write_1__SEL_1 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_4_write_1__SEL_1: fb_valid_4_D_IN = 1'd0;
    MUX_fb_addr_4_write_1__SEL_2 || MUX_fb_addr_4_write_1__SEL_1:
	fb_valid_4_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_4_D_IN = 1'd0;
    default: fb_valid_4_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_4_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo7 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd4 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_5
  always@(MUX_fb_valid_5_write_1__SEL_1 or
	  MUX_fb_addr_5_write_1__SEL_2 or
	  MUX_fb_addr_5_write_1__SEL_1 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_5_write_1__SEL_1: fb_valid_5_D_IN = 1'd0;
    MUX_fb_addr_5_write_1__SEL_2 || MUX_fb_addr_5_write_1__SEL_1:
	fb_valid_5_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_5_D_IN = 1'd0;
    default: fb_valid_5_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_5_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo5 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd5 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_6
  always@(MUX_fb_valid_6_write_1__SEL_1 or
	  MUX_fb_addr_6_write_1__SEL_2 or
	  MUX_fb_addr_6_write_1__SEL_1 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_6_write_1__SEL_1: fb_valid_6_D_IN = 1'd0;
    MUX_fb_addr_6_write_1__SEL_2 || MUX_fb_addr_6_write_1__SEL_1:
	fb_valid_6_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_6_D_IN = 1'd0;
    default: fb_valid_6_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_6_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo3 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd6 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register fb_valid_7
  always@(MUX_fb_valid_7_write_1__SEL_1 or
	  MUX_fb_addr_7_write_1__SEL_2 or
	  MUX_fb_addr_7_write_1__SEL_1 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_fb_valid_7_write_1__SEL_1: fb_valid_7_D_IN = 1'd0;
    MUX_fb_addr_7_write_1__SEL_2 || MUX_fb_addr_7_write_1__SEL_1:
	fb_valid_7_D_IN = 1'd1;
    MUX_rg_fence_stall_write_1__SEL_1: fb_valid_7_D_IN = 1'd0;
    default: fb_valid_7_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign fb_valid_7_EN =
	     WILL_FIRE_RL_release_from_FB && _dfoo1 ||
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core && rg_fbmissallocate == 3'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && rg_fbmissallocate == 3'd7 &&
	     cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv_port2__read ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_nc_read_response_rv
  assign ff_nc_read_response_rv_D_IN = ff_nc_read_response_rv_port2__read ;
  assign ff_nc_read_response_rv_EN = 1'b1 ;

  // register ff_ptw_response_rv
  assign ff_ptw_response_rv_D_IN = ff_ptw_response_rv_port2__read ;
  assign ff_ptw_response_rv_EN = 1'b1 ;

  // register ff_read_mem_response_rv
  assign ff_read_mem_response_rv_D_IN = ff_read_mem_response_rv_port2__read ;
  assign ff_read_mem_response_rv_EN = 1'b1 ;

  // register ff_write_mem_response_rv
  assign ff_write_mem_response_rv_D_IN =
	     ff_write_mem_response_rv_port2__read ;
  assign ff_write_mem_response_rv_EN = 1'b1 ;

  // register repl_v_count_0
  assign repl_v_count_0_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_0_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd0 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_1
  assign repl_v_count_1_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_1_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd1 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_10
  assign repl_v_count_10_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_10_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd10 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_11
  assign repl_v_count_11_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_11_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd11 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_12
  assign repl_v_count_12_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_12_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd12 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_13
  assign repl_v_count_13_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_13_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd13 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_14
  assign repl_v_count_14_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_14_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd14 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_15
  assign repl_v_count_15_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_15_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd15 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_16
  assign repl_v_count_16_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_16_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd16 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_17
  assign repl_v_count_17_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_17_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd17 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_18
  assign repl_v_count_18_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_18_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd18 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_19
  assign repl_v_count_19_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_19_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd19 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_2
  assign repl_v_count_2_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_2_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd2 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_20
  assign repl_v_count_20_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_20_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd20 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_21
  assign repl_v_count_21_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_21_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd21 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_22
  assign repl_v_count_22_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_22_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd22 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_23
  assign repl_v_count_23_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_23_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd23 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_24
  assign repl_v_count_24_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_24_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd24 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_25
  assign repl_v_count_25_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_25_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd25 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_26
  assign repl_v_count_26_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_26_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd26 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_27
  assign repl_v_count_27_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_27_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd27 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_28
  assign repl_v_count_28_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_28_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd28 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_29
  assign repl_v_count_29_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_29_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd29 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_3
  assign repl_v_count_3_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_3_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd3 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_30
  assign repl_v_count_30_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_30_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd30 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_31
  assign repl_v_count_31_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_31_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd31 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_32
  assign repl_v_count_32_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_32_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd32 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_33
  assign repl_v_count_33_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_33_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd33 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_34
  assign repl_v_count_34_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_34_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd34 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_35
  assign repl_v_count_35_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_35_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd35 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_36
  assign repl_v_count_36_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_36_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd36 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_37
  assign repl_v_count_37_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_37_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd37 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_38
  assign repl_v_count_38_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_38_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd38 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_39
  assign repl_v_count_39_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_39_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd39 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_4
  assign repl_v_count_4_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_4_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd4 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_40
  assign repl_v_count_40_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_40_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd40 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_41
  assign repl_v_count_41_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_41_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd41 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_42
  assign repl_v_count_42_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_42_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd42 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_43
  assign repl_v_count_43_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_43_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd43 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_44
  assign repl_v_count_44_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_44_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd44 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_45
  assign repl_v_count_45_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_45_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd45 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_46
  assign repl_v_count_46_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_46_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd46 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_47
  assign repl_v_count_47_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_47_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd47 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_48
  assign repl_v_count_48_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_48_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd48 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_49
  assign repl_v_count_49_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_49_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd49 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_5
  assign repl_v_count_5_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_5_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd5 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_50
  assign repl_v_count_50_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_50_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd50 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_51
  assign repl_v_count_51_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_51_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd51 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_52
  assign repl_v_count_52_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_52_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd52 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_53
  assign repl_v_count_53_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_53_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd53 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_54
  assign repl_v_count_54_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_54_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd54 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_55
  assign repl_v_count_55_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_55_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd55 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_56
  assign repl_v_count_56_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_56_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd56 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_57
  assign repl_v_count_57_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_57_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd57 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_58
  assign repl_v_count_58_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_58_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd58 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_59
  assign repl_v_count_59_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_59_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd59 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_6
  assign repl_v_count_6_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_6_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd6 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_60
  assign repl_v_count_60_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_60_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd60 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_61
  assign repl_v_count_61_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_61_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd61 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_62
  assign repl_v_count_62_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_62_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd62 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_63
  assign repl_v_count_63_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_63_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd63 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_7
  assign repl_v_count_7_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_7_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd7 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_8
  assign repl_v_count_8_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_8_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd8 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register repl_v_count_9
  assign repl_v_count_9_D_IN =
	     MUX_rg_fence_stall_write_1__SEL_1 ?
	       2'd3 :
	       MUX_repl_v_count_0_write_1__VAL_2 ;
  assign repl_v_count_9_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     6'd9 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 ;

  // register rg_dirty_0
  always@(MUX_rg_valid_0_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_0_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_0_write_1__SEL_1:
	rg_dirty_0_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_0_write_1__SEL_2:
	rg_dirty_0_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_0_D_IN = 4'd0;
    default: rg_dirty_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_0_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_0_wget ;

  // register rg_dirty_1
  always@(MUX_rg_valid_1_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_1_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_1_write_1__SEL_1:
	rg_dirty_1_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_1_write_1__SEL_2:
	rg_dirty_1_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_1_D_IN = 4'd0;
    default: rg_dirty_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_1_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_1_wget ;

  // register rg_dirty_10
  always@(MUX_rg_valid_10_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_10_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_10_write_1__SEL_1:
	rg_dirty_10_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_10_write_1__SEL_2:
	rg_dirty_10_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_10_D_IN = 4'd0;
    default: rg_dirty_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_10_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd10 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_10_wget ;

  // register rg_dirty_11
  always@(MUX_rg_valid_11_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_11_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_11_write_1__SEL_1:
	rg_dirty_11_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_11_write_1__SEL_2:
	rg_dirty_11_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_11_D_IN = 4'd0;
    default: rg_dirty_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_11_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd11 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_11_wget ;

  // register rg_dirty_12
  always@(MUX_rg_valid_12_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_12_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_12_write_1__SEL_1:
	rg_dirty_12_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_12_write_1__SEL_2:
	rg_dirty_12_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_12_D_IN = 4'd0;
    default: rg_dirty_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_12_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd12 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_12_wget ;

  // register rg_dirty_13
  always@(MUX_rg_valid_13_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_13_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_13_write_1__SEL_1:
	rg_dirty_13_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_13_write_1__SEL_2:
	rg_dirty_13_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_13_D_IN = 4'd0;
    default: rg_dirty_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_13_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd13 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_13_wget ;

  // register rg_dirty_14
  always@(MUX_rg_valid_14_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_14_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_14_write_1__SEL_1:
	rg_dirty_14_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_14_write_1__SEL_2:
	rg_dirty_14_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_14_D_IN = 4'd0;
    default: rg_dirty_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_14_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd14 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_14_wget ;

  // register rg_dirty_15
  always@(MUX_rg_valid_15_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_15_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_15_write_1__SEL_1:
	rg_dirty_15_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_15_write_1__SEL_2:
	rg_dirty_15_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_15_D_IN = 4'd0;
    default: rg_dirty_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_15_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd15 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_15_wget ;

  // register rg_dirty_16
  always@(MUX_rg_valid_16_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_16_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_16_write_1__SEL_1:
	rg_dirty_16_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_16_write_1__SEL_2:
	rg_dirty_16_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_16_D_IN = 4'd0;
    default: rg_dirty_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_16_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd16 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_16_wget ;

  // register rg_dirty_17
  always@(MUX_rg_valid_17_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_17_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_17_write_1__SEL_1:
	rg_dirty_17_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_17_write_1__SEL_2:
	rg_dirty_17_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_17_D_IN = 4'd0;
    default: rg_dirty_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_17_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd17 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_17_wget ;

  // register rg_dirty_18
  always@(MUX_rg_valid_18_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_18_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_18_write_1__SEL_1:
	rg_dirty_18_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_18_write_1__SEL_2:
	rg_dirty_18_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_18_D_IN = 4'd0;
    default: rg_dirty_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_18_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd18 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_18_wget ;

  // register rg_dirty_19
  always@(MUX_rg_valid_19_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_19_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_19_write_1__SEL_1:
	rg_dirty_19_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_19_write_1__SEL_2:
	rg_dirty_19_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_19_D_IN = 4'd0;
    default: rg_dirty_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_19_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd19 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_19_wget ;

  // register rg_dirty_2
  always@(MUX_rg_valid_2_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_2_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_2_write_1__SEL_1:
	rg_dirty_2_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_2_write_1__SEL_2:
	rg_dirty_2_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_2_D_IN = 4'd0;
    default: rg_dirty_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_2_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_2_wget ;

  // register rg_dirty_20
  always@(MUX_rg_valid_20_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_20_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_20_write_1__SEL_1:
	rg_dirty_20_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_20_write_1__SEL_2:
	rg_dirty_20_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_20_D_IN = 4'd0;
    default: rg_dirty_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_20_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd20 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_20_wget ;

  // register rg_dirty_21
  always@(MUX_rg_valid_21_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_21_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_21_write_1__SEL_1:
	rg_dirty_21_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_21_write_1__SEL_2:
	rg_dirty_21_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_21_D_IN = 4'd0;
    default: rg_dirty_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_21_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd21 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_21_wget ;

  // register rg_dirty_22
  always@(MUX_rg_valid_22_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_22_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_22_write_1__SEL_1:
	rg_dirty_22_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_22_write_1__SEL_2:
	rg_dirty_22_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_22_D_IN = 4'd0;
    default: rg_dirty_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_22_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd22 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_22_wget ;

  // register rg_dirty_23
  always@(MUX_rg_valid_23_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_23_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_23_write_1__SEL_1:
	rg_dirty_23_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_23_write_1__SEL_2:
	rg_dirty_23_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_23_D_IN = 4'd0;
    default: rg_dirty_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_23_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd23 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_23_wget ;

  // register rg_dirty_24
  always@(MUX_rg_valid_24_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_24_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_24_write_1__SEL_1:
	rg_dirty_24_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_24_write_1__SEL_2:
	rg_dirty_24_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_24_D_IN = 4'd0;
    default: rg_dirty_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_24_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd24 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_24_wget ;

  // register rg_dirty_25
  always@(MUX_rg_valid_25_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_25_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_25_write_1__SEL_1:
	rg_dirty_25_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_25_write_1__SEL_2:
	rg_dirty_25_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_25_D_IN = 4'd0;
    default: rg_dirty_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_25_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd25 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_25_wget ;

  // register rg_dirty_26
  always@(MUX_rg_valid_26_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_26_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_26_write_1__SEL_1:
	rg_dirty_26_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_26_write_1__SEL_2:
	rg_dirty_26_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_26_D_IN = 4'd0;
    default: rg_dirty_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_26_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd26 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_26_wget ;

  // register rg_dirty_27
  always@(MUX_rg_valid_27_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_27_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_27_write_1__SEL_1:
	rg_dirty_27_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_27_write_1__SEL_2:
	rg_dirty_27_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_27_D_IN = 4'd0;
    default: rg_dirty_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_27_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd27 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_27_wget ;

  // register rg_dirty_28
  always@(MUX_rg_valid_28_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_28_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_28_write_1__SEL_1:
	rg_dirty_28_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_28_write_1__SEL_2:
	rg_dirty_28_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_28_D_IN = 4'd0;
    default: rg_dirty_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_28_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd28 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_28_wget ;

  // register rg_dirty_29
  always@(MUX_rg_valid_29_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_29_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_29_write_1__SEL_1:
	rg_dirty_29_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_29_write_1__SEL_2:
	rg_dirty_29_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_29_D_IN = 4'd0;
    default: rg_dirty_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_29_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd29 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_29_wget ;

  // register rg_dirty_3
  always@(MUX_rg_valid_3_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_3_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_3_write_1__SEL_1:
	rg_dirty_3_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_3_write_1__SEL_2:
	rg_dirty_3_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_3_D_IN = 4'd0;
    default: rg_dirty_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_3_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_3_wget ;

  // register rg_dirty_30
  always@(MUX_rg_valid_30_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_30_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_30_write_1__SEL_1:
	rg_dirty_30_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_30_write_1__SEL_2:
	rg_dirty_30_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_30_D_IN = 4'd0;
    default: rg_dirty_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_30_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd30 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_30_wget ;

  // register rg_dirty_31
  always@(MUX_rg_valid_31_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_31_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_31_write_1__SEL_1:
	rg_dirty_31_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_31_write_1__SEL_2:
	rg_dirty_31_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_31_D_IN = 4'd0;
    default: rg_dirty_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_31_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd31 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_31_wget ;

  // register rg_dirty_32
  always@(MUX_rg_valid_32_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_32_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_32_write_1__SEL_1:
	rg_dirty_32_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_32_write_1__SEL_2:
	rg_dirty_32_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_32_D_IN = 4'd0;
    default: rg_dirty_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_32_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd32 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_32_wget ;

  // register rg_dirty_33
  always@(MUX_rg_valid_33_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_33_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_33_write_1__SEL_1:
	rg_dirty_33_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_33_write_1__SEL_2:
	rg_dirty_33_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_33_D_IN = 4'd0;
    default: rg_dirty_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_33_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd33 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_33_wget ;

  // register rg_dirty_34
  always@(MUX_rg_valid_34_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_34_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_34_write_1__SEL_1:
	rg_dirty_34_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_34_write_1__SEL_2:
	rg_dirty_34_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_34_D_IN = 4'd0;
    default: rg_dirty_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_34_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd34 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_34_wget ;

  // register rg_dirty_35
  always@(MUX_rg_valid_35_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_35_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_35_write_1__SEL_1:
	rg_dirty_35_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_35_write_1__SEL_2:
	rg_dirty_35_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_35_D_IN = 4'd0;
    default: rg_dirty_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_35_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd35 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_35_wget ;

  // register rg_dirty_36
  always@(MUX_rg_valid_36_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_36_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_36_write_1__SEL_1:
	rg_dirty_36_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_36_write_1__SEL_2:
	rg_dirty_36_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_36_D_IN = 4'd0;
    default: rg_dirty_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_36_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd36 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_36_wget ;

  // register rg_dirty_37
  always@(MUX_rg_valid_37_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_37_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_37_write_1__SEL_1:
	rg_dirty_37_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_37_write_1__SEL_2:
	rg_dirty_37_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_37_D_IN = 4'd0;
    default: rg_dirty_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_37_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd37 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_37_wget ;

  // register rg_dirty_38
  always@(MUX_rg_valid_38_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_38_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_38_write_1__SEL_1:
	rg_dirty_38_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_38_write_1__SEL_2:
	rg_dirty_38_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_38_D_IN = 4'd0;
    default: rg_dirty_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_38_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd38 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_38_wget ;

  // register rg_dirty_39
  always@(MUX_rg_valid_39_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_39_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_39_write_1__SEL_1:
	rg_dirty_39_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_39_write_1__SEL_2:
	rg_dirty_39_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_39_D_IN = 4'd0;
    default: rg_dirty_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_39_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd39 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_39_wget ;

  // register rg_dirty_4
  always@(MUX_rg_valid_4_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_4_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_4_write_1__SEL_1:
	rg_dirty_4_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_4_write_1__SEL_2:
	rg_dirty_4_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_4_D_IN = 4'd0;
    default: rg_dirty_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_4_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_4_wget ;

  // register rg_dirty_40
  always@(MUX_rg_valid_40_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_40_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_40_write_1__SEL_1:
	rg_dirty_40_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_40_write_1__SEL_2:
	rg_dirty_40_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_40_D_IN = 4'd0;
    default: rg_dirty_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_40_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd40 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_40_wget ;

  // register rg_dirty_41
  always@(MUX_rg_valid_41_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_41_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_41_write_1__SEL_1:
	rg_dirty_41_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_41_write_1__SEL_2:
	rg_dirty_41_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_41_D_IN = 4'd0;
    default: rg_dirty_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_41_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd41 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_41_wget ;

  // register rg_dirty_42
  always@(MUX_rg_valid_42_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_42_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_42_write_1__SEL_1:
	rg_dirty_42_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_42_write_1__SEL_2:
	rg_dirty_42_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_42_D_IN = 4'd0;
    default: rg_dirty_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_42_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd42 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_42_wget ;

  // register rg_dirty_43
  always@(MUX_rg_valid_43_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_43_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_43_write_1__SEL_1:
	rg_dirty_43_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_43_write_1__SEL_2:
	rg_dirty_43_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_43_D_IN = 4'd0;
    default: rg_dirty_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_43_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd43 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_43_wget ;

  // register rg_dirty_44
  always@(MUX_rg_valid_44_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_44_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_44_write_1__SEL_1:
	rg_dirty_44_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_44_write_1__SEL_2:
	rg_dirty_44_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_44_D_IN = 4'd0;
    default: rg_dirty_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_44_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd44 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_44_wget ;

  // register rg_dirty_45
  always@(MUX_rg_valid_45_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_45_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_45_write_1__SEL_1:
	rg_dirty_45_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_45_write_1__SEL_2:
	rg_dirty_45_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_45_D_IN = 4'd0;
    default: rg_dirty_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_45_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd45 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_45_wget ;

  // register rg_dirty_46
  always@(MUX_rg_valid_46_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_46_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_46_write_1__SEL_1:
	rg_dirty_46_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_46_write_1__SEL_2:
	rg_dirty_46_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_46_D_IN = 4'd0;
    default: rg_dirty_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_46_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd46 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_46_wget ;

  // register rg_dirty_47
  always@(MUX_rg_valid_47_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_47_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_47_write_1__SEL_1:
	rg_dirty_47_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_47_write_1__SEL_2:
	rg_dirty_47_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_47_D_IN = 4'd0;
    default: rg_dirty_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_47_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd47 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_47_wget ;

  // register rg_dirty_48
  always@(MUX_rg_valid_48_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_48_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_48_write_1__SEL_1:
	rg_dirty_48_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_48_write_1__SEL_2:
	rg_dirty_48_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_48_D_IN = 4'd0;
    default: rg_dirty_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_48_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd48 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_48_wget ;

  // register rg_dirty_49
  always@(MUX_rg_valid_49_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_49_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_49_write_1__SEL_1:
	rg_dirty_49_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_49_write_1__SEL_2:
	rg_dirty_49_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_49_D_IN = 4'd0;
    default: rg_dirty_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_49_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd49 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_49_wget ;

  // register rg_dirty_5
  always@(MUX_rg_valid_5_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_5_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_5_write_1__SEL_1:
	rg_dirty_5_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_5_write_1__SEL_2:
	rg_dirty_5_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_5_D_IN = 4'd0;
    default: rg_dirty_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_5_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_5_wget ;

  // register rg_dirty_50
  always@(MUX_rg_valid_50_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_50_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_50_write_1__SEL_1:
	rg_dirty_50_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_50_write_1__SEL_2:
	rg_dirty_50_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_50_D_IN = 4'd0;
    default: rg_dirty_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_50_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd50 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_50_wget ;

  // register rg_dirty_51
  always@(MUX_rg_valid_51_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_51_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_51_write_1__SEL_1:
	rg_dirty_51_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_51_write_1__SEL_2:
	rg_dirty_51_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_51_D_IN = 4'd0;
    default: rg_dirty_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_51_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd51 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_51_wget ;

  // register rg_dirty_52
  always@(MUX_rg_valid_52_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_52_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_52_write_1__SEL_1:
	rg_dirty_52_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_52_write_1__SEL_2:
	rg_dirty_52_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_52_D_IN = 4'd0;
    default: rg_dirty_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_52_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd52 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_52_wget ;

  // register rg_dirty_53
  always@(MUX_rg_valid_53_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_53_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_53_write_1__SEL_1:
	rg_dirty_53_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_53_write_1__SEL_2:
	rg_dirty_53_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_53_D_IN = 4'd0;
    default: rg_dirty_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_53_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd53 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_53_wget ;

  // register rg_dirty_54
  always@(MUX_rg_valid_54_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_54_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_54_write_1__SEL_1:
	rg_dirty_54_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_54_write_1__SEL_2:
	rg_dirty_54_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_54_D_IN = 4'd0;
    default: rg_dirty_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_54_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd54 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_54_wget ;

  // register rg_dirty_55
  always@(MUX_rg_valid_55_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_55_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_55_write_1__SEL_1:
	rg_dirty_55_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_55_write_1__SEL_2:
	rg_dirty_55_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_55_D_IN = 4'd0;
    default: rg_dirty_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_55_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd55 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_55_wget ;

  // register rg_dirty_56
  always@(MUX_rg_valid_56_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_56_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_56_write_1__SEL_1:
	rg_dirty_56_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_56_write_1__SEL_2:
	rg_dirty_56_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_56_D_IN = 4'd0;
    default: rg_dirty_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_56_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd56 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_56_wget ;

  // register rg_dirty_57
  always@(MUX_rg_valid_57_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_57_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_57_write_1__SEL_1:
	rg_dirty_57_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_57_write_1__SEL_2:
	rg_dirty_57_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_57_D_IN = 4'd0;
    default: rg_dirty_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_57_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd57 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_57_wget ;

  // register rg_dirty_58
  always@(MUX_rg_valid_58_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_58_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_58_write_1__SEL_1:
	rg_dirty_58_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_58_write_1__SEL_2:
	rg_dirty_58_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_58_D_IN = 4'd0;
    default: rg_dirty_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_58_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd58 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_58_wget ;

  // register rg_dirty_59
  always@(MUX_rg_valid_59_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_59_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_59_write_1__SEL_1:
	rg_dirty_59_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_59_write_1__SEL_2:
	rg_dirty_59_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_59_D_IN = 4'd0;
    default: rg_dirty_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_59_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd59 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_59_wget ;

  // register rg_dirty_6
  always@(MUX_rg_valid_6_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_6_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_6_write_1__SEL_1:
	rg_dirty_6_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_6_write_1__SEL_2:
	rg_dirty_6_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_6_D_IN = 4'd0;
    default: rg_dirty_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_6_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_6_wget ;

  // register rg_dirty_60
  always@(MUX_rg_valid_60_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_60_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_60_write_1__SEL_1:
	rg_dirty_60_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_60_write_1__SEL_2:
	rg_dirty_60_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_60_D_IN = 4'd0;
    default: rg_dirty_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_60_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd60 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_60_wget ;

  // register rg_dirty_61
  always@(MUX_rg_valid_61_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_61_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_61_write_1__SEL_1:
	rg_dirty_61_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_61_write_1__SEL_2:
	rg_dirty_61_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_61_D_IN = 4'd0;
    default: rg_dirty_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_61_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd61 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_61_wget ;

  // register rg_dirty_62
  always@(MUX_rg_valid_62_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_62_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_62_write_1__SEL_1:
	rg_dirty_62_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_62_write_1__SEL_2:
	rg_dirty_62_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_62_D_IN = 4'd0;
    default: rg_dirty_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_62_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd62 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_62_wget ;

  // register rg_dirty_63
  always@(MUX_rg_valid_63_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_63_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_63_write_1__SEL_1:
	rg_dirty_63_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_63_write_1__SEL_2:
	rg_dirty_63_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_63_D_IN = 4'd0;
    default: rg_dirty_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_63_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd63 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_63_wget ;

  // register rg_dirty_7
  always@(MUX_rg_valid_7_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_7_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_7_write_1__SEL_1:
	rg_dirty_7_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_7_write_1__SEL_2:
	rg_dirty_7_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_7_D_IN = 4'd0;
    default: rg_dirty_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_7_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_7_wget ;

  // register rg_dirty_8
  always@(MUX_rg_valid_8_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_8_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_8_write_1__SEL_1:
	rg_dirty_8_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_8_write_1__SEL_2:
	rg_dirty_8_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_8_D_IN = 4'd0;
    default: rg_dirty_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_8_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd8 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_8_wget ;

  // register rg_dirty_9
  always@(MUX_rg_valid_9_write_1__SEL_1 or
	  MUX_rg_dirty_0_write_1__VAL_1 or
	  MUX_rg_valid_9_write_1__SEL_2 or
	  MUX_rg_dirty_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_9_write_1__SEL_1:
	rg_dirty_9_D_IN = MUX_rg_dirty_0_write_1__VAL_1;
    MUX_rg_valid_9_write_1__SEL_2:
	rg_dirty_9_D_IN = MUX_rg_dirty_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_dirty_9_D_IN = 4'd0;
    default: rg_dirty_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_dirty_9_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd9 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_9_wget ;

  // register rg_fbfillenable
  assign rg_fbfillenable_D_IN =
	     { _theResult_____6__h311237[6:0],
	       _theResult_____6__h311237[7] } ;
  assign rg_fbfillenable_EN = CAN_FIRE_RL_update_fb_with_memory_response ;

  // register rg_fbmissallocate
  assign rg_fbmissallocate_D_IN =
	     MUX_rg_fbmissallocate_write_1__SEL_1 ?
	       MUX_rg_fbmissallocate_write_1__VAL_1 :
	       MUX_rg_fbmissallocate_write_1__VAL_1 ;
  assign rg_fbmissallocate_EN =
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;

  // register rg_fbwriteback
  assign rg_fbwriteback_D_IN = rg_fbwriteback + 3'd1 ;
  assign rg_fbwriteback_EN =
	     WILL_FIRE_RL_release_from_FB &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone ||
	      !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707) ;

  // register rg_fence_pending
  assign rg_fence_pending_D_IN = MUX_ff_write_mem_request_enq_1__SEL_1 ;
  assign rg_fence_pending_EN =
	     WILL_FIRE_RL_fence_operation && !rg_fenceinit &&
	     rg_globaldirty &&
	     dirty_and_valid__h27063 ||
	     WILL_FIRE_RL_receive_memory_response ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_rg_fence_stall_write_1__SEL_1 && core_req_put[76] ;
  assign rg_fence_stall_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     EN_core_req_put ;

  // register rg_fenceinit
  assign rg_fenceinit_D_IN = _deq_RL_fence_operation_EN_ff_core_request_wget ;
  assign rg_fenceinit_EN = CAN_FIRE_RL_fence_operation ;

  // register rg_globaldirty
  assign rg_globaldirty_D_IN = MUX_rg_globaldirty_write_1__SEL_1 ;
  assign rg_globaldirty_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0 ||
	      IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	      2'd0) ;

  // register rg_latest_index
  assign rg_latest_index_D_IN = core_req_put[88:83] ;
  assign rg_latest_index_EN = EN_core_req_put ;

  // register rg_miss_ongoing
  assign rg_miss_ongoing_D_IN = MUX_rg_miss_ongoing_write_1__SEL_1 ;
  assign rg_miss_ongoing_EN =
	     MUX_rg_miss_ongoing_write_1__SEL_1 ||
	     WILL_FIRE_RL_respond_to_core ;

  // register rg_polling
  assign rg_polling_D_IN =
	     fbhit__h292477 != 8'd0 &&
	     IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1602 ;
  assign rg_polling_EN = CAN_FIRE_RL_check_fb_for_corerequest ;

  // register rg_readdone
  assign rg_readdone_D_IN = rg_readdone_1_whas ;
  assign rg_readdone_EN = 1'd1 ;

  // register rg_replaylatest
  assign rg_replaylatest_D_IN = MUX_rg_replaylatest_write_1__SEL_1 ;
  assign rg_replaylatest_EN =
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_replaylatest_wget ||
	     rg_replaylatest ;

  // register rg_set_select
  assign rg_set_select_D_IN = v__h28131[5:0] ;
  assign rg_set_select_EN =
	     WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty ;

  // register rg_storehead
  assign rg_storehead_D_IN = rg_storehead + 1'd1 ;
  assign rg_storehead_EN = EN_perform_store ;

  // register rg_storetail
  assign rg_storetail_D_IN = rg_storetail + 1'd1 ;
  assign rg_storetail_EN = CAN_FIRE_RL_allocate_storebuffer ;

  // register rg_valid_0
  always@(MUX_rg_valid_0_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_0_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_0_write_1__SEL_1:
	rg_valid_0_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_0_write_1__SEL_2:
	rg_valid_0_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_0_D_IN = 4'd0;
    default: rg_valid_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_0_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_0_wget ;

  // register rg_valid_1
  always@(MUX_rg_valid_1_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_1_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_1_write_1__SEL_1:
	rg_valid_1_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_1_write_1__SEL_2:
	rg_valid_1_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_1_D_IN = 4'd0;
    default: rg_valid_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_1_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_1_wget ;

  // register rg_valid_10
  always@(MUX_rg_valid_10_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_10_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_10_write_1__SEL_1:
	rg_valid_10_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_10_write_1__SEL_2:
	rg_valid_10_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_10_D_IN = 4'd0;
    default: rg_valid_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_10_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd10 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_10_wget ;

  // register rg_valid_11
  always@(MUX_rg_valid_11_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_11_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_11_write_1__SEL_1:
	rg_valid_11_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_11_write_1__SEL_2:
	rg_valid_11_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_11_D_IN = 4'd0;
    default: rg_valid_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_11_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd11 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_11_wget ;

  // register rg_valid_12
  always@(MUX_rg_valid_12_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_12_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_12_write_1__SEL_1:
	rg_valid_12_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_12_write_1__SEL_2:
	rg_valid_12_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_12_D_IN = 4'd0;
    default: rg_valid_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_12_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd12 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_12_wget ;

  // register rg_valid_13
  always@(MUX_rg_valid_13_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_13_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_13_write_1__SEL_1:
	rg_valid_13_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_13_write_1__SEL_2:
	rg_valid_13_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_13_D_IN = 4'd0;
    default: rg_valid_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_13_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd13 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_13_wget ;

  // register rg_valid_14
  always@(MUX_rg_valid_14_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_14_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_14_write_1__SEL_1:
	rg_valid_14_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_14_write_1__SEL_2:
	rg_valid_14_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_14_D_IN = 4'd0;
    default: rg_valid_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_14_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd14 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_14_wget ;

  // register rg_valid_15
  always@(MUX_rg_valid_15_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_15_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_15_write_1__SEL_1:
	rg_valid_15_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_15_write_1__SEL_2:
	rg_valid_15_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_15_D_IN = 4'd0;
    default: rg_valid_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_15_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd15 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_15_wget ;

  // register rg_valid_16
  always@(MUX_rg_valid_16_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_16_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_16_write_1__SEL_1:
	rg_valid_16_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_16_write_1__SEL_2:
	rg_valid_16_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_16_D_IN = 4'd0;
    default: rg_valid_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_16_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd16 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_16_wget ;

  // register rg_valid_17
  always@(MUX_rg_valid_17_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_17_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_17_write_1__SEL_1:
	rg_valid_17_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_17_write_1__SEL_2:
	rg_valid_17_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_17_D_IN = 4'd0;
    default: rg_valid_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_17_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd17 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_17_wget ;

  // register rg_valid_18
  always@(MUX_rg_valid_18_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_18_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_18_write_1__SEL_1:
	rg_valid_18_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_18_write_1__SEL_2:
	rg_valid_18_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_18_D_IN = 4'd0;
    default: rg_valid_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_18_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd18 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_18_wget ;

  // register rg_valid_19
  always@(MUX_rg_valid_19_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_19_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_19_write_1__SEL_1:
	rg_valid_19_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_19_write_1__SEL_2:
	rg_valid_19_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_19_D_IN = 4'd0;
    default: rg_valid_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_19_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd19 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_19_wget ;

  // register rg_valid_2
  always@(MUX_rg_valid_2_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_2_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_2_write_1__SEL_1:
	rg_valid_2_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_2_write_1__SEL_2:
	rg_valid_2_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_2_D_IN = 4'd0;
    default: rg_valid_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_2_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_2_wget ;

  // register rg_valid_20
  always@(MUX_rg_valid_20_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_20_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_20_write_1__SEL_1:
	rg_valid_20_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_20_write_1__SEL_2:
	rg_valid_20_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_20_D_IN = 4'd0;
    default: rg_valid_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_20_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd20 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_20_wget ;

  // register rg_valid_21
  always@(MUX_rg_valid_21_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_21_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_21_write_1__SEL_1:
	rg_valid_21_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_21_write_1__SEL_2:
	rg_valid_21_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_21_D_IN = 4'd0;
    default: rg_valid_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_21_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd21 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_21_wget ;

  // register rg_valid_22
  always@(MUX_rg_valid_22_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_22_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_22_write_1__SEL_1:
	rg_valid_22_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_22_write_1__SEL_2:
	rg_valid_22_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_22_D_IN = 4'd0;
    default: rg_valid_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_22_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd22 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_22_wget ;

  // register rg_valid_23
  always@(MUX_rg_valid_23_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_23_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_23_write_1__SEL_1:
	rg_valid_23_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_23_write_1__SEL_2:
	rg_valid_23_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_23_D_IN = 4'd0;
    default: rg_valid_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_23_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd23 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_23_wget ;

  // register rg_valid_24
  always@(MUX_rg_valid_24_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_24_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_24_write_1__SEL_1:
	rg_valid_24_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_24_write_1__SEL_2:
	rg_valid_24_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_24_D_IN = 4'd0;
    default: rg_valid_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_24_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd24 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_24_wget ;

  // register rg_valid_25
  always@(MUX_rg_valid_25_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_25_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_25_write_1__SEL_1:
	rg_valid_25_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_25_write_1__SEL_2:
	rg_valid_25_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_25_D_IN = 4'd0;
    default: rg_valid_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_25_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd25 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_25_wget ;

  // register rg_valid_26
  always@(MUX_rg_valid_26_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_26_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_26_write_1__SEL_1:
	rg_valid_26_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_26_write_1__SEL_2:
	rg_valid_26_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_26_D_IN = 4'd0;
    default: rg_valid_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_26_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd26 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_26_wget ;

  // register rg_valid_27
  always@(MUX_rg_valid_27_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_27_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_27_write_1__SEL_1:
	rg_valid_27_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_27_write_1__SEL_2:
	rg_valid_27_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_27_D_IN = 4'd0;
    default: rg_valid_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_27_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd27 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_27_wget ;

  // register rg_valid_28
  always@(MUX_rg_valid_28_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_28_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_28_write_1__SEL_1:
	rg_valid_28_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_28_write_1__SEL_2:
	rg_valid_28_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_28_D_IN = 4'd0;
    default: rg_valid_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_28_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd28 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_28_wget ;

  // register rg_valid_29
  always@(MUX_rg_valid_29_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_29_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_29_write_1__SEL_1:
	rg_valid_29_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_29_write_1__SEL_2:
	rg_valid_29_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_29_D_IN = 4'd0;
    default: rg_valid_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_29_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd29 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_29_wget ;

  // register rg_valid_3
  always@(MUX_rg_valid_3_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_3_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_3_write_1__SEL_1:
	rg_valid_3_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_3_write_1__SEL_2:
	rg_valid_3_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_3_D_IN = 4'd0;
    default: rg_valid_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_3_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_3_wget ;

  // register rg_valid_30
  always@(MUX_rg_valid_30_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_30_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_30_write_1__SEL_1:
	rg_valid_30_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_30_write_1__SEL_2:
	rg_valid_30_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_30_D_IN = 4'd0;
    default: rg_valid_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_30_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd30 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_30_wget ;

  // register rg_valid_31
  always@(MUX_rg_valid_31_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_31_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_31_write_1__SEL_1:
	rg_valid_31_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_31_write_1__SEL_2:
	rg_valid_31_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_31_D_IN = 4'd0;
    default: rg_valid_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_31_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd31 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_31_wget ;

  // register rg_valid_32
  always@(MUX_rg_valid_32_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_32_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_32_write_1__SEL_1:
	rg_valid_32_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_32_write_1__SEL_2:
	rg_valid_32_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_32_D_IN = 4'd0;
    default: rg_valid_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_32_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd32 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_32_wget ;

  // register rg_valid_33
  always@(MUX_rg_valid_33_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_33_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_33_write_1__SEL_1:
	rg_valid_33_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_33_write_1__SEL_2:
	rg_valid_33_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_33_D_IN = 4'd0;
    default: rg_valid_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_33_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd33 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_33_wget ;

  // register rg_valid_34
  always@(MUX_rg_valid_34_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_34_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_34_write_1__SEL_1:
	rg_valid_34_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_34_write_1__SEL_2:
	rg_valid_34_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_34_D_IN = 4'd0;
    default: rg_valid_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_34_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd34 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_34_wget ;

  // register rg_valid_35
  always@(MUX_rg_valid_35_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_35_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_35_write_1__SEL_1:
	rg_valid_35_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_35_write_1__SEL_2:
	rg_valid_35_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_35_D_IN = 4'd0;
    default: rg_valid_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_35_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd35 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_35_wget ;

  // register rg_valid_36
  always@(MUX_rg_valid_36_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_36_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_36_write_1__SEL_1:
	rg_valid_36_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_36_write_1__SEL_2:
	rg_valid_36_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_36_D_IN = 4'd0;
    default: rg_valid_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_36_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd36 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_36_wget ;

  // register rg_valid_37
  always@(MUX_rg_valid_37_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_37_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_37_write_1__SEL_1:
	rg_valid_37_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_37_write_1__SEL_2:
	rg_valid_37_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_37_D_IN = 4'd0;
    default: rg_valid_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_37_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd37 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_37_wget ;

  // register rg_valid_38
  always@(MUX_rg_valid_38_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_38_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_38_write_1__SEL_1:
	rg_valid_38_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_38_write_1__SEL_2:
	rg_valid_38_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_38_D_IN = 4'd0;
    default: rg_valid_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_38_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd38 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_38_wget ;

  // register rg_valid_39
  always@(MUX_rg_valid_39_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_39_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_39_write_1__SEL_1:
	rg_valid_39_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_39_write_1__SEL_2:
	rg_valid_39_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_39_D_IN = 4'd0;
    default: rg_valid_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_39_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd39 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_39_wget ;

  // register rg_valid_4
  always@(MUX_rg_valid_4_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_4_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_4_write_1__SEL_1:
	rg_valid_4_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_4_write_1__SEL_2:
	rg_valid_4_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_4_D_IN = 4'd0;
    default: rg_valid_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_4_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_4_wget ;

  // register rg_valid_40
  always@(MUX_rg_valid_40_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_40_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_40_write_1__SEL_1:
	rg_valid_40_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_40_write_1__SEL_2:
	rg_valid_40_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_40_D_IN = 4'd0;
    default: rg_valid_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_40_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd40 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_40_wget ;

  // register rg_valid_41
  always@(MUX_rg_valid_41_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_41_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_41_write_1__SEL_1:
	rg_valid_41_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_41_write_1__SEL_2:
	rg_valid_41_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_41_D_IN = 4'd0;
    default: rg_valid_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_41_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd41 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_41_wget ;

  // register rg_valid_42
  always@(MUX_rg_valid_42_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_42_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_42_write_1__SEL_1:
	rg_valid_42_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_42_write_1__SEL_2:
	rg_valid_42_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_42_D_IN = 4'd0;
    default: rg_valid_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_42_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd42 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_42_wget ;

  // register rg_valid_43
  always@(MUX_rg_valid_43_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_43_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_43_write_1__SEL_1:
	rg_valid_43_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_43_write_1__SEL_2:
	rg_valid_43_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_43_D_IN = 4'd0;
    default: rg_valid_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_43_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd43 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_43_wget ;

  // register rg_valid_44
  always@(MUX_rg_valid_44_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_44_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_44_write_1__SEL_1:
	rg_valid_44_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_44_write_1__SEL_2:
	rg_valid_44_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_44_D_IN = 4'd0;
    default: rg_valid_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_44_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd44 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_44_wget ;

  // register rg_valid_45
  always@(MUX_rg_valid_45_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_45_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_45_write_1__SEL_1:
	rg_valid_45_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_45_write_1__SEL_2:
	rg_valid_45_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_45_D_IN = 4'd0;
    default: rg_valid_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_45_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd45 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_45_wget ;

  // register rg_valid_46
  always@(MUX_rg_valid_46_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_46_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_46_write_1__SEL_1:
	rg_valid_46_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_46_write_1__SEL_2:
	rg_valid_46_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_46_D_IN = 4'd0;
    default: rg_valid_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_46_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd46 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_46_wget ;

  // register rg_valid_47
  always@(MUX_rg_valid_47_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_47_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_47_write_1__SEL_1:
	rg_valid_47_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_47_write_1__SEL_2:
	rg_valid_47_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_47_D_IN = 4'd0;
    default: rg_valid_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_47_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd47 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_47_wget ;

  // register rg_valid_48
  always@(MUX_rg_valid_48_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_48_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_48_write_1__SEL_1:
	rg_valid_48_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_48_write_1__SEL_2:
	rg_valid_48_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_48_D_IN = 4'd0;
    default: rg_valid_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_48_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd48 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_48_wget ;

  // register rg_valid_49
  always@(MUX_rg_valid_49_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_49_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_49_write_1__SEL_1:
	rg_valid_49_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_49_write_1__SEL_2:
	rg_valid_49_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_49_D_IN = 4'd0;
    default: rg_valid_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_49_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd49 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_49_wget ;

  // register rg_valid_5
  always@(MUX_rg_valid_5_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_5_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_5_write_1__SEL_1:
	rg_valid_5_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_5_write_1__SEL_2:
	rg_valid_5_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_5_D_IN = 4'd0;
    default: rg_valid_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_5_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_5_wget ;

  // register rg_valid_50
  always@(MUX_rg_valid_50_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_50_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_50_write_1__SEL_1:
	rg_valid_50_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_50_write_1__SEL_2:
	rg_valid_50_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_50_D_IN = 4'd0;
    default: rg_valid_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_50_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd50 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_50_wget ;

  // register rg_valid_51
  always@(MUX_rg_valid_51_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_51_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_51_write_1__SEL_1:
	rg_valid_51_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_51_write_1__SEL_2:
	rg_valid_51_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_51_D_IN = 4'd0;
    default: rg_valid_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_51_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd51 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_51_wget ;

  // register rg_valid_52
  always@(MUX_rg_valid_52_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_52_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_52_write_1__SEL_1:
	rg_valid_52_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_52_write_1__SEL_2:
	rg_valid_52_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_52_D_IN = 4'd0;
    default: rg_valid_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_52_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd52 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_52_wget ;

  // register rg_valid_53
  always@(MUX_rg_valid_53_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_53_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_53_write_1__SEL_1:
	rg_valid_53_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_53_write_1__SEL_2:
	rg_valid_53_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_53_D_IN = 4'd0;
    default: rg_valid_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_53_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd53 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_53_wget ;

  // register rg_valid_54
  always@(MUX_rg_valid_54_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_54_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_54_write_1__SEL_1:
	rg_valid_54_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_54_write_1__SEL_2:
	rg_valid_54_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_54_D_IN = 4'd0;
    default: rg_valid_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_54_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd54 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_54_wget ;

  // register rg_valid_55
  always@(MUX_rg_valid_55_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_55_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_55_write_1__SEL_1:
	rg_valid_55_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_55_write_1__SEL_2:
	rg_valid_55_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_55_D_IN = 4'd0;
    default: rg_valid_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_55_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd55 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_55_wget ;

  // register rg_valid_56
  always@(MUX_rg_valid_56_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_56_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_56_write_1__SEL_1:
	rg_valid_56_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_56_write_1__SEL_2:
	rg_valid_56_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_56_D_IN = 4'd0;
    default: rg_valid_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_56_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd56 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_56_wget ;

  // register rg_valid_57
  always@(MUX_rg_valid_57_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_57_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_57_write_1__SEL_1:
	rg_valid_57_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_57_write_1__SEL_2:
	rg_valid_57_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_57_D_IN = 4'd0;
    default: rg_valid_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_57_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd57 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_57_wget ;

  // register rg_valid_58
  always@(MUX_rg_valid_58_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_58_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_58_write_1__SEL_1:
	rg_valid_58_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_58_write_1__SEL_2:
	rg_valid_58_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_58_D_IN = 4'd0;
    default: rg_valid_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_58_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd58 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_58_wget ;

  // register rg_valid_59
  always@(MUX_rg_valid_59_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_59_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_59_write_1__SEL_1:
	rg_valid_59_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_59_write_1__SEL_2:
	rg_valid_59_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_59_D_IN = 4'd0;
    default: rg_valid_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_59_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd59 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_59_wget ;

  // register rg_valid_6
  always@(MUX_rg_valid_6_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_6_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_6_write_1__SEL_1:
	rg_valid_6_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_6_write_1__SEL_2:
	rg_valid_6_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_6_D_IN = 4'd0;
    default: rg_valid_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_6_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_6_wget ;

  // register rg_valid_60
  always@(MUX_rg_valid_60_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_60_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_60_write_1__SEL_1:
	rg_valid_60_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_60_write_1__SEL_2:
	rg_valid_60_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_60_D_IN = 4'd0;
    default: rg_valid_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_60_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd60 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_60_wget ;

  // register rg_valid_61
  always@(MUX_rg_valid_61_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_61_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_61_write_1__SEL_1:
	rg_valid_61_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_61_write_1__SEL_2:
	rg_valid_61_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_61_D_IN = 4'd0;
    default: rg_valid_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_61_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd61 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_61_wget ;

  // register rg_valid_62
  always@(MUX_rg_valid_62_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_62_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_62_write_1__SEL_1:
	rg_valid_62_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_62_write_1__SEL_2:
	rg_valid_62_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_62_D_IN = 4'd0;
    default: rg_valid_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_62_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd62 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_62_wget ;

  // register rg_valid_63
  always@(MUX_rg_valid_63_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_63_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_63_write_1__SEL_1:
	rg_valid_63_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_63_write_1__SEL_2:
	rg_valid_63_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_63_D_IN = 4'd0;
    default: rg_valid_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_63_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd63 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_63_wget ;

  // register rg_valid_7
  always@(MUX_rg_valid_7_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_7_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_7_write_1__SEL_1:
	rg_valid_7_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_7_write_1__SEL_2:
	rg_valid_7_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_7_D_IN = 4'd0;
    default: rg_valid_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_7_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_7_wget ;

  // register rg_valid_8
  always@(MUX_rg_valid_8_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_8_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_8_write_1__SEL_1:
	rg_valid_8_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_8_write_1__SEL_2:
	rg_valid_8_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_8_D_IN = 4'd0;
    default: rg_valid_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_8_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd8 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_8_wget ;

  // register rg_valid_9
  always@(MUX_rg_valid_9_write_1__SEL_1 or
	  MUX_rg_valid_0_write_1__VAL_1 or
	  MUX_rg_valid_9_write_1__SEL_2 or
	  MUX_rg_valid_0_write_1__VAL_2 or MUX_rg_fence_stall_write_1__SEL_1)
  case (1'b1)
    MUX_rg_valid_9_write_1__SEL_1:
	rg_valid_9_D_IN = MUX_rg_valid_0_write_1__VAL_1;
    MUX_rg_valid_9_write_1__SEL_2:
	rg_valid_9_D_IN = MUX_rg_valid_0_write_1__VAL_2;
    MUX_rg_fence_stall_write_1__SEL_1: rg_valid_9_D_IN = 4'd0;
    default: rg_valid_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign rg_valid_9_EN =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_respond_to_core &&
	     ff_core_request_D_OUT[88:83] == 6'd9 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     WILL_FIRE_RL_release_from_FB &&
	     _write_RL_release_from_FB_EN_rg_valid_9_wget ;

  // register rg_way_select
  assign rg_way_select_D_IN = { rg_way_select[2:0], rg_way_select[3] } ;
  assign rg_way_select_EN =
	     WILL_FIRE_RL_fence_operation && !rg_fenceinit &&
	     rg_globaldirty &&
	     x__h277884 != 4'd0 ;

  // register store_addr_0
  assign store_addr_0_D_IN = ff_from_tlb_rv_port1__read[39:8] ;
  assign store_addr_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_addr_1
  assign store_addr_1_D_IN = ff_from_tlb_rv_port1__read[39:8] ;
  assign store_addr_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_data_0
  assign store_data_0_D_IN = x__h296016 ;
  assign store_data_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_data_1
  assign store_data_1_D_IN = x__h296016 ;
  assign store_data_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_epoch_0
  assign store_epoch_0_D_IN = ff_core_request_D_OUT[75] ;
  assign store_epoch_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_epoch_1
  assign store_epoch_1_D_IN = ff_core_request_D_OUT[75] ;
  assign store_epoch_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_fbindex_0
  assign store_fbindex_0_D_IN = fbindex__h295994 ;
  assign store_fbindex_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_fbindex_1
  assign store_fbindex_1_D_IN = fbindex__h295994 ;
  assign store_fbindex_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_io_0
  assign store_io_0_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	     2'd0 ;
  assign store_io_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_io_1
  assign store_io_1_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	     2'd0 ;
  assign store_io_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_size_0
  assign store_size_0_D_IN = ff_core_request_D_OUT[71:70] ;
  assign store_size_0_EN = MUX_store_valid_0_1_write_1__SEL_2 ;

  // register store_size_1
  assign store_size_1_D_IN = ff_core_request_D_OUT[71:70] ;
  assign store_size_1_EN = MUX_store_valid_1_1_write_1__SEL_2 ;

  // register store_valid_0
  assign store_valid_0_D_IN = 1'b0 ;
  assign store_valid_0_EN = 1'b0 ;

  // register store_valid_0_1
  assign store_valid_0_1_D_IN = !MUX_store_valid_0_1_write_1__SEL_1 ;
  assign store_valid_0_1_EN =
	     WILL_FIRE_RL_allocate_storebuffer && rg_storetail == 1'd0 ||
	     EN_perform_store && rg_storehead == 1'd0 ;

  // register store_valid_1
  assign store_valid_1_D_IN = 1'b0 ;
  assign store_valid_1_EN = 1'b0 ;

  // register store_valid_1_1
  assign store_valid_1_1_D_IN = !MUX_store_valid_1_1_write_1__SEL_1 ;
  assign store_valid_1_1_EN =
	     WILL_FIRE_RL_allocate_storebuffer && rg_storetail == 1'd1 ||
	     EN_perform_store && rg_storehead == 1'd1 ;

  // register tag_arr_0_rg_output_0
  assign tag_arr_0_rg_output_0_D_IN = tag_arr_0_ram_single_0_douta ;
  assign tag_arr_0_rg_output_0_EN = 1'b1 ;

  // register tag_arr_1_rg_output_0
  assign tag_arr_1_rg_output_0_D_IN = tag_arr_1_ram_single_0_douta ;
  assign tag_arr_1_rg_output_0_EN = 1'b1 ;

  // register tag_arr_2_rg_output_0
  assign tag_arr_2_rg_output_0_D_IN = tag_arr_2_ram_single_0_douta ;
  assign tag_arr_2_rg_output_0_EN = 1'b1 ;

  // register tag_arr_3_rg_output_0
  assign tag_arr_3_rg_output_0_D_IN = tag_arr_3_ram_single_0_douta ;
  assign tag_arr_3_rg_output_0_EN = 1'b1 ;

  // submodule data_arr_0_ram_single_0
  always@(MUX_data_arr_0_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_0_ram_single_0_request_1__SEL_1:
	  data_arr_0_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: data_arr_0_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: data_arr_0_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  data_arr_0_ram_single_0_addra = v__h28117[5:0];
      default: data_arr_0_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_data_arr_0_ram_single_0_request_1__SEL_1 or
	  x3__h277175 or
	  rg_replaylatest or
	  MUX_data_arr_0_ram_single_0_request_3__VAL_2 or
	  EN_core_req_put or WILL_FIRE_RL_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_0_ram_single_0_request_1__SEL_1:
	  data_arr_0_ram_single_0_dina = x3__h277175;
      rg_replaylatest:
	  data_arr_0_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      EN_core_req_put:
	  data_arr_0_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      WILL_FIRE_RL_fence_operation:
	  data_arr_0_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      default: data_arr_0_ram_single_0_dina =
		   512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign data_arr_0_ram_single_0_wea =
	     MUX_data_arr_0_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2723 ;
  assign data_arr_0_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo29 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule data_arr_1_ram_single_0
  always@(MUX_data_arr_1_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_1_ram_single_0_request_1__SEL_1:
	  data_arr_1_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: data_arr_1_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: data_arr_1_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  data_arr_1_ram_single_0_addra = v__h28117[5:0];
      default: data_arr_1_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_data_arr_1_ram_single_0_request_1__SEL_1 or
	  x3__h277175 or
	  rg_replaylatest or
	  MUX_data_arr_0_ram_single_0_request_3__VAL_2 or
	  EN_core_req_put or WILL_FIRE_RL_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_1_ram_single_0_request_1__SEL_1:
	  data_arr_1_ram_single_0_dina = x3__h277175;
      rg_replaylatest:
	  data_arr_1_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      EN_core_req_put:
	  data_arr_1_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      WILL_FIRE_RL_fence_operation:
	  data_arr_1_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      default: data_arr_1_ram_single_0_dina =
		   512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign data_arr_1_ram_single_0_wea =
	     MUX_data_arr_1_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2725 ;
  assign data_arr_1_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo25 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule data_arr_2_ram_single_0
  always@(MUX_data_arr_2_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_2_ram_single_0_request_1__SEL_1:
	  data_arr_2_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: data_arr_2_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: data_arr_2_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  data_arr_2_ram_single_0_addra = v__h28117[5:0];
      default: data_arr_2_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_data_arr_2_ram_single_0_request_1__SEL_1 or
	  x3__h277175 or
	  rg_replaylatest or
	  MUX_data_arr_0_ram_single_0_request_3__VAL_2 or
	  EN_core_req_put or WILL_FIRE_RL_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_2_ram_single_0_request_1__SEL_1:
	  data_arr_2_ram_single_0_dina = x3__h277175;
      rg_replaylatest:
	  data_arr_2_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      EN_core_req_put:
	  data_arr_2_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      WILL_FIRE_RL_fence_operation:
	  data_arr_2_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      default: data_arr_2_ram_single_0_dina =
		   512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign data_arr_2_ram_single_0_wea =
	     MUX_data_arr_2_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2727 ;
  assign data_arr_2_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo21 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule data_arr_3_ram_single_0
  always@(MUX_data_arr_3_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_3_ram_single_0_request_1__SEL_1:
	  data_arr_3_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: data_arr_3_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: data_arr_3_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  data_arr_3_ram_single_0_addra = v__h28117[5:0];
      default: data_arr_3_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(MUX_data_arr_3_ram_single_0_request_1__SEL_1 or
	  x3__h277175 or
	  rg_replaylatest or
	  MUX_data_arr_0_ram_single_0_request_3__VAL_2 or
	  EN_core_req_put or WILL_FIRE_RL_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_data_arr_3_ram_single_0_request_1__SEL_1:
	  data_arr_3_ram_single_0_dina = x3__h277175;
      rg_replaylatest:
	  data_arr_3_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      EN_core_req_put:
	  data_arr_3_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      WILL_FIRE_RL_fence_operation:
	  data_arr_3_ram_single_0_dina =
	      MUX_data_arr_0_ram_single_0_request_3__VAL_2;
      default: data_arr_3_ram_single_0_dina =
		   512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign data_arr_3_ram_single_0_wea =
	     MUX_data_arr_3_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2729 ;
  assign data_arr_3_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo17 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = core_req_put ;
  assign ff_core_request_ENQ = EN_core_req_put ;
  assign ff_core_request_DEQ =
	     WILL_FIRE_RL_fence_operation &&
	     _deq_RL_fence_operation_EN_ff_core_request_wget ||
	     WILL_FIRE_RL_request_to_memory &&
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ||
	     WILL_FIRE_RL_respond_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_fb_fillindex
  assign ff_fb_fillindex_D_IN = rg_fbmissallocate ;
  assign ff_fb_fillindex_ENQ =
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign ff_fb_fillindex_DEQ =
	     WILL_FIRE_RL_update_fb_with_memory_response &&
	     ff_read_mem_response_rv_port1__read[1] ;
  assign ff_fb_fillindex_CLR = 1'b0 ;

  // submodule ff_nc_read_request
  assign ff_nc_read_request_D_IN =
	     { ff_from_tlb_rv_port1__read[39:8],
	       8'd0,
	       ff_core_request_D_OUT[72:70] } ;
  assign ff_nc_read_request_ENQ =
	     WILL_FIRE_RL_request_to_memory &&
	     (!cache_enable_c ||
	      ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	     (ff_core_request_D_OUT[74:73] == 2'd0 ||
	      ff_core_request_D_OUT[74:73] == 2'd2) ;
  assign ff_nc_read_request_DEQ = EN_nc_read_req_get ;
  assign ff_nc_read_request_CLR = 1'b0 ;

  // submodule ff_nc_write_request
  assign ff_nc_write_request_D_IN =
	     { addr__h399391,
	       SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098,
	       9'd0,
	       x__h400003 } ;
  assign ff_nc_write_request_ENQ = wr_total_io_writes_whas ;
  assign ff_nc_write_request_DEQ = EN_nc_write_req_get ;
  assign ff_nc_write_request_CLR = 1'b0 ;

  // submodule ff_read_mem_request
  assign ff_read_mem_request_D_IN = { x_address__h309373, 11'd59 } ;
  assign ff_read_mem_request_ENQ =
	     WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ;
  assign ff_read_mem_request_DEQ = EN_read_mem_req_get ;
  assign ff_read_mem_request_CLR = 1'b0 ;

  // submodule ff_write_mem_request
  assign ff_write_mem_request_D_IN =
	     MUX_ff_write_mem_request_enq_1__SEL_1 ?
	       MUX_ff_write_mem_request_enq_1__VAL_1 :
	       MUX_ff_write_mem_request_enq_1__VAL_2 ;
  assign ff_write_mem_request_ENQ =
	     WILL_FIRE_RL_fence_operation && !rg_fenceinit &&
	     rg_globaldirty &&
	     dirty_and_valid__h27063 ||
	     WILL_FIRE_RL_release_from_FB &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     rg_readdone ;
  assign ff_write_mem_request_DEQ = EN_write_mem_req_deq ;
  assign ff_write_mem_request_CLR = 1'b0 ;

  // submodule tag_arr_0_ram_single_0
  always@(MUX_tag_arr_0_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tag_arr_0_ram_single_0_request_1__SEL_1:
	  tag_arr_0_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: tag_arr_0_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: tag_arr_0_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  tag_arr_0_ram_single_0_addra = v__h28117[5:0];
      default: tag_arr_0_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign tag_arr_0_ram_single_0_dina =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[31:12] ;
  assign tag_arr_0_ram_single_0_wea =
	     MUX_tag_arr_0_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2723 ;
  assign tag_arr_0_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo29 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule tag_arr_1_ram_single_0
  always@(MUX_tag_arr_1_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tag_arr_1_ram_single_0_request_1__SEL_1:
	  tag_arr_1_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: tag_arr_1_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: tag_arr_1_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  tag_arr_1_ram_single_0_addra = v__h28117[5:0];
      default: tag_arr_1_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign tag_arr_1_ram_single_0_dina =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[31:12] ;
  assign tag_arr_1_ram_single_0_wea =
	     MUX_tag_arr_1_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2725 ;
  assign tag_arr_1_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo25 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule tag_arr_2_ram_single_0
  always@(MUX_tag_arr_2_ram_single_0_request_1__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tag_arr_2_ram_single_0_request_1__SEL_1:
	  tag_arr_2_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: tag_arr_2_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: tag_arr_2_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  tag_arr_2_ram_single_0_addra = v__h28117[5:0];
      default: tag_arr_2_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign tag_arr_2_ram_single_0_dina =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[31:12] ;
  assign tag_arr_2_ram_single_0_wea =
	     MUX_tag_arr_2_ram_single_0_request_1__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2727 ;
  assign tag_arr_2_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo21 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // submodule tag_arr_3_ram_single_0
  always@(MUX_tag_arr_3_ram_single_0_request_2__SEL_1 or
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_replaylatest or
	  rg_latest_index or
	  EN_core_req_put or
	  core_req_put or WILL_FIRE_RL_fence_operation or v__h28117)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tag_arr_3_ram_single_0_request_2__SEL_1:
	  tag_arr_3_ram_single_0_addra =
	      SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6];
      rg_replaylatest: tag_arr_3_ram_single_0_addra = rg_latest_index;
      EN_core_req_put: tag_arr_3_ram_single_0_addra = core_req_put[88:83];
      WILL_FIRE_RL_fence_operation:
	  tag_arr_3_ram_single_0_addra = v__h28117[5:0];
      default: tag_arr_3_ram_single_0_addra =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign tag_arr_3_ram_single_0_dina =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[31:12] ;
  assign tag_arr_3_ram_single_0_wea =
	     MUX_tag_arr_3_ram_single_0_request_2__SEL_1 &&
	     !IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2729 ;
  assign tag_arr_3_ram_single_0_ena =
	     WILL_FIRE_RL_release_from_FB && _dfoo17 || rg_replaylatest ||
	     EN_core_req_put ||
	     WILL_FIRE_RL_fence_operation ;

  // remaining internal signals
  assign IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092 =
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0) ?
	       CAN_FIRE_RL_check_fb_for_corerequest && wr_fb_err_wget :
	       IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	       2'd0 &&
	       ff_nc_read_response_rv_port1__read[66] &&
	       ff_nc_read_response_rv_port1__read[0] ;
  assign IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2108 =
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0) ?
	       !CAN_FIRE_RL_check_fb_for_corerequest || !wr_fb_err_wget :
	       IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	       2'd0 ||
	       !ff_nc_read_response_rv_port1__read[66] ||
	       !ff_nc_read_response_rv_port1__read[0] ;
  assign IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2123 =
	     (IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	      2'd0) ?
	       _theResult_____1_snd__h308811 :
	       _theResult_____2__h308713 ;
  assign IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2136 =
	     (IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	      2'd0) ?
	       _theResult_____1_fst__h308810 :
	       temp1__h308711 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1399 =
	     (w__h301646[0] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_0_ram_single_0_douta) ?
	       4'd1 :
	       4'd0 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1403 =
	     (w__h301646[1] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_1_ram_single_0_douta) ?
	       _theResult_____1_fst__h290826 :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1399 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1407 =
	     (w__h301646[2] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_2_ram_single_0_douta) ?
	       _theResult_____1_fst__h290700 :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1403 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1420 =
	     (w__h301646[0] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_0_ram_single_0_douta) ?
	       data_arr_0_ram_single_0_douta :
	       512'd0 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1421 =
	     (w__h301646[1] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_1_ram_single_0_douta) ?
	       data_arr_1_ram_single_0_douta :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1420 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1422 =
	     (w__h301646[2] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_2_ram_single_0_douta) ?
	       data_arr_2_ram_single_0_douta :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1421 ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2723 =
	     v__h375911 == 2'd0 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	     !rg_readdone ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2725 =
	     v__h375911 == 2'd1 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	     !rg_readdone ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2727 =
	     v__h375911 == 2'd2 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	     !rg_readdone ;
  assign IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2729 =
	     v__h375911 == 2'd3 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	     !rg_readdone ;
  assign IF_fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff__ETC___d1543 =
	     (fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 &&
	      fb_valid_0) ?
	       8'd1 :
	       8'd0 ;
  assign IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1530 =
	     (fb_addr_1[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_1) ?
	       fb_enables_1_read__521_BIT_ff_core_request_fir_ETC___d1522 ||
	       fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 &&
	       fb_valid_0 &&
	       fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527 :
	       fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 &&
	       fb_valid_0 &&
	       fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527 ;
  assign IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1547 =
	     (fb_addr_1[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_1) ?
	       _theResult_____6_snd_snd_fst__h293396 :
	       IF_fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff__ETC___d1543 ;
  assign IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1590 =
	     (fb_addr_1[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_1) ?
	       !fb_enables_1_read__521_BIT_ff_core_request_fir_ETC___d1522 &&
	       (!fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 ||
		!fb_valid_0 ||
		!fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527) :
	       !fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 ||
	       !fb_valid_0 ||
	       !fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527 ;
  assign IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1605 =
	     (fb_addr_1[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_1) ?
	       fb_dataline_1 :
	       ((fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 &&
		 fb_valid_0) ?
		  fb_dataline_0 :
		  512'd0) ;
  assign IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1640 =
	     (fb_addr_1[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_1) ?
	       fb_err_1 :
	       fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 &&
	       fb_valid_0 &&
	       fb_err_0 ;
  assign IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1532 =
	     (fb_addr_2[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_2) ?
	       fb_enables_2_read__516_BIT_ff_core_request_fir_ETC___d1517 ||
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1530 :
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1530 ;
  assign IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1551 =
	     (fb_addr_2[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_2) ?
	       _theResult_____6_snd_snd_fst__h293379 :
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1547 ;
  assign IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1592 =
	     (fb_addr_2[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_2) ?
	       !fb_enables_2_read__516_BIT_ff_core_request_fir_ETC___d1517 &&
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1590 :
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1590 ;
  assign IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1606 =
	     (fb_addr_2[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_2) ?
	       fb_dataline_2 :
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1605 ;
  assign IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1641 =
	     (fb_addr_2[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_2) ?
	       fb_err_2 :
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1640 ;
  assign IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1534 =
	     (fb_addr_3[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_3) ?
	       fb_enables_3_read__511_BIT_ff_core_request_fir_ETC___d1512 ||
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1532 :
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1532 ;
  assign IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1555 =
	     (fb_addr_3[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_3) ?
	       _theResult_____6_snd_snd_fst__h293362 :
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1551 ;
  assign IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1594 =
	     (fb_addr_3[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_3) ?
	       !fb_enables_3_read__511_BIT_ff_core_request_fir_ETC___d1512 &&
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1592 :
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1592 ;
  assign IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1607 =
	     (fb_addr_3[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_3) ?
	       fb_dataline_3 :
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1606 ;
  assign IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1642 =
	     (fb_addr_3[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_3) ?
	       fb_err_3 :
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1641 ;
  assign IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1536 =
	     (fb_addr_4[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_4) ?
	       fb_enables_4_read__506_BIT_ff_core_request_fir_ETC___d1507 ||
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1534 :
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1534 ;
  assign IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1559 =
	     (fb_addr_4[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_4) ?
	       _theResult_____6_snd_snd_fst__h293345 :
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1555 ;
  assign IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1596 =
	     (fb_addr_4[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_4) ?
	       !fb_enables_4_read__506_BIT_ff_core_request_fir_ETC___d1507 &&
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1594 :
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1594 ;
  assign IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1608 =
	     (fb_addr_4[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_4) ?
	       fb_dataline_4 :
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1607 ;
  assign IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1643 =
	     (fb_addr_4[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_4) ?
	       fb_err_4 :
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1642 ;
  assign IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1538 =
	     (fb_addr_5[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_5) ?
	       fb_enables_5_read__501_BIT_ff_core_request_fir_ETC___d1502 ||
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1536 :
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1536 ;
  assign IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1563 =
	     (fb_addr_5[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_5) ?
	       _theResult_____6_snd_snd_fst__h293328 :
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1559 ;
  assign IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1598 =
	     (fb_addr_5[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_5) ?
	       !fb_enables_5_read__501_BIT_ff_core_request_fir_ETC___d1502 &&
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1596 :
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1596 ;
  assign IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1609 =
	     (fb_addr_5[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_5) ?
	       fb_dataline_5 :
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1608 ;
  assign IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1644 =
	     (fb_addr_5[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_5) ?
	       fb_err_5 :
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1643 ;
  assign IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1540 =
	     (fb_addr_6[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_6) ?
	       fb_enables_6_read__496_BIT_ff_core_request_fir_ETC___d1497 ||
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1538 :
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1538 ;
  assign IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1567 =
	     (fb_addr_6[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_6) ?
	       _theResult_____6_snd_snd_fst__h293311 :
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1563 ;
  assign IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1600 =
	     (fb_addr_6[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_6) ?
	       !fb_enables_6_read__496_BIT_ff_core_request_fir_ETC___d1497 &&
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1598 :
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1598 ;
  assign IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1610 =
	     (fb_addr_6[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_6) ?
	       fb_dataline_6 :
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1609 ;
  assign IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1645 =
	     (fb_addr_6[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_6) ?
	       fb_err_6 :
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1644 ;
  assign IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1542 =
	     (fb_addr_7[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_7) ?
	       fb_enables_7_read__490_BIT_ff_core_request_fir_ETC___d1492 ||
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1540 :
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1540 ;
  assign IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1602 =
	     (fb_addr_7[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_7) ?
	       !fb_enables_7_read__490_BIT_ff_core_request_fir_ETC___d1492 &&
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1600 :
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1600 ;
  assign IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806 =
	     (ff_core_request_D_OUT[74:73] == 2'd2) ?
	       IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 :
	       ff_core_request_D_OUT[69:6] ;
  assign IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1788 =
	     op1__h296828 <= op2__h296827 ;
  assign IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1793 =
	     (op1__h296828 ^ 64'h8000000000000000) <=
	     (op2__h296827 ^ 64'h8000000000000000) ;
  assign IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 =
	     wr_cache_response_whas ? wr_cache_response_wget : 2'd2 ;
  assign IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1742 =
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd0 &&
	     (!CAN_FIRE_RL_check_fb_for_corerequest || !wr_fb_err_wget) ;
  assign IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751 =
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1742 ||
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	     2'd0 ;
  assign IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1848 =
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd0 ||
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd0 ||
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	     2'd0 ||
	     wr_trap_from_tlb_whas ;
  assign IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d2162 =
	     IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	     2'd1 &&
	     !rg_miss_ongoing &&
	     IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	     2'd1 &&
	     IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	     2'd0 &&
	     !wr_trap_from_tlb_whas &&
	     (!fb_valid_0 ||
	      NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377) ;
  assign IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 =
	     wr_fb_response_whas ? wr_fb_response_wget : 2'd2 ;
  assign IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 =
	     ff_nc_read_response_rv_port1__read[66] ? 2'd0 : 2'd2 ;
  assign NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2133 =
	     x__h308746 + y__h308747 > 2'd1 ;
  assign NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2146 =
	     x__h309046 + y__h309047 > 2'd1 ;
  assign NOT_0_CONCAT_IF_SEL_ARR_rg_valid_0_79_rg_valid_ETC___d1481 =
	     x__h292275 + y__h292276 > 3'd1 ;
  assign NOT_0_CONCAT_IF_fb_addr_7_read__322_BITS_31_TO_ETC___d1677 =
	     x__h295094 + y__h295095 > 4'd1 ;
  assign NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132 =
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	     CAN_FIRE_RL_update_fb_with_memory_response &&
	     wr_fbbeingfilled_wget[3] &&
	     SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130 ;
  assign NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162 =
	     !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	     (!CAN_FIRE_RL_update_fb_with_memory_response ||
	      !wr_fbbeingfilled_wget[3] ||
	      !SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130) ;
  assign NOT_SEL_ARR_store_valid_0_1_1_store_valid_1_1__ETC___d3216 =
	     !CASE_rg_storehead_0_store_valid_0_1_1_store_va_ETC__q4 ;
  assign NOT_fb_valid_1_0_5_AND_NOT_fb_valid_2_1_6_AND__ETC___d47 =
	     !fb_valid_1 && !fb_valid_2 && !fb_valid_3 && !fb_valid_4 &&
	     !fb_valid_5 &&
	     !fb_valid_6 &&
	     !fb_valid_7 ;
  assign NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377 =
	     !fb_valid_1 || !fb_valid_2 || !fb_valid_3 ||
	     NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374 ;
  assign NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374 =
	     !fb_valid_4 || !fb_valid_5 || !fb_valid_6 || !fb_valid_7 ;
  assign NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 =
	     !ff_core_request_EMPTY_N && !EN_core_req_put &&
	     !SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 ;
  assign NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d1380 =
	     !ff_core_response_rv[72] && !rg_miss_ongoing && !rg_polling &&
	     !ff_core_request_D_OUT[76] &&
	     (!fb_valid_0 ||
	      NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377) &&
	     !rg_replaylatest ;
  assign NOT_ff_core_response_rv_port0__read__9_BIT_72__ETC___d3029 =
	     !ff_core_response_rv[72] && !rg_replaylatest &&
	     !rg_fence_stall &&
	     (!fb_valid_0 ||
	      NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377) ;
  assign SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2914 =
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) &&
	     valid__h375917 == 4'd15 ;
  assign SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 =
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6] ==
	     rg_latest_index ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1041 =
	     SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d781 |
	     {512{SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d782}} &
	     data_arr_2_ram_single_0_douta ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1042 =
	     dirty_and_valid__h27063 & rg_way_select[3] ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d263 =
	     dirty_and_valid__h27063 & rg_way_select[0] ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d522 =
	     dirty_and_valid__h27063 & rg_way_select[1] ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d781 =
	     {512{SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d263}} &
	     data_arr_0_ram_single_0_douta |
	     {512{SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d522}} &
	     data_arr_1_ram_single_0_douta ;
  assign SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d782 =
	     dirty_and_valid__h27063 & rg_way_select[2] ;
  assign SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 =
	     x__h378533 & y__h378534 ;
  assign SEL_ARR_store_addr_0_680_store_addr_1_681_682__ETC___d1687 =
	     x__h295470[31:3] == ff_from_tlb_rv_port1__read[39:11] ;
  assign SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 =
	     epoch__h399395 == perform_store_currepoch ;
  assign SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130 =
	     fbindex__h399390 == wr_fbbeingfilled_wget[2:0] ;
  assign _dfoo1 =
	     rg_fbwriteback == 3'd7 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd7 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo11 =
	     rg_fbwriteback == 3'd2 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd2 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo13 =
	     rg_fbwriteback == 3'd1 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd1 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo15 =
	     rg_fbwriteback == 3'd0 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd0 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo17 =
	     IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2729 ||
	     v__h375911 == 2'd3 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _dfoo21 =
	     IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2727 ||
	     v__h375911 == 2'd2 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _dfoo25 =
	     IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2725 ||
	     v__h375911 == 2'd1 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _dfoo29 =
	     IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d2723 ||
	     v__h375911 == 2'd0 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ;
  assign _dfoo3 =
	     rg_fbwriteback == 3'd6 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd6 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo5 =
	     rg_fbwriteback == 3'd5 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd5 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo7 =
	     rg_fbwriteback == 3'd4 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd4 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _dfoo9 =
	     rg_fbwriteback == 3'd3 &&
	     SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	     (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	      rg_readdone) ||
	     rg_fbwriteback == 3'd3 &&
	     !SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 ;
  assign _theResult_____1__h295434 =
	     (x__h295720[31:3] == ff_from_tlb_rv_port1__read[39:11]) ?
	       storemask2___1__h295737 :
	       64'd0 ;
  assign _theResult_____1__h311600 =
	     { we__h311764,
	       we__h311793,
	       we__h311822,
	       we__h311851,
	       we__h311880,
	       we__h311909,
	       we__h311938,
	       we__h311967 } ;
  assign _theResult_____1_fst__h290574 =
	     { 1'd1,
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1407[2:0] } ;
  assign _theResult_____1_fst__h290700 =
	     { IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1403[3],
	       1'd1,
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1403[1:0] } ;
  assign _theResult_____1_fst__h290826 =
	     { IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1399[3:2],
	       1'd1,
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1399[0] } ;
  assign _theResult_____1_fst__h308810 = { 1'd1, temp1__h308711[1:0] } ;
  assign _theResult_____1_snd__h308811 =
	     { 1'd1, _theResult_____2__h308713[1:0] } ;
  assign _theResult_____2__h308713 =
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0) ?
	       result__h308828 :
	       temp1__h308711 ;
  assign _theResult_____4__h308265 =
	     (IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	      2'd0 &&
	      IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092 ||
	      ff_from_tlb_rv_port1__read[7]) ?
	       ff_core_request_D_OUT[140:77] :
	       word__h307867 ;
  assign _theResult_____5_cause__h308247 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ? 6'd5 : 6'd7 ;
  assign _theResult_____6__h295433 =
	     SEL_ARR_store_addr_0_680_store_addr_1_681_682__ETC___d1687 ?
	       temp__h295518 :
	       64'd0 ;
  assign _theResult_____6__h311237 =
	     (SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 ==
	      8'd0) ?
	       temp__h311366 :
	       rg_fbfillenable ;
  assign _theResult_____6_fst__h292529 =
	     (fb_addr_7[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_7) ?
	       fb_dataline_7 :
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1610 ;
  assign _theResult_____6_snd_snd_fst__h293294 =
	     { 1'd1,
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1567[6:0] } ;
  assign _theResult_____6_snd_snd_fst__h293311 =
	     { IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1563[7],
	       1'd1,
	       IF_fb_addr_5_read__320_BITS_31_TO_6_498_EQ_ff__ETC___d1563[5:0] } ;
  assign _theResult_____6_snd_snd_fst__h293328 =
	     { IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1559[7:6],
	       1'd1,
	       IF_fb_addr_4_read__319_BITS_31_TO_6_503_EQ_ff__ETC___d1559[4:0] } ;
  assign _theResult_____6_snd_snd_fst__h293345 =
	     { IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1555[7:5],
	       1'd1,
	       IF_fb_addr_3_read__318_BITS_31_TO_6_508_EQ_ff__ETC___d1555[3:0] } ;
  assign _theResult_____6_snd_snd_fst__h293362 =
	     { IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1551[7:4],
	       1'd1,
	       IF_fb_addr_2_read__317_BITS_31_TO_6_513_EQ_ff__ETC___d1551[2:0] } ;
  assign _theResult_____6_snd_snd_fst__h293379 =
	     { IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1547[7:3],
	       1'd1,
	       IF_fb_addr_1_read__316_BITS_31_TO_6_518_EQ_ff__ETC___d1547[1:0] } ;
  assign _theResult_____6_snd_snd_fst__h293396 =
	     { IF_fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff__ETC___d1543[7:2],
	       1'd1,
	       IF_fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff__ETC___d1543[0] } ;
  assign block_offset__h289252 = { ff_core_request_D_OUT[82:77], 3'b0 } ;
  assign block_offset__h399400 = { addr__h399391[5:0], 3'b0 } ;
  assign data1__h295435 =
	     _theResult_____6__h295433 &
	     CASE_x95611_0_store_data_0_1_store_data_1_DONT_ETC__q2 ;
  assign data2__h295436 =
	     _theResult_____1__h295434 &
	     CASE_rg_storetail_0_store_data_0_1_store_data__ETC__q3 ;
  assign dirty_and_valid__h27063 =
	     x__h277884[x__h28162[1:0]] & bs__h28594[x__h28162[1:0]] ;
  assign fb_addr_0_read__315_BITS_31_TO_6_523_EQ_ff_fro_ETC___d1524 =
	     fb_addr_0[31:6] == ff_from_tlb_rv_port1__read[39:14] ;
  assign fb_enables_0_read__526_BIT_ff_core_request_fir_ETC___d1527 =
	     fb_enables_0[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_1_read__521_BIT_ff_core_request_fir_ETC___d1522 =
	     fb_enables_1[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_2_read__516_BIT_ff_core_request_fir_ETC___d1517 =
	     fb_enables_2[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_3_read__511_BIT_ff_core_request_fir_ETC___d1512 =
	     fb_enables_3[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_4_read__506_BIT_ff_core_request_fir_ETC___d1507 =
	     fb_enables_4[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_5_read__501_BIT_ff_core_request_fir_ETC___d1502 =
	     fb_enables_5[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_6_read__496_BIT_ff_core_request_fir_ETC___d1497 =
	     fb_enables_6[ff_core_request_D_OUT[82:80]] ;
  assign fb_enables_7_read__490_BIT_ff_core_request_fir_ETC___d1492 =
	     fb_enables_7[ff_core_request_D_OUT[82:80]] ;
  assign fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2595 =
	     fb_valid_0 &&
	     fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32 ||
	     NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 &&
	     !CAN_FIRE_RL_allocate_storebuffer ;
  assign fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2598 =
	     (fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2595 ||
	      rg_fence_stall) &&
	     !rg_replaylatest &&
	     (fb_valid_0 ||
	      fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225) ;
  assign fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2605 =
	     fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2598 &&
	     SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 &&
	     x__h375884 == 8'd255 &&
	     !store_valid_0_1 &&
	     !store_valid_1_1 ;
  assign fb_valid_0_9_AND_fb_valid_1_0_AND_fb_valid_2_1_ETC___d2910 =
	     fb_valid_0 &&
	     fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32 &&
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 ||
	     y__h378534 ;
  assign fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32 =
	     fb_valid_1 && fb_valid_2 && fb_valid_3 && fb_valid_4 &&
	     fb_valid_5 &&
	     fb_valid_6 &&
	     fb_valid_7 ;
  assign fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225 =
	     fb_valid_1 || fb_valid_2 || fb_valid_3 ||
	     fb_valid_4_3_OR_fb_valid_5_4_OR_fb_valid_6_5_O_ETC___d2222 ;
  assign fb_valid_4_3_OR_fb_valid_5_4_OR_fb_valid_6_5_O_ETC___d2222 =
	     fb_valid_4 || fb_valid_5 || fb_valid_6 || fb_valid_7 ;
  assign fbhit__h292477 =
	     (fb_addr_7[31:6] == ff_from_tlb_rv_port1__read[39:14] &&
	      fb_valid_7) ?
	       _theResult_____6_snd_snd_fst__h293294 :
	       IF_fb_addr_6_read__321_BITS_31_TO_6_493_EQ_ff__ETC___d1567 ;
  assign fbindex__h295994 =
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0) ?
	       x__read__h21696 :
	       rg_fbmissallocate ;
  assign ff_core_requestD_OUT_BITS_37_TO_6__q1 = ff_core_request_D_OUT[37:6] ;
  assign ff_core_request_first__4_BIT_76_5_AND_rg_fence_ETC___d91 =
	     ff_core_request_D_OUT[76] && rg_fence_stall && !fb_valid_0 &&
	     NOT_fb_valid_1_0_5_AND_NOT_fb_valid_2_1_6_AND__ETC___d47 &&
	     !rg_replaylatest ;
  assign ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 =
	     ff_from_tlb_rv_port1__read[39:8] < 32'h01000000 ;
  assign ff_from_tlb_rv_port1__read__360_BIT_40_361_AND_ETC___d2153 =
	     ff_from_tlb_rv_port1__read[40] && ff_read_mem_request_FULL_N &&
	     ff_fb_fillindex_FULL_N &&
	     ff_nc_read_request_FULL_N &&
	     !ff_core_response_rv[72] ;
  assign final_address__h28113 =
	     { SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261,
	       rg_set_select,
	       6'd0 } ;
  assign final_address__h380608 =
	     { v__h379929,
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6],
	       6'd0 } ;
  assign final_data__h311602 = x__h373748 | y__h373749 ;
  assign final_line___1__h28112 =
	     SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1041 |
	     {512{SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d1042}} &
	     data_arr_3_ram_single_0_douta ;
  assign final_mask__h311601 = _theResult_____1__h311600 | x__read__h23414 ;
  assign hit__h290166 =
	     (w__h301646[3] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_3_ram_single_0_douta) ?
	       _theResult_____1_fst__h290574 :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1407 ;
  assign hitline__h290167 =
	     (w__h301646[3] &&
	      ff_from_tlb_rv_port1__read[39:20] ==
	      tag_arr_3_ram_single_0_douta) ?
	       data_arr_3_ram_single_0_douta :
	       IF_SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_vali_ETC___d1422 ;
  assign i__h300274 = CAN_FIRE_RL_tag_match ? x__h290192[1:0] : 2'd0 ;
  assign index__h27062 = { 1'b0, rg_set_select } ;
  assign loaded96825_BITS_31_TO_0__q8 = loaded__h296825[31:0] ;
  assign loaded__h296825 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       ff_core_request_D_OUT[69:6] :
	       word__h299361 ;
  assign loadoffset__h298906 = { ff_core_request_D_OUT[79:77], 3'b0 } ;
  assign mask__h399398 = { 448'd0, temp__h399397 } ;
  assign mask__h399401 = x_wget__h23403 ;
  assign new_value__h400137 = x_wget__h23332 ;
  assign next_set__h27061 = index__h27062 + 7'd1 ;
  assign op1___1__h296885 =
	     { {32{loaded96825_BITS_31_TO_0__q8[31]}},
	       loaded96825_BITS_31_TO_0__q8 } ;
  assign op1__h296828 =
	     ff_core_request_D_OUT[5] ? loaded__h296825 : op1___1__h296885 ;
  assign op2___1__h296886 =
	     { {32{ff_core_requestD_OUT_BITS_37_TO_6__q1[31]}},
	       ff_core_requestD_OUT_BITS_37_TO_6__q1 } ;
  assign op2__h296827 =
	     ff_core_request_D_OUT[5] ?
	       ff_core_request_D_OUT[69:6] :
	       op2___1__h296886 ;
  assign result__h308828 = { temp1__h308711[2], 1'd1, temp1__h308711[0] } ;
  assign shiftamt1__h295425 = { x__h295470[2:0], 3'b0 } ;
  assign shiftamt2__h295734 = { x__h295720[2:0], 3'b0 } ;
  assign storemask2___1__h295737 = temp__h295736 & y__h295749 ;
  assign temp1__h308711 =
	     (IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	      2'd0) ?
	       3'd1 :
	       3'd0 ;
  assign temp__h295518 = temp__h295517 << shiftamt1__h295425 ;
  assign temp__h295736 = temp__h295735 << shiftamt2__h295734 ;
  assign temp__h311366 =
	     8'd1 <<
	     SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242[5:3] ;
  assign updated_word__h299246 = x__read__h19030 << loadoffset__h298906 ;
  assign updated_word__h299247 = x__h307810 | y__h307715 ;
  assign updated_word__h307700 = x__read__h21625 << loadoffset__h298906 ;
  assign updated_word__h307701 = x__h307714 | y__h307715 ;
  assign v__h28117 =
	     (!rg_fenceinit && rg_globaldirty) ? v__h28131 : index__h27062 ;
  assign v__h28131 =
	     (rg_way_select[3] || x__h277884 == 4'd0) ?
	       next_set__h27061 :
	       index__h27062 ;
  assign v__h298924 = wr_cache_hitword_whas ? x__h291577[63:0] : 64'd0 ;
  assign v__h375911 =
	     (valid__h375917 == 4'd15 && dirty__h375918 == 4'd15) ?
	       SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 :
	       ((valid__h375917 == 4'd15) ?
		  (dirty__h375918[3] ?
		     (dirty__h375918[2] ?
			(dirty__h375918[1] ? 2'd0 : 2'd1) :
			2'd2) :
		     2'd3) :
		  (valid__h375917[3] ?
		     (valid__h375917[2] ?
			(valid__h375917[1] ? 2'd0 : 2'd1) :
			2'd2) :
		     2'd3)) ;
  assign v_cause__h308302 =
	     (!ff_from_tlb_rv_port1__read[7] &&
	      IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 !=
	      2'd0 &&
	      IF_IF_wr_fb_response_whas__732_THEN_wr_fb_resp_ETC___d2092) ?
	       _theResult_____5_cause__h308247 :
	       ff_from_tlb_rv_port1__read[6:1] ;
  assign we__h311764 = {64{_theResult_____6__h311237[7]}} ;
  assign we__h311793 = {64{_theResult_____6__h311237[6]}} ;
  assign we__h311822 = {64{_theResult_____6__h311237[5]}} ;
  assign we__h311851 = {64{_theResult_____6__h311237[4]}} ;
  assign we__h311880 = {64{_theResult_____6__h311237[3]}} ;
  assign we__h311909 = {64{_theResult_____6__h311237[2]}} ;
  assign we__h311938 = {64{_theResult_____6__h311237[1]}} ;
  assign we__h311967 = {64{_theResult_____6__h311237[0]}} ;
  assign word99361_BITS_15_TO_0__q6 = word__h299361[15:0] ;
  assign word99361_BITS_31_TO_0__q7 = word__h299361[31:0] ;
  assign word99361_BITS_7_TO_0__q5 = word__h299361[7:0] ;
  assign word___1__h307702 = updated_word__h307701 >> loadoffset__h298906 ;
  assign word__h299361 =
	     (IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	      2'd0) ?
	       v__h298924 :
	       y_avValue_snd__h299356 ;
  assign x3__h277175 = MUX_data_arr_0_ram_single_0_request_3__VAL_2 ;
  assign x__h28162 =
	     rg_way_select[0] ?
	       3'd0 :
	       (rg_way_select[1] ?
		  3'd1 :
		  (rg_way_select[2] ?
		     3'd2 :
		     (rg_way_select[3] ? 3'd3 : 3'd4))) ;
  assign x__h290192 =
	     hit__h290166[0] ?
	       3'd0 :
	       (hit__h290166[1] ?
		  3'd1 :
		  (hit__h290166[2] ?
		     3'd2 :
		     (hit__h290166[3] ? 3'd3 : 3'd4))) ;
  assign x__h291577 = hitline__h290167 >> block_offset__h289252 ;
  assign x__h292275 = x__h292287 + y__h292288 ;
  assign x__h292287 = x__h292299 + y__h292300 ;
  assign x__h292299 = { 2'd0, hit__h290166[3] } ;
  assign x__h293784 = _theResult_____6_fst__h292529 >> block_offset__h289252 ;
  assign x__h293919 =
	     fbhit__h292477[0] ?
	       4'd0 :
	       (fbhit__h292477[1] ?
		  4'd1 :
		  (fbhit__h292477[2] ?
		     4'd2 :
		     (fbhit__h292477[3] ?
			4'd3 :
			(fbhit__h292477[4] ?
			   4'd4 :
			   (fbhit__h292477[5] ?
			      4'd5 :
			      (fbhit__h292477[6] ?
				 4'd6 :
				 (fbhit__h292477[7] ? 4'd7 : 4'd8))))))) ;
  assign x__h295094 = x__h295106 + y__h295107 ;
  assign x__h295106 = x__h295118 + y__h295119 ;
  assign x__h295118 = x__h295130 + y__h295131 ;
  assign x__h295130 = x__h295142 + y__h295143 ;
  assign x__h295142 = x__h295154 + y__h295155 ;
  assign x__h295154 = x__h295166 + y__h295167 ;
  assign x__h295166 = { 3'd0, fbhit__h292477[7] } ;
  assign x__h295611 = rg_storetail - 1'd1 ;
  assign x__h301648 = 4'd1 << i__h300274 ;
  assign x__h307714 = updated_word__h307700 & y__h307716 ;
  assign x__h307810 = updated_word__h299246 & y__h307716 ;
  assign x__h308746 = x__h308758 + y__h308759 ;
  assign x__h308758 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2123[2] } ;
  assign x__h309046 = x__h309058 + y__h309059 ;
  assign x__h309058 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2136[2] } ;
  assign x__h311706 = x__h311708 & y__h311709 ;
  assign x__h311708 = ~final_mask__h311601 ;
  assign x__h373748 = x__read__h23414 & y__h373751 ;
  assign x__h378533 = valid__h375917[v__h375911] ;
  assign x__h381594 = 4'd1 << v__h375911 ;
  assign x__h401597 = mask__h399401 & new_value__h400137 ;
  assign x__h402604 = ~mask__h399401 ;
  assign x__read__h19030 =
	     ff_nc_read_response_rv_port1__read[66] ?
	       ff_nc_read_response_rv_port1__read[65:2] :
	       64'd0 ;
  assign x__read__h21625 =
	     CAN_FIRE_RL_check_fb_for_corerequest ? x__h293784[63:0] : 64'd0 ;
  assign x__read__h21696 =
	     CAN_FIRE_RL_check_fb_for_corerequest ? x__h293919[2:0] : 3'd0 ;
  assign x__read__h23414 = wr_upd_fillingdata_whas ? x_wget__h23403 : 512'd0 ;
  assign x_address__h309373 = { ff_from_tlb_rv_port1__read[39:11], 3'd0 } ;
  assign x_wget__h19161 = hitline__h290167 ;
  assign x_wget__h23332 =
	     {8{SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098}} ;
  assign x_wget__h23403 = mask__h399398 << block_offset__h399400 ;
  assign x_wget__h23616 = data1__h295435 | data2__h295436 ;
  assign x_wget__h23687 =
	     _theResult_____6__h295433 | _theResult_____1__h295434 ;
  assign y__h292276 = { 2'd0, hit__h290166[0] } ;
  assign y__h292288 = { 2'd0, hit__h290166[1] } ;
  assign y__h292300 = { 2'd0, hit__h290166[2] } ;
  assign y__h295095 = { 3'd0, fbhit__h292477[0] } ;
  assign y__h295107 = { 3'd0, fbhit__h292477[1] } ;
  assign y__h295119 = { 3'd0, fbhit__h292477[2] } ;
  assign y__h295131 = { 3'd0, fbhit__h292477[3] } ;
  assign y__h295143 = { 3'd0, fbhit__h292477[4] } ;
  assign y__h295155 = { 3'd0, fbhit__h292477[5] } ;
  assign y__h295167 = { 3'd0, fbhit__h292477[6] } ;
  assign y__h295749 =
	     SEL_ARR_store_addr_0_680_store_addr_1_681_682__ETC___d1687 ?
	       ~temp__h295518 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign y__h301664 = ~x__h301648 ;
  assign y__h307715 =
	     CAN_FIRE_RL_check_hit_in_storebuffer ? x_wget__h23616 : 64'd0 ;
  assign y__h307716 =
	     CAN_FIRE_RL_check_hit_in_storebuffer ?
	       ~x_wget__h23687 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign y__h308747 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2123[0] } ;
  assign y__h308759 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2123[1] } ;
  assign y__h309047 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2136[0] } ;
  assign y__h309059 =
	     { 1'd0,
	       IF_IF_wr_nc_response_whas__747_THEN_wr_nc_resp_ETC___d2136[1] } ;
  assign y__h311707 = final_mask__h311601 & final_data__h311602 ;
  assign y__h373749 = _theResult_____1__h311600 & y__h373757 ;
  assign y__h373751 = wr_upd_fillingdata_whas ? x_wget__h23332 : 512'd0 ;
  assign y__h373757 = {8{ff_read_mem_response_rv_port1__read[65:2]}} ;
  assign y__h378534 = dirty__h375918[v__h375911] ;
  assign y__h384884 = ~x__h381594 ;
  assign y__h401598 = x__h402604 & y__h402605 ;
  assign y_avValue_snd__h299325 =
	     updated_word__h299247 >> loadoffset__h298906 ;
  assign y_avValue_snd__h299342 =
	     (IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 ==
	      2'd0) ?
	       y_avValue_snd__h299325 :
	       64'd0 ;
  assign y_avValue_snd__h299356 =
	     (IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	      2'd0) ?
	       y_avValue_snd__h299337 :
	       y_avValue_snd__h299342 ;
  always@(ff_fb_fillindex_D_OUT or
	  fb_dataline_0 or
	  fb_dataline_1 or
	  fb_dataline_2 or
	  fb_dataline_3 or
	  fb_dataline_4 or fb_dataline_5 or fb_dataline_6 or fb_dataline_7)
  begin
    case (ff_fb_fillindex_D_OUT)
      3'd0: y__h311709 = fb_dataline_0;
      3'd1: y__h311709 = fb_dataline_1;
      3'd2: y__h311709 = fb_dataline_2;
      3'd3: y__h311709 = fb_dataline_3;
      3'd4: y__h311709 = fb_dataline_4;
      3'd5: y__h311709 = fb_dataline_5;
      3'd6: y__h311709 = fb_dataline_6;
      3'd7: y__h311709 = fb_dataline_7;
    endcase
  end
  always@(rg_storehead or store_addr_0 or store_addr_1)
  begin
    case (rg_storehead)
      1'd0: addr__h399391 = store_addr_0;
      1'd1: addr__h399391 = store_addr_1;
    endcase
  end
  always@(rg_storehead or store_size_0 or store_size_1)
  begin
    case (rg_storehead)
      1'd0: x__h400003 = store_size_0;
      1'd1: x__h400003 = store_size_1;
    endcase
  end
  always@(rg_storehead or store_fbindex_0 or store_fbindex_1)
  begin
    case (rg_storehead)
      1'd0: fbindex__h399390 = store_fbindex_0;
      1'd1: fbindex__h399390 = store_fbindex_1;
    endcase
  end
  always@(x__h400003)
  begin
    case (x__h400003)
      2'd0: temp__h399397 = 64'h00000000000000FF;
      2'd1: temp__h399397 = 64'h000000000000FFFF;
      2'd2: temp__h399397 = 64'h00000000FFFFFFFF;
      2'd3: temp__h399397 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  rg_dirty_0 or
	  rg_dirty_1 or
	  rg_dirty_2 or
	  rg_dirty_3 or
	  rg_dirty_4 or
	  rg_dirty_5 or
	  rg_dirty_6 or
	  rg_dirty_7 or
	  rg_dirty_8 or
	  rg_dirty_9 or
	  rg_dirty_10 or
	  rg_dirty_11 or
	  rg_dirty_12 or
	  rg_dirty_13 or
	  rg_dirty_14 or
	  rg_dirty_15 or
	  rg_dirty_16 or
	  rg_dirty_17 or
	  rg_dirty_18 or
	  rg_dirty_19 or
	  rg_dirty_20 or
	  rg_dirty_21 or
	  rg_dirty_22 or
	  rg_dirty_23 or
	  rg_dirty_24 or
	  rg_dirty_25 or
	  rg_dirty_26 or
	  rg_dirty_27 or
	  rg_dirty_28 or
	  rg_dirty_29 or
	  rg_dirty_30 or
	  rg_dirty_31 or
	  rg_dirty_32 or
	  rg_dirty_33 or
	  rg_dirty_34 or
	  rg_dirty_35 or
	  rg_dirty_36 or
	  rg_dirty_37 or
	  rg_dirty_38 or
	  rg_dirty_39 or
	  rg_dirty_40 or
	  rg_dirty_41 or
	  rg_dirty_42 or
	  rg_dirty_43 or
	  rg_dirty_44 or
	  rg_dirty_45 or
	  rg_dirty_46 or
	  rg_dirty_47 or
	  rg_dirty_48 or
	  rg_dirty_49 or
	  rg_dirty_50 or
	  rg_dirty_51 or
	  rg_dirty_52 or
	  rg_dirty_53 or
	  rg_dirty_54 or
	  rg_dirty_55 or
	  rg_dirty_56 or
	  rg_dirty_57 or
	  rg_dirty_58 or
	  rg_dirty_59 or
	  rg_dirty_60 or rg_dirty_61 or rg_dirty_62 or rg_dirty_63)
  begin
    case (ff_core_request_D_OUT[88:83])
      6'd0: bs__h300273 = rg_dirty_0;
      6'd1: bs__h300273 = rg_dirty_1;
      6'd2: bs__h300273 = rg_dirty_2;
      6'd3: bs__h300273 = rg_dirty_3;
      6'd4: bs__h300273 = rg_dirty_4;
      6'd5: bs__h300273 = rg_dirty_5;
      6'd6: bs__h300273 = rg_dirty_6;
      6'd7: bs__h300273 = rg_dirty_7;
      6'd8: bs__h300273 = rg_dirty_8;
      6'd9: bs__h300273 = rg_dirty_9;
      6'd10: bs__h300273 = rg_dirty_10;
      6'd11: bs__h300273 = rg_dirty_11;
      6'd12: bs__h300273 = rg_dirty_12;
      6'd13: bs__h300273 = rg_dirty_13;
      6'd14: bs__h300273 = rg_dirty_14;
      6'd15: bs__h300273 = rg_dirty_15;
      6'd16: bs__h300273 = rg_dirty_16;
      6'd17: bs__h300273 = rg_dirty_17;
      6'd18: bs__h300273 = rg_dirty_18;
      6'd19: bs__h300273 = rg_dirty_19;
      6'd20: bs__h300273 = rg_dirty_20;
      6'd21: bs__h300273 = rg_dirty_21;
      6'd22: bs__h300273 = rg_dirty_22;
      6'd23: bs__h300273 = rg_dirty_23;
      6'd24: bs__h300273 = rg_dirty_24;
      6'd25: bs__h300273 = rg_dirty_25;
      6'd26: bs__h300273 = rg_dirty_26;
      6'd27: bs__h300273 = rg_dirty_27;
      6'd28: bs__h300273 = rg_dirty_28;
      6'd29: bs__h300273 = rg_dirty_29;
      6'd30: bs__h300273 = rg_dirty_30;
      6'd31: bs__h300273 = rg_dirty_31;
      6'd32: bs__h300273 = rg_dirty_32;
      6'd33: bs__h300273 = rg_dirty_33;
      6'd34: bs__h300273 = rg_dirty_34;
      6'd35: bs__h300273 = rg_dirty_35;
      6'd36: bs__h300273 = rg_dirty_36;
      6'd37: bs__h300273 = rg_dirty_37;
      6'd38: bs__h300273 = rg_dirty_38;
      6'd39: bs__h300273 = rg_dirty_39;
      6'd40: bs__h300273 = rg_dirty_40;
      6'd41: bs__h300273 = rg_dirty_41;
      6'd42: bs__h300273 = rg_dirty_42;
      6'd43: bs__h300273 = rg_dirty_43;
      6'd44: bs__h300273 = rg_dirty_44;
      6'd45: bs__h300273 = rg_dirty_45;
      6'd46: bs__h300273 = rg_dirty_46;
      6'd47: bs__h300273 = rg_dirty_47;
      6'd48: bs__h300273 = rg_dirty_48;
      6'd49: bs__h300273 = rg_dirty_49;
      6'd50: bs__h300273 = rg_dirty_50;
      6'd51: bs__h300273 = rg_dirty_51;
      6'd52: bs__h300273 = rg_dirty_52;
      6'd53: bs__h300273 = rg_dirty_53;
      6'd54: bs__h300273 = rg_dirty_54;
      6'd55: bs__h300273 = rg_dirty_55;
      6'd56: bs__h300273 = rg_dirty_56;
      6'd57: bs__h300273 = rg_dirty_57;
      6'd58: bs__h300273 = rg_dirty_58;
      6'd59: bs__h300273 = rg_dirty_59;
      6'd60: bs__h300273 = rg_dirty_60;
      6'd61: bs__h300273 = rg_dirty_61;
      6'd62: bs__h300273 = rg_dirty_62;
      6'd63: bs__h300273 = rg_dirty_63;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  rg_valid_0 or
	  rg_valid_1 or
	  rg_valid_2 or
	  rg_valid_3 or
	  rg_valid_4 or
	  rg_valid_5 or
	  rg_valid_6 or
	  rg_valid_7 or
	  rg_valid_8 or
	  rg_valid_9 or
	  rg_valid_10 or
	  rg_valid_11 or
	  rg_valid_12 or
	  rg_valid_13 or
	  rg_valid_14 or
	  rg_valid_15 or
	  rg_valid_16 or
	  rg_valid_17 or
	  rg_valid_18 or
	  rg_valid_19 or
	  rg_valid_20 or
	  rg_valid_21 or
	  rg_valid_22 or
	  rg_valid_23 or
	  rg_valid_24 or
	  rg_valid_25 or
	  rg_valid_26 or
	  rg_valid_27 or
	  rg_valid_28 or
	  rg_valid_29 or
	  rg_valid_30 or
	  rg_valid_31 or
	  rg_valid_32 or
	  rg_valid_33 or
	  rg_valid_34 or
	  rg_valid_35 or
	  rg_valid_36 or
	  rg_valid_37 or
	  rg_valid_38 or
	  rg_valid_39 or
	  rg_valid_40 or
	  rg_valid_41 or
	  rg_valid_42 or
	  rg_valid_43 or
	  rg_valid_44 or
	  rg_valid_45 or
	  rg_valid_46 or
	  rg_valid_47 or
	  rg_valid_48 or
	  rg_valid_49 or
	  rg_valid_50 or
	  rg_valid_51 or
	  rg_valid_52 or
	  rg_valid_53 or
	  rg_valid_54 or
	  rg_valid_55 or
	  rg_valid_56 or
	  rg_valid_57 or
	  rg_valid_58 or
	  rg_valid_59 or
	  rg_valid_60 or rg_valid_61 or rg_valid_62 or rg_valid_63)
  begin
    case (ff_core_request_D_OUT[88:83])
      6'd0: w__h301646 = rg_valid_0;
      6'd1: w__h301646 = rg_valid_1;
      6'd2: w__h301646 = rg_valid_2;
      6'd3: w__h301646 = rg_valid_3;
      6'd4: w__h301646 = rg_valid_4;
      6'd5: w__h301646 = rg_valid_5;
      6'd6: w__h301646 = rg_valid_6;
      6'd7: w__h301646 = rg_valid_7;
      6'd8: w__h301646 = rg_valid_8;
      6'd9: w__h301646 = rg_valid_9;
      6'd10: w__h301646 = rg_valid_10;
      6'd11: w__h301646 = rg_valid_11;
      6'd12: w__h301646 = rg_valid_12;
      6'd13: w__h301646 = rg_valid_13;
      6'd14: w__h301646 = rg_valid_14;
      6'd15: w__h301646 = rg_valid_15;
      6'd16: w__h301646 = rg_valid_16;
      6'd17: w__h301646 = rg_valid_17;
      6'd18: w__h301646 = rg_valid_18;
      6'd19: w__h301646 = rg_valid_19;
      6'd20: w__h301646 = rg_valid_20;
      6'd21: w__h301646 = rg_valid_21;
      6'd22: w__h301646 = rg_valid_22;
      6'd23: w__h301646 = rg_valid_23;
      6'd24: w__h301646 = rg_valid_24;
      6'd25: w__h301646 = rg_valid_25;
      6'd26: w__h301646 = rg_valid_26;
      6'd27: w__h301646 = rg_valid_27;
      6'd28: w__h301646 = rg_valid_28;
      6'd29: w__h301646 = rg_valid_29;
      6'd30: w__h301646 = rg_valid_30;
      6'd31: w__h301646 = rg_valid_31;
      6'd32: w__h301646 = rg_valid_32;
      6'd33: w__h301646 = rg_valid_33;
      6'd34: w__h301646 = rg_valid_34;
      6'd35: w__h301646 = rg_valid_35;
      6'd36: w__h301646 = rg_valid_36;
      6'd37: w__h301646 = rg_valid_37;
      6'd38: w__h301646 = rg_valid_38;
      6'd39: w__h301646 = rg_valid_39;
      6'd40: w__h301646 = rg_valid_40;
      6'd41: w__h301646 = rg_valid_41;
      6'd42: w__h301646 = rg_valid_42;
      6'd43: w__h301646 = rg_valid_43;
      6'd44: w__h301646 = rg_valid_44;
      6'd45: w__h301646 = rg_valid_45;
      6'd46: w__h301646 = rg_valid_46;
      6'd47: w__h301646 = rg_valid_47;
      6'd48: w__h301646 = rg_valid_48;
      6'd49: w__h301646 = rg_valid_49;
      6'd50: w__h301646 = rg_valid_50;
      6'd51: w__h301646 = rg_valid_51;
      6'd52: w__h301646 = rg_valid_52;
      6'd53: w__h301646 = rg_valid_53;
      6'd54: w__h301646 = rg_valid_54;
      6'd55: w__h301646 = rg_valid_55;
      6'd56: w__h301646 = rg_valid_56;
      6'd57: w__h301646 = rg_valid_57;
      6'd58: w__h301646 = rg_valid_58;
      6'd59: w__h301646 = rg_valid_59;
      6'd60: w__h301646 = rg_valid_60;
      6'd61: w__h301646 = rg_valid_61;
      6'd62: w__h301646 = rg_valid_62;
      6'd63: w__h301646 = rg_valid_63;
    endcase
  end
  always@(fbindex__h399390 or
	  fb_dataline_0 or
	  fb_dataline_1 or
	  fb_dataline_2 or
	  fb_dataline_3 or
	  fb_dataline_4 or fb_dataline_5 or fb_dataline_6 or fb_dataline_7)
  begin
    case (fbindex__h399390)
      3'd0: y__h402605 = fb_dataline_0;
      3'd1: y__h402605 = fb_dataline_1;
      3'd2: y__h402605 = fb_dataline_2;
      3'd3: y__h402605 = fb_dataline_3;
      3'd4: y__h402605 = fb_dataline_4;
      3'd5: y__h402605 = fb_dataline_5;
      3'd6: y__h402605 = fb_dataline_6;
      3'd7: y__h402605 = fb_dataline_7;
    endcase
  end
  always@(rg_set_select or
	  rg_dirty_0 or
	  rg_dirty_1 or
	  rg_dirty_2 or
	  rg_dirty_3 or
	  rg_dirty_4 or
	  rg_dirty_5 or
	  rg_dirty_6 or
	  rg_dirty_7 or
	  rg_dirty_8 or
	  rg_dirty_9 or
	  rg_dirty_10 or
	  rg_dirty_11 or
	  rg_dirty_12 or
	  rg_dirty_13 or
	  rg_dirty_14 or
	  rg_dirty_15 or
	  rg_dirty_16 or
	  rg_dirty_17 or
	  rg_dirty_18 or
	  rg_dirty_19 or
	  rg_dirty_20 or
	  rg_dirty_21 or
	  rg_dirty_22 or
	  rg_dirty_23 or
	  rg_dirty_24 or
	  rg_dirty_25 or
	  rg_dirty_26 or
	  rg_dirty_27 or
	  rg_dirty_28 or
	  rg_dirty_29 or
	  rg_dirty_30 or
	  rg_dirty_31 or
	  rg_dirty_32 or
	  rg_dirty_33 or
	  rg_dirty_34 or
	  rg_dirty_35 or
	  rg_dirty_36 or
	  rg_dirty_37 or
	  rg_dirty_38 or
	  rg_dirty_39 or
	  rg_dirty_40 or
	  rg_dirty_41 or
	  rg_dirty_42 or
	  rg_dirty_43 or
	  rg_dirty_44 or
	  rg_dirty_45 or
	  rg_dirty_46 or
	  rg_dirty_47 or
	  rg_dirty_48 or
	  rg_dirty_49 or
	  rg_dirty_50 or
	  rg_dirty_51 or
	  rg_dirty_52 or
	  rg_dirty_53 or
	  rg_dirty_54 or
	  rg_dirty_55 or
	  rg_dirty_56 or
	  rg_dirty_57 or
	  rg_dirty_58 or
	  rg_dirty_59 or
	  rg_dirty_60 or rg_dirty_61 or rg_dirty_62 or rg_dirty_63)
  begin
    case (rg_set_select)
      6'd0: x__h277884 = rg_dirty_0;
      6'd1: x__h277884 = rg_dirty_1;
      6'd2: x__h277884 = rg_dirty_2;
      6'd3: x__h277884 = rg_dirty_3;
      6'd4: x__h277884 = rg_dirty_4;
      6'd5: x__h277884 = rg_dirty_5;
      6'd6: x__h277884 = rg_dirty_6;
      6'd7: x__h277884 = rg_dirty_7;
      6'd8: x__h277884 = rg_dirty_8;
      6'd9: x__h277884 = rg_dirty_9;
      6'd10: x__h277884 = rg_dirty_10;
      6'd11: x__h277884 = rg_dirty_11;
      6'd12: x__h277884 = rg_dirty_12;
      6'd13: x__h277884 = rg_dirty_13;
      6'd14: x__h277884 = rg_dirty_14;
      6'd15: x__h277884 = rg_dirty_15;
      6'd16: x__h277884 = rg_dirty_16;
      6'd17: x__h277884 = rg_dirty_17;
      6'd18: x__h277884 = rg_dirty_18;
      6'd19: x__h277884 = rg_dirty_19;
      6'd20: x__h277884 = rg_dirty_20;
      6'd21: x__h277884 = rg_dirty_21;
      6'd22: x__h277884 = rg_dirty_22;
      6'd23: x__h277884 = rg_dirty_23;
      6'd24: x__h277884 = rg_dirty_24;
      6'd25: x__h277884 = rg_dirty_25;
      6'd26: x__h277884 = rg_dirty_26;
      6'd27: x__h277884 = rg_dirty_27;
      6'd28: x__h277884 = rg_dirty_28;
      6'd29: x__h277884 = rg_dirty_29;
      6'd30: x__h277884 = rg_dirty_30;
      6'd31: x__h277884 = rg_dirty_31;
      6'd32: x__h277884 = rg_dirty_32;
      6'd33: x__h277884 = rg_dirty_33;
      6'd34: x__h277884 = rg_dirty_34;
      6'd35: x__h277884 = rg_dirty_35;
      6'd36: x__h277884 = rg_dirty_36;
      6'd37: x__h277884 = rg_dirty_37;
      6'd38: x__h277884 = rg_dirty_38;
      6'd39: x__h277884 = rg_dirty_39;
      6'd40: x__h277884 = rg_dirty_40;
      6'd41: x__h277884 = rg_dirty_41;
      6'd42: x__h277884 = rg_dirty_42;
      6'd43: x__h277884 = rg_dirty_43;
      6'd44: x__h277884 = rg_dirty_44;
      6'd45: x__h277884 = rg_dirty_45;
      6'd46: x__h277884 = rg_dirty_46;
      6'd47: x__h277884 = rg_dirty_47;
      6'd48: x__h277884 = rg_dirty_48;
      6'd49: x__h277884 = rg_dirty_49;
      6'd50: x__h277884 = rg_dirty_50;
      6'd51: x__h277884 = rg_dirty_51;
      6'd52: x__h277884 = rg_dirty_52;
      6'd53: x__h277884 = rg_dirty_53;
      6'd54: x__h277884 = rg_dirty_54;
      6'd55: x__h277884 = rg_dirty_55;
      6'd56: x__h277884 = rg_dirty_56;
      6'd57: x__h277884 = rg_dirty_57;
      6'd58: x__h277884 = rg_dirty_58;
      6'd59: x__h277884 = rg_dirty_59;
      6'd60: x__h277884 = rg_dirty_60;
      6'd61: x__h277884 = rg_dirty_61;
      6'd62: x__h277884 = rg_dirty_62;
      6'd63: x__h277884 = rg_dirty_63;
    endcase
  end
  always@(rg_storetail or store_size_0 or store_size_1)
  begin
    case (rg_storetail)
      1'd0: x__h295787 = store_size_0;
      1'd1: x__h295787 = store_size_1;
    endcase
  end
  always@(x__h295787)
  begin
    case (x__h295787)
      2'd0: temp__h295735 = 64'h00000000000000FF;
      2'd1: temp__h295735 = 64'h000000000000FFFF;
      2'd2: temp__h295735 = 64'h00000000FFFFFFFF;
      2'd3: temp__h295735 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(rg_fbwriteback or
	  fb_enables_0 or
	  fb_enables_1 or
	  fb_enables_2 or
	  fb_enables_3 or
	  fb_enables_4 or fb_enables_5 or fb_enables_6 or fb_enables_7)
  begin
    case (rg_fbwriteback)
      3'd0: x__h375884 = fb_enables_0;
      3'd1: x__h375884 = fb_enables_1;
      3'd2: x__h375884 = fb_enables_2;
      3'd3: x__h375884 = fb_enables_3;
      3'd4: x__h375884 = fb_enables_4;
      3'd5: x__h375884 = fb_enables_5;
      3'd6: x__h375884 = fb_enables_6;
      3'd7: x__h375884 = fb_enables_7;
    endcase
  end
  always@(rg_storehead or store_epoch_0 or store_epoch_1)
  begin
    case (rg_storehead)
      1'd0: epoch__h399395 = store_epoch_0;
      1'd1: epoch__h399395 = store_epoch_1;
    endcase
  end
  always@(rg_set_select or
	  rg_valid_0 or
	  rg_valid_1 or
	  rg_valid_2 or
	  rg_valid_3 or
	  rg_valid_4 or
	  rg_valid_5 or
	  rg_valid_6 or
	  rg_valid_7 or
	  rg_valid_8 or
	  rg_valid_9 or
	  rg_valid_10 or
	  rg_valid_11 or
	  rg_valid_12 or
	  rg_valid_13 or
	  rg_valid_14 or
	  rg_valid_15 or
	  rg_valid_16 or
	  rg_valid_17 or
	  rg_valid_18 or
	  rg_valid_19 or
	  rg_valid_20 or
	  rg_valid_21 or
	  rg_valid_22 or
	  rg_valid_23 or
	  rg_valid_24 or
	  rg_valid_25 or
	  rg_valid_26 or
	  rg_valid_27 or
	  rg_valid_28 or
	  rg_valid_29 or
	  rg_valid_30 or
	  rg_valid_31 or
	  rg_valid_32 or
	  rg_valid_33 or
	  rg_valid_34 or
	  rg_valid_35 or
	  rg_valid_36 or
	  rg_valid_37 or
	  rg_valid_38 or
	  rg_valid_39 or
	  rg_valid_40 or
	  rg_valid_41 or
	  rg_valid_42 or
	  rg_valid_43 or
	  rg_valid_44 or
	  rg_valid_45 or
	  rg_valid_46 or
	  rg_valid_47 or
	  rg_valid_48 or
	  rg_valid_49 or
	  rg_valid_50 or
	  rg_valid_51 or
	  rg_valid_52 or
	  rg_valid_53 or
	  rg_valid_54 or
	  rg_valid_55 or
	  rg_valid_56 or
	  rg_valid_57 or
	  rg_valid_58 or
	  rg_valid_59 or
	  rg_valid_60 or rg_valid_61 or rg_valid_62 or rg_valid_63)
  begin
    case (rg_set_select)
      6'd0: bs__h28594 = rg_valid_0;
      6'd1: bs__h28594 = rg_valid_1;
      6'd2: bs__h28594 = rg_valid_2;
      6'd3: bs__h28594 = rg_valid_3;
      6'd4: bs__h28594 = rg_valid_4;
      6'd5: bs__h28594 = rg_valid_5;
      6'd6: bs__h28594 = rg_valid_6;
      6'd7: bs__h28594 = rg_valid_7;
      6'd8: bs__h28594 = rg_valid_8;
      6'd9: bs__h28594 = rg_valid_9;
      6'd10: bs__h28594 = rg_valid_10;
      6'd11: bs__h28594 = rg_valid_11;
      6'd12: bs__h28594 = rg_valid_12;
      6'd13: bs__h28594 = rg_valid_13;
      6'd14: bs__h28594 = rg_valid_14;
      6'd15: bs__h28594 = rg_valid_15;
      6'd16: bs__h28594 = rg_valid_16;
      6'd17: bs__h28594 = rg_valid_17;
      6'd18: bs__h28594 = rg_valid_18;
      6'd19: bs__h28594 = rg_valid_19;
      6'd20: bs__h28594 = rg_valid_20;
      6'd21: bs__h28594 = rg_valid_21;
      6'd22: bs__h28594 = rg_valid_22;
      6'd23: bs__h28594 = rg_valid_23;
      6'd24: bs__h28594 = rg_valid_24;
      6'd25: bs__h28594 = rg_valid_25;
      6'd26: bs__h28594 = rg_valid_26;
      6'd27: bs__h28594 = rg_valid_27;
      6'd28: bs__h28594 = rg_valid_28;
      6'd29: bs__h28594 = rg_valid_29;
      6'd30: bs__h28594 = rg_valid_30;
      6'd31: bs__h28594 = rg_valid_31;
      6'd32: bs__h28594 = rg_valid_32;
      6'd33: bs__h28594 = rg_valid_33;
      6'd34: bs__h28594 = rg_valid_34;
      6'd35: bs__h28594 = rg_valid_35;
      6'd36: bs__h28594 = rg_valid_36;
      6'd37: bs__h28594 = rg_valid_37;
      6'd38: bs__h28594 = rg_valid_38;
      6'd39: bs__h28594 = rg_valid_39;
      6'd40: bs__h28594 = rg_valid_40;
      6'd41: bs__h28594 = rg_valid_41;
      6'd42: bs__h28594 = rg_valid_42;
      6'd43: bs__h28594 = rg_valid_43;
      6'd44: bs__h28594 = rg_valid_44;
      6'd45: bs__h28594 = rg_valid_45;
      6'd46: bs__h28594 = rg_valid_46;
      6'd47: bs__h28594 = rg_valid_47;
      6'd48: bs__h28594 = rg_valid_48;
      6'd49: bs__h28594 = rg_valid_49;
      6'd50: bs__h28594 = rg_valid_50;
      6'd51: bs__h28594 = rg_valid_51;
      6'd52: bs__h28594 = rg_valid_52;
      6'd53: bs__h28594 = rg_valid_53;
      6'd54: bs__h28594 = rg_valid_54;
      6'd55: bs__h28594 = rg_valid_55;
      6'd56: bs__h28594 = rg_valid_56;
      6'd57: bs__h28594 = rg_valid_57;
      6'd58: bs__h28594 = rg_valid_58;
      6'd59: bs__h28594 = rg_valid_59;
      6'd60: bs__h28594 = rg_valid_60;
      6'd61: bs__h28594 = rg_valid_61;
      6'd62: bs__h28594 = rg_valid_62;
      6'd63: bs__h28594 = rg_valid_63;
    endcase
  end
  always@(x__h295611 or store_size_0 or store_size_1)
  begin
    case (x__h295611)
      1'd0: x__h295609 = store_size_0;
      1'd1: x__h295609 = store_size_1;
    endcase
  end
  always@(x__h295609)
  begin
    case (x__h295609)
      2'd0: temp__h295517 = 64'h00000000000000FF;
      2'd1: temp__h295517 = 64'h000000000000FFFF;
      2'd2: temp__h295517 = 64'h00000000FFFFFFFF;
      2'd3: temp__h295517 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(x__h295611 or store_addr_0 or store_addr_1)
  begin
    case (x__h295611)
      1'd0: x__h295470 = store_addr_0;
      1'd1: x__h295470 = store_addr_1;
    endcase
  end
  always@(rg_storetail or store_addr_0 or store_addr_1)
  begin
    case (rg_storetail)
      1'd0: x__h295720 = store_addr_0;
      1'd1: x__h295720 = store_addr_1;
    endcase
  end
  always@(x__h295611 or store_data_0 or store_data_1)
  begin
    case (x__h295611)
      1'd0:
	  CASE_x95611_0_store_data_0_1_store_data_1_DONT_ETC__q2 =
	      store_data_0;
      1'd1:
	  CASE_x95611_0_store_data_0_1_store_data_1_DONT_ETC__q2 =
	      store_data_1;
    endcase
  end
  always@(rg_storetail or store_data_0 or store_data_1)
  begin
    case (rg_storetail)
      1'd0:
	  CASE_rg_storetail_0_store_data_0_1_store_data__ETC__q3 =
	      store_data_0;
      1'd1:
	  CASE_rg_storetail_0_store_data_0_1_store_data__ETC__q3 =
	      store_data_1;
    endcase
  end
  always@(rg_fbmissallocate or
	  fb_valid_0 or
	  fb_valid_1 or
	  fb_valid_2 or
	  fb_valid_3 or fb_valid_4 or fb_valid_5 or fb_valid_6 or fb_valid_7)
  begin
    case (rg_fbmissallocate)
      3'd0:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_0;
      3'd1:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_1;
      3'd2:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_2;
      3'd3:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_3;
      3'd4:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_4;
      3'd5:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_5;
      3'd6:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_6;
      3'd7:
	  SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026 =
	      !fb_valid_7;
    endcase
  end
  always@(ff_fb_fillindex_D_OUT or
	  fb_enables_0 or
	  fb_enables_1 or
	  fb_enables_2 or
	  fb_enables_3 or
	  fb_enables_4 or fb_enables_5 or fb_enables_6 or fb_enables_7)
  begin
    case (ff_fb_fillindex_D_OUT)
      3'd0:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_0;
      3'd1:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_1;
      3'd2:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_2;
      3'd3:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_3;
      3'd4:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_4;
      3'd5:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_5;
      3'd6:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_6;
      3'd7:
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 =
	      fb_enables_7;
    endcase
  end
  always@(ff_fb_fillindex_D_OUT or
	  fb_addr_0 or
	  fb_addr_1 or
	  fb_addr_2 or
	  fb_addr_3 or fb_addr_4 or fb_addr_5 or fb_addr_6 or fb_addr_7)
  begin
    case (ff_fb_fillindex_D_OUT)
      3'd0:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_0;
      3'd1:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_1;
      3'd2:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_2;
      3'd3:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_3;
      3'd4:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_4;
      3'd5:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_5;
      3'd6:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_6;
      3'd7:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242 =
	      fb_addr_7;
    endcase
  end
  always@(rg_fbwriteback or
	  fb_addr_0 or
	  fb_addr_1 or
	  fb_addr_2 or
	  fb_addr_3 or fb_addr_4 or fb_addr_5 or fb_addr_6 or fb_addr_7)
  begin
    case (rg_fbwriteback)
      3'd0:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_0;
      3'd1:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_1;
      3'd2:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_2;
      3'd3:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_3;
      3'd4:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_4;
      3'd5:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_5;
      3'd6:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_6;
      3'd7:
	  SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 =
	      fb_addr_7;
    endcase
  end
  always@(SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_dirty_0 or
	  rg_dirty_1 or
	  rg_dirty_2 or
	  rg_dirty_3 or
	  rg_dirty_4 or
	  rg_dirty_5 or
	  rg_dirty_6 or
	  rg_dirty_7 or
	  rg_dirty_8 or
	  rg_dirty_9 or
	  rg_dirty_10 or
	  rg_dirty_11 or
	  rg_dirty_12 or
	  rg_dirty_13 or
	  rg_dirty_14 or
	  rg_dirty_15 or
	  rg_dirty_16 or
	  rg_dirty_17 or
	  rg_dirty_18 or
	  rg_dirty_19 or
	  rg_dirty_20 or
	  rg_dirty_21 or
	  rg_dirty_22 or
	  rg_dirty_23 or
	  rg_dirty_24 or
	  rg_dirty_25 or
	  rg_dirty_26 or
	  rg_dirty_27 or
	  rg_dirty_28 or
	  rg_dirty_29 or
	  rg_dirty_30 or
	  rg_dirty_31 or
	  rg_dirty_32 or
	  rg_dirty_33 or
	  rg_dirty_34 or
	  rg_dirty_35 or
	  rg_dirty_36 or
	  rg_dirty_37 or
	  rg_dirty_38 or
	  rg_dirty_39 or
	  rg_dirty_40 or
	  rg_dirty_41 or
	  rg_dirty_42 or
	  rg_dirty_43 or
	  rg_dirty_44 or
	  rg_dirty_45 or
	  rg_dirty_46 or
	  rg_dirty_47 or
	  rg_dirty_48 or
	  rg_dirty_49 or
	  rg_dirty_50 or
	  rg_dirty_51 or
	  rg_dirty_52 or
	  rg_dirty_53 or
	  rg_dirty_54 or
	  rg_dirty_55 or
	  rg_dirty_56 or
	  rg_dirty_57 or
	  rg_dirty_58 or
	  rg_dirty_59 or
	  rg_dirty_60 or rg_dirty_61 or rg_dirty_62 or rg_dirty_63)
  begin
    case (SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6])
      6'd0: dirty__h375918 = rg_dirty_0;
      6'd1: dirty__h375918 = rg_dirty_1;
      6'd2: dirty__h375918 = rg_dirty_2;
      6'd3: dirty__h375918 = rg_dirty_3;
      6'd4: dirty__h375918 = rg_dirty_4;
      6'd5: dirty__h375918 = rg_dirty_5;
      6'd6: dirty__h375918 = rg_dirty_6;
      6'd7: dirty__h375918 = rg_dirty_7;
      6'd8: dirty__h375918 = rg_dirty_8;
      6'd9: dirty__h375918 = rg_dirty_9;
      6'd10: dirty__h375918 = rg_dirty_10;
      6'd11: dirty__h375918 = rg_dirty_11;
      6'd12: dirty__h375918 = rg_dirty_12;
      6'd13: dirty__h375918 = rg_dirty_13;
      6'd14: dirty__h375918 = rg_dirty_14;
      6'd15: dirty__h375918 = rg_dirty_15;
      6'd16: dirty__h375918 = rg_dirty_16;
      6'd17: dirty__h375918 = rg_dirty_17;
      6'd18: dirty__h375918 = rg_dirty_18;
      6'd19: dirty__h375918 = rg_dirty_19;
      6'd20: dirty__h375918 = rg_dirty_20;
      6'd21: dirty__h375918 = rg_dirty_21;
      6'd22: dirty__h375918 = rg_dirty_22;
      6'd23: dirty__h375918 = rg_dirty_23;
      6'd24: dirty__h375918 = rg_dirty_24;
      6'd25: dirty__h375918 = rg_dirty_25;
      6'd26: dirty__h375918 = rg_dirty_26;
      6'd27: dirty__h375918 = rg_dirty_27;
      6'd28: dirty__h375918 = rg_dirty_28;
      6'd29: dirty__h375918 = rg_dirty_29;
      6'd30: dirty__h375918 = rg_dirty_30;
      6'd31: dirty__h375918 = rg_dirty_31;
      6'd32: dirty__h375918 = rg_dirty_32;
      6'd33: dirty__h375918 = rg_dirty_33;
      6'd34: dirty__h375918 = rg_dirty_34;
      6'd35: dirty__h375918 = rg_dirty_35;
      6'd36: dirty__h375918 = rg_dirty_36;
      6'd37: dirty__h375918 = rg_dirty_37;
      6'd38: dirty__h375918 = rg_dirty_38;
      6'd39: dirty__h375918 = rg_dirty_39;
      6'd40: dirty__h375918 = rg_dirty_40;
      6'd41: dirty__h375918 = rg_dirty_41;
      6'd42: dirty__h375918 = rg_dirty_42;
      6'd43: dirty__h375918 = rg_dirty_43;
      6'd44: dirty__h375918 = rg_dirty_44;
      6'd45: dirty__h375918 = rg_dirty_45;
      6'd46: dirty__h375918 = rg_dirty_46;
      6'd47: dirty__h375918 = rg_dirty_47;
      6'd48: dirty__h375918 = rg_dirty_48;
      6'd49: dirty__h375918 = rg_dirty_49;
      6'd50: dirty__h375918 = rg_dirty_50;
      6'd51: dirty__h375918 = rg_dirty_51;
      6'd52: dirty__h375918 = rg_dirty_52;
      6'd53: dirty__h375918 = rg_dirty_53;
      6'd54: dirty__h375918 = rg_dirty_54;
      6'd55: dirty__h375918 = rg_dirty_55;
      6'd56: dirty__h375918 = rg_dirty_56;
      6'd57: dirty__h375918 = rg_dirty_57;
      6'd58: dirty__h375918 = rg_dirty_58;
      6'd59: dirty__h375918 = rg_dirty_59;
      6'd60: dirty__h375918 = rg_dirty_60;
      6'd61: dirty__h375918 = rg_dirty_61;
      6'd62: dirty__h375918 = rg_dirty_62;
      6'd63: dirty__h375918 = rg_dirty_63;
    endcase
  end
  always@(SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  rg_valid_0 or
	  rg_valid_1 or
	  rg_valid_2 or
	  rg_valid_3 or
	  rg_valid_4 or
	  rg_valid_5 or
	  rg_valid_6 or
	  rg_valid_7 or
	  rg_valid_8 or
	  rg_valid_9 or
	  rg_valid_10 or
	  rg_valid_11 or
	  rg_valid_12 or
	  rg_valid_13 or
	  rg_valid_14 or
	  rg_valid_15 or
	  rg_valid_16 or
	  rg_valid_17 or
	  rg_valid_18 or
	  rg_valid_19 or
	  rg_valid_20 or
	  rg_valid_21 or
	  rg_valid_22 or
	  rg_valid_23 or
	  rg_valid_24 or
	  rg_valid_25 or
	  rg_valid_26 or
	  rg_valid_27 or
	  rg_valid_28 or
	  rg_valid_29 or
	  rg_valid_30 or
	  rg_valid_31 or
	  rg_valid_32 or
	  rg_valid_33 or
	  rg_valid_34 or
	  rg_valid_35 or
	  rg_valid_36 or
	  rg_valid_37 or
	  rg_valid_38 or
	  rg_valid_39 or
	  rg_valid_40 or
	  rg_valid_41 or
	  rg_valid_42 or
	  rg_valid_43 or
	  rg_valid_44 or
	  rg_valid_45 or
	  rg_valid_46 or
	  rg_valid_47 or
	  rg_valid_48 or
	  rg_valid_49 or
	  rg_valid_50 or
	  rg_valid_51 or
	  rg_valid_52 or
	  rg_valid_53 or
	  rg_valid_54 or
	  rg_valid_55 or
	  rg_valid_56 or
	  rg_valid_57 or
	  rg_valid_58 or
	  rg_valid_59 or
	  rg_valid_60 or rg_valid_61 or rg_valid_62 or rg_valid_63)
  begin
    case (SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6])
      6'd0: valid__h375917 = rg_valid_0;
      6'd1: valid__h375917 = rg_valid_1;
      6'd2: valid__h375917 = rg_valid_2;
      6'd3: valid__h375917 = rg_valid_3;
      6'd4: valid__h375917 = rg_valid_4;
      6'd5: valid__h375917 = rg_valid_5;
      6'd6: valid__h375917 = rg_valid_6;
      6'd7: valid__h375917 = rg_valid_7;
      6'd8: valid__h375917 = rg_valid_8;
      6'd9: valid__h375917 = rg_valid_9;
      6'd10: valid__h375917 = rg_valid_10;
      6'd11: valid__h375917 = rg_valid_11;
      6'd12: valid__h375917 = rg_valid_12;
      6'd13: valid__h375917 = rg_valid_13;
      6'd14: valid__h375917 = rg_valid_14;
      6'd15: valid__h375917 = rg_valid_15;
      6'd16: valid__h375917 = rg_valid_16;
      6'd17: valid__h375917 = rg_valid_17;
      6'd18: valid__h375917 = rg_valid_18;
      6'd19: valid__h375917 = rg_valid_19;
      6'd20: valid__h375917 = rg_valid_20;
      6'd21: valid__h375917 = rg_valid_21;
      6'd22: valid__h375917 = rg_valid_22;
      6'd23: valid__h375917 = rg_valid_23;
      6'd24: valid__h375917 = rg_valid_24;
      6'd25: valid__h375917 = rg_valid_25;
      6'd26: valid__h375917 = rg_valid_26;
      6'd27: valid__h375917 = rg_valid_27;
      6'd28: valid__h375917 = rg_valid_28;
      6'd29: valid__h375917 = rg_valid_29;
      6'd30: valid__h375917 = rg_valid_30;
      6'd31: valid__h375917 = rg_valid_31;
      6'd32: valid__h375917 = rg_valid_32;
      6'd33: valid__h375917 = rg_valid_33;
      6'd34: valid__h375917 = rg_valid_34;
      6'd35: valid__h375917 = rg_valid_35;
      6'd36: valid__h375917 = rg_valid_36;
      6'd37: valid__h375917 = rg_valid_37;
      6'd38: valid__h375917 = rg_valid_38;
      6'd39: valid__h375917 = rg_valid_39;
      6'd40: valid__h375917 = rg_valid_40;
      6'd41: valid__h375917 = rg_valid_41;
      6'd42: valid__h375917 = rg_valid_42;
      6'd43: valid__h375917 = rg_valid_43;
      6'd44: valid__h375917 = rg_valid_44;
      6'd45: valid__h375917 = rg_valid_45;
      6'd46: valid__h375917 = rg_valid_46;
      6'd47: valid__h375917 = rg_valid_47;
      6'd48: valid__h375917 = rg_valid_48;
      6'd49: valid__h375917 = rg_valid_49;
      6'd50: valid__h375917 = rg_valid_50;
      6'd51: valid__h375917 = rg_valid_51;
      6'd52: valid__h375917 = rg_valid_52;
      6'd53: valid__h375917 = rg_valid_53;
      6'd54: valid__h375917 = rg_valid_54;
      6'd55: valid__h375917 = rg_valid_55;
      6'd56: valid__h375917 = rg_valid_56;
      6'd57: valid__h375917 = rg_valid_57;
      6'd58: valid__h375917 = rg_valid_58;
      6'd59: valid__h375917 = rg_valid_59;
      6'd60: valid__h375917 = rg_valid_60;
      6'd61: valid__h375917 = rg_valid_61;
      6'd62: valid__h375917 = rg_valid_62;
      6'd63: valid__h375917 = rg_valid_63;
    endcase
  end
  always@(rg_fbwriteback or
	  fb_valid_0 or
	  fb_valid_1 or
	  fb_valid_2 or
	  fb_valid_3 or fb_valid_4 or fb_valid_5 or fb_valid_6 or fb_valid_7)
  begin
    case (rg_fbwriteback)
      3'd0:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_0;
      3'd1:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_1;
      3'd2:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_2;
      3'd3:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_3;
      3'd4:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_4;
      3'd5:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_5;
      3'd6:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_6;
      3'd7:
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 =
	      fb_valid_7;
    endcase
  end
  always@(rg_fbwriteback or
	  fb_err_0 or
	  fb_err_1 or
	  fb_err_2 or
	  fb_err_3 or fb_err_4 or fb_err_5 or fb_err_6 or fb_err_7)
  begin
    case (rg_fbwriteback)
      3'd0:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_0;
      3'd1:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_1;
      3'd2:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_2;
      3'd3:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_3;
      3'd4:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_4;
      3'd5:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_5;
      3'd6:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_6;
      3'd7:
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 =
	      !fb_err_7;
    endcase
  end
  always@(SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324 or
	  repl_v_count_0 or
	  repl_v_count_1 or
	  repl_v_count_2 or
	  repl_v_count_3 or
	  repl_v_count_4 or
	  repl_v_count_5 or
	  repl_v_count_6 or
	  repl_v_count_7 or
	  repl_v_count_8 or
	  repl_v_count_9 or
	  repl_v_count_10 or
	  repl_v_count_11 or
	  repl_v_count_12 or
	  repl_v_count_13 or
	  repl_v_count_14 or
	  repl_v_count_15 or
	  repl_v_count_16 or
	  repl_v_count_17 or
	  repl_v_count_18 or
	  repl_v_count_19 or
	  repl_v_count_20 or
	  repl_v_count_21 or
	  repl_v_count_22 or
	  repl_v_count_23 or
	  repl_v_count_24 or
	  repl_v_count_25 or
	  repl_v_count_26 or
	  repl_v_count_27 or
	  repl_v_count_28 or
	  repl_v_count_29 or
	  repl_v_count_30 or
	  repl_v_count_31 or
	  repl_v_count_32 or
	  repl_v_count_33 or
	  repl_v_count_34 or
	  repl_v_count_35 or
	  repl_v_count_36 or
	  repl_v_count_37 or
	  repl_v_count_38 or
	  repl_v_count_39 or
	  repl_v_count_40 or
	  repl_v_count_41 or
	  repl_v_count_42 or
	  repl_v_count_43 or
	  repl_v_count_44 or
	  repl_v_count_45 or
	  repl_v_count_46 or
	  repl_v_count_47 or
	  repl_v_count_48 or
	  repl_v_count_49 or
	  repl_v_count_50 or
	  repl_v_count_51 or
	  repl_v_count_52 or
	  repl_v_count_53 or
	  repl_v_count_54 or
	  repl_v_count_55 or
	  repl_v_count_56 or
	  repl_v_count_57 or
	  repl_v_count_58 or
	  repl_v_count_59 or
	  repl_v_count_60 or
	  repl_v_count_61 or repl_v_count_62 or repl_v_count_63)
  begin
    case (SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6])
      6'd0:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_0;
      6'd1:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_1;
      6'd2:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_2;
      6'd3:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_3;
      6'd4:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_4;
      6'd5:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_5;
      6'd6:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_6;
      6'd7:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_7;
      6'd8:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_8;
      6'd9:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_9;
      6'd10:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_10;
      6'd11:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_11;
      6'd12:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_12;
      6'd13:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_13;
      6'd14:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_14;
      6'd15:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_15;
      6'd16:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_16;
      6'd17:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_17;
      6'd18:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_18;
      6'd19:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_19;
      6'd20:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_20;
      6'd21:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_21;
      6'd22:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_22;
      6'd23:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_23;
      6'd24:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_24;
      6'd25:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_25;
      6'd26:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_26;
      6'd27:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_27;
      6'd28:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_28;
      6'd29:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_29;
      6'd30:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_30;
      6'd31:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_31;
      6'd32:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_32;
      6'd33:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_33;
      6'd34:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_34;
      6'd35:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_35;
      6'd36:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_36;
      6'd37:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_37;
      6'd38:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_38;
      6'd39:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_39;
      6'd40:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_40;
      6'd41:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_41;
      6'd42:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_42;
      6'd43:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_43;
      6'd44:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_44;
      6'd45:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_45;
      6'd46:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_46;
      6'd47:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_47;
      6'd48:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_48;
      6'd49:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_49;
      6'd50:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_50;
      6'd51:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_51;
      6'd52:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_52;
      6'd53:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_53;
      6'd54:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_54;
      6'd55:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_55;
      6'd56:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_56;
      6'd57:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_57;
      6'd58:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_58;
      6'd59:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_59;
      6'd60:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_60;
      6'd61:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_61;
      6'd62:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_62;
      6'd63:
	  SEL_ARR_repl_v_count_0_612_repl_v_count_1_613__ETC___d2677 =
	      repl_v_count_63;
    endcase
  end
  always@(v__h375911 or
	  data_arr_0_ram_single_0_douta or
	  data_arr_1_ram_single_0_douta or
	  data_arr_2_ram_single_0_douta or data_arr_3_ram_single_0_douta)
  begin
    case (v__h375911)
      2'd0: v__h380270 = data_arr_0_ram_single_0_douta;
      2'd1: v__h380270 = data_arr_1_ram_single_0_douta;
      2'd2: v__h380270 = data_arr_2_ram_single_0_douta;
      2'd3: v__h380270 = data_arr_3_ram_single_0_douta;
    endcase
  end
  always@(v__h375911 or
	  tag_arr_0_ram_single_0_douta or
	  tag_arr_1_ram_single_0_douta or
	  tag_arr_2_ram_single_0_douta or tag_arr_3_ram_single_0_douta)
  begin
    case (v__h375911)
      2'd0: v__h379929 = tag_arr_0_ram_single_0_douta;
      2'd1: v__h379929 = tag_arr_1_ram_single_0_douta;
      2'd2: v__h379929 = tag_arr_2_ram_single_0_douta;
      2'd3: v__h379929 = tag_arr_3_ram_single_0_douta;
    endcase
  end
  always@(x__h28162 or
	  tag_arr_0_ram_single_0_douta or
	  tag_arr_1_ram_single_0_douta or
	  tag_arr_2_ram_single_0_douta or tag_arr_3_ram_single_0_douta)
  begin
    case (x__h28162[1:0])
      2'd0:
	  SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261 =
	      tag_arr_0_ram_single_0_douta;
      2'd1:
	  SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261 =
	      tag_arr_1_ram_single_0_douta;
      2'd2:
	  SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261 =
	      tag_arr_2_ram_single_0_douta;
      2'd3:
	  SEL_ARR_tag_arr_0_rg_output_0_port1__read__56__ETC___d261 =
	      tag_arr_3_ram_single_0_douta;
    endcase
  end
  always@(rg_fbwriteback or
	  fb_dirty_0 or
	  fb_dirty_1 or
	  fb_dirty_2 or
	  fb_dirty_3 or fb_dirty_4 or fb_dirty_5 or fb_dirty_6 or fb_dirty_7)
  begin
    case (rg_fbwriteback)
      3'd0:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_0;
      3'd1:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_1;
      3'd2:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_2;
      3'd3:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_3;
      3'd4:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_4;
      3'd5:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_5;
      3'd6:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_6;
      3'd7:
	  SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884 =
	      fb_dirty_7;
    endcase
  end
  always@(rg_storehead or store_io_0 or store_io_1)
  begin
    case (rg_storehead)
      1'd0:
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 =
	      store_io_0;
      1'd1:
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 =
	      store_io_1;
    endcase
  end
  always@(rg_storehead or store_data_0 or store_data_1)
  begin
    case (rg_storehead)
      1'd0:
	  SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098 =
	      store_data_0;
      1'd1:
	  SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098 =
	      store_data_1;
    endcase
  end
  always@(rg_storehead or store_valid_0_1 or store_valid_1_1)
  begin
    case (rg_storehead)
      1'd0:
	  CASE_rg_storehead_0_store_valid_0_1_1_store_va_ETC__q4 =
	      store_valid_0_1;
      1'd1:
	  CASE_rg_storehead_0_store_valid_0_1_1_store_va_ETC__q4 =
	      store_valid_1_1;
    endcase
  end
  always@(ff_core_request_D_OUT or x__read__h21625 or word___1__h307702)
  begin
    case (ff_core_request_D_OUT[74:73])
      2'd0, 2'd2: y_avValue_snd__h299337 = word___1__h307702;
      default: y_avValue_snd__h299337 = x__read__h21625;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  word__h299361 or
	  word99361_BITS_7_TO_0__q5 or
	  word99361_BITS_15_TO_0__q6 or word99361_BITS_31_TO_0__q7)
  begin
    case (ff_core_request_D_OUT[72:70])
      3'b0:
	  word__h307867 =
	      { {56{word99361_BITS_7_TO_0__q5[7]}},
		word99361_BITS_7_TO_0__q5 };
      3'b001:
	  word__h307867 =
	      { {48{word99361_BITS_15_TO_0__q6[15]}},
		word99361_BITS_15_TO_0__q6 };
      3'b010:
	  word__h307867 =
	      { {32{word99361_BITS_31_TO_0__q7[31]}},
		word99361_BITS_31_TO_0__q7 };
      3'b100: word__h307867 = { 56'd0, word__h299361[7:0] };
      3'b101: word__h307867 = { 48'd0, word__h299361[15:0] };
      3'b110: word__h307867 = { 32'd0, word__h299361[31:0] };
      default: word__h307867 = word__h299361;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  op1__h296828 or
	  op2__h296827 or
	  IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1793 or
	  IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1788)
  begin
    case (ff_core_request_D_OUT[4:1])
      4'b0:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      op1__h296828 + op2__h296827;
      4'b0010:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      op1__h296828 ^ op2__h296827;
      4'b0011:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      op2__h296827;
      4'b0100:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      op1__h296828 | op2__h296827;
      4'b0110:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      op1__h296828 & op2__h296827;
      4'b1000:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1793 ?
		op1__h296828 :
		op2__h296827;
      4'b1010:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1793 ?
		op2__h296827 :
		op1__h296828;
      4'b1100:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1788 ?
		op1__h296828 :
		op2__h296827;
      4'b1110:
	  IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
	      IF_ff_core_request_first__4_BIT_5_769_THEN_IF__ETC___d1788 ?
		op2__h296827 :
		op1__h296828;
      default: IF_ff_core_request_first__4_BITS_4_TO_1_767_EQ_ETC___d1805 =
		   op1__h296828;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0:
	  x__h296016 =
	      {8{IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806[7:0]}};
      2'b01:
	  x__h296016 =
	      {4{IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806[15:0]}};
      2'b10:
	  x__h296016 =
	      {2{IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806[31:0]}};
      2'd3:
	  x__h296016 =
	      IF_ff_core_request_first__4_BITS_74_TO_73_447__ETC___d1806;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        data_arr_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	data_arr_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	data_arr_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	data_arr_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
	ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_nc_read_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	repl_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	repl_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_readdone <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tag_arr_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	tag_arr_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	tag_arr_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	tag_arr_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
      end
    else
      begin
        if (data_arr_0_rg_output_0_EN)
	  data_arr_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      data_arr_0_rg_output_0_D_IN;
	if (data_arr_1_rg_output_0_EN)
	  data_arr_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      data_arr_1_rg_output_0_D_IN;
	if (data_arr_2_rg_output_0_EN)
	  data_arr_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      data_arr_2_rg_output_0_D_IN;
	if (data_arr_3_rg_output_0_EN)
	  data_arr_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      data_arr_3_rg_output_0_D_IN;
	if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_nc_read_response_rv_EN)
	  ff_nc_read_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_nc_read_response_rv_D_IN;
	if (ff_ptw_response_rv_EN)
	  ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY ff_ptw_response_rv_D_IN;
	if (ff_read_mem_response_rv_EN)
	  ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_read_mem_response_rv_D_IN;
	if (ff_write_mem_response_rv_EN)
	  ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_write_mem_response_rv_D_IN;
	if (repl_v_count_0_EN)
	  repl_v_count_0 <= `BSV_ASSIGNMENT_DELAY repl_v_count_0_D_IN;
	if (repl_v_count_1_EN)
	  repl_v_count_1 <= `BSV_ASSIGNMENT_DELAY repl_v_count_1_D_IN;
	if (repl_v_count_10_EN)
	  repl_v_count_10 <= `BSV_ASSIGNMENT_DELAY repl_v_count_10_D_IN;
	if (repl_v_count_11_EN)
	  repl_v_count_11 <= `BSV_ASSIGNMENT_DELAY repl_v_count_11_D_IN;
	if (repl_v_count_12_EN)
	  repl_v_count_12 <= `BSV_ASSIGNMENT_DELAY repl_v_count_12_D_IN;
	if (repl_v_count_13_EN)
	  repl_v_count_13 <= `BSV_ASSIGNMENT_DELAY repl_v_count_13_D_IN;
	if (repl_v_count_14_EN)
	  repl_v_count_14 <= `BSV_ASSIGNMENT_DELAY repl_v_count_14_D_IN;
	if (repl_v_count_15_EN)
	  repl_v_count_15 <= `BSV_ASSIGNMENT_DELAY repl_v_count_15_D_IN;
	if (repl_v_count_16_EN)
	  repl_v_count_16 <= `BSV_ASSIGNMENT_DELAY repl_v_count_16_D_IN;
	if (repl_v_count_17_EN)
	  repl_v_count_17 <= `BSV_ASSIGNMENT_DELAY repl_v_count_17_D_IN;
	if (repl_v_count_18_EN)
	  repl_v_count_18 <= `BSV_ASSIGNMENT_DELAY repl_v_count_18_D_IN;
	if (repl_v_count_19_EN)
	  repl_v_count_19 <= `BSV_ASSIGNMENT_DELAY repl_v_count_19_D_IN;
	if (repl_v_count_2_EN)
	  repl_v_count_2 <= `BSV_ASSIGNMENT_DELAY repl_v_count_2_D_IN;
	if (repl_v_count_20_EN)
	  repl_v_count_20 <= `BSV_ASSIGNMENT_DELAY repl_v_count_20_D_IN;
	if (repl_v_count_21_EN)
	  repl_v_count_21 <= `BSV_ASSIGNMENT_DELAY repl_v_count_21_D_IN;
	if (repl_v_count_22_EN)
	  repl_v_count_22 <= `BSV_ASSIGNMENT_DELAY repl_v_count_22_D_IN;
	if (repl_v_count_23_EN)
	  repl_v_count_23 <= `BSV_ASSIGNMENT_DELAY repl_v_count_23_D_IN;
	if (repl_v_count_24_EN)
	  repl_v_count_24 <= `BSV_ASSIGNMENT_DELAY repl_v_count_24_D_IN;
	if (repl_v_count_25_EN)
	  repl_v_count_25 <= `BSV_ASSIGNMENT_DELAY repl_v_count_25_D_IN;
	if (repl_v_count_26_EN)
	  repl_v_count_26 <= `BSV_ASSIGNMENT_DELAY repl_v_count_26_D_IN;
	if (repl_v_count_27_EN)
	  repl_v_count_27 <= `BSV_ASSIGNMENT_DELAY repl_v_count_27_D_IN;
	if (repl_v_count_28_EN)
	  repl_v_count_28 <= `BSV_ASSIGNMENT_DELAY repl_v_count_28_D_IN;
	if (repl_v_count_29_EN)
	  repl_v_count_29 <= `BSV_ASSIGNMENT_DELAY repl_v_count_29_D_IN;
	if (repl_v_count_3_EN)
	  repl_v_count_3 <= `BSV_ASSIGNMENT_DELAY repl_v_count_3_D_IN;
	if (repl_v_count_30_EN)
	  repl_v_count_30 <= `BSV_ASSIGNMENT_DELAY repl_v_count_30_D_IN;
	if (repl_v_count_31_EN)
	  repl_v_count_31 <= `BSV_ASSIGNMENT_DELAY repl_v_count_31_D_IN;
	if (repl_v_count_32_EN)
	  repl_v_count_32 <= `BSV_ASSIGNMENT_DELAY repl_v_count_32_D_IN;
	if (repl_v_count_33_EN)
	  repl_v_count_33 <= `BSV_ASSIGNMENT_DELAY repl_v_count_33_D_IN;
	if (repl_v_count_34_EN)
	  repl_v_count_34 <= `BSV_ASSIGNMENT_DELAY repl_v_count_34_D_IN;
	if (repl_v_count_35_EN)
	  repl_v_count_35 <= `BSV_ASSIGNMENT_DELAY repl_v_count_35_D_IN;
	if (repl_v_count_36_EN)
	  repl_v_count_36 <= `BSV_ASSIGNMENT_DELAY repl_v_count_36_D_IN;
	if (repl_v_count_37_EN)
	  repl_v_count_37 <= `BSV_ASSIGNMENT_DELAY repl_v_count_37_D_IN;
	if (repl_v_count_38_EN)
	  repl_v_count_38 <= `BSV_ASSIGNMENT_DELAY repl_v_count_38_D_IN;
	if (repl_v_count_39_EN)
	  repl_v_count_39 <= `BSV_ASSIGNMENT_DELAY repl_v_count_39_D_IN;
	if (repl_v_count_4_EN)
	  repl_v_count_4 <= `BSV_ASSIGNMENT_DELAY repl_v_count_4_D_IN;
	if (repl_v_count_40_EN)
	  repl_v_count_40 <= `BSV_ASSIGNMENT_DELAY repl_v_count_40_D_IN;
	if (repl_v_count_41_EN)
	  repl_v_count_41 <= `BSV_ASSIGNMENT_DELAY repl_v_count_41_D_IN;
	if (repl_v_count_42_EN)
	  repl_v_count_42 <= `BSV_ASSIGNMENT_DELAY repl_v_count_42_D_IN;
	if (repl_v_count_43_EN)
	  repl_v_count_43 <= `BSV_ASSIGNMENT_DELAY repl_v_count_43_D_IN;
	if (repl_v_count_44_EN)
	  repl_v_count_44 <= `BSV_ASSIGNMENT_DELAY repl_v_count_44_D_IN;
	if (repl_v_count_45_EN)
	  repl_v_count_45 <= `BSV_ASSIGNMENT_DELAY repl_v_count_45_D_IN;
	if (repl_v_count_46_EN)
	  repl_v_count_46 <= `BSV_ASSIGNMENT_DELAY repl_v_count_46_D_IN;
	if (repl_v_count_47_EN)
	  repl_v_count_47 <= `BSV_ASSIGNMENT_DELAY repl_v_count_47_D_IN;
	if (repl_v_count_48_EN)
	  repl_v_count_48 <= `BSV_ASSIGNMENT_DELAY repl_v_count_48_D_IN;
	if (repl_v_count_49_EN)
	  repl_v_count_49 <= `BSV_ASSIGNMENT_DELAY repl_v_count_49_D_IN;
	if (repl_v_count_5_EN)
	  repl_v_count_5 <= `BSV_ASSIGNMENT_DELAY repl_v_count_5_D_IN;
	if (repl_v_count_50_EN)
	  repl_v_count_50 <= `BSV_ASSIGNMENT_DELAY repl_v_count_50_D_IN;
	if (repl_v_count_51_EN)
	  repl_v_count_51 <= `BSV_ASSIGNMENT_DELAY repl_v_count_51_D_IN;
	if (repl_v_count_52_EN)
	  repl_v_count_52 <= `BSV_ASSIGNMENT_DELAY repl_v_count_52_D_IN;
	if (repl_v_count_53_EN)
	  repl_v_count_53 <= `BSV_ASSIGNMENT_DELAY repl_v_count_53_D_IN;
	if (repl_v_count_54_EN)
	  repl_v_count_54 <= `BSV_ASSIGNMENT_DELAY repl_v_count_54_D_IN;
	if (repl_v_count_55_EN)
	  repl_v_count_55 <= `BSV_ASSIGNMENT_DELAY repl_v_count_55_D_IN;
	if (repl_v_count_56_EN)
	  repl_v_count_56 <= `BSV_ASSIGNMENT_DELAY repl_v_count_56_D_IN;
	if (repl_v_count_57_EN)
	  repl_v_count_57 <= `BSV_ASSIGNMENT_DELAY repl_v_count_57_D_IN;
	if (repl_v_count_58_EN)
	  repl_v_count_58 <= `BSV_ASSIGNMENT_DELAY repl_v_count_58_D_IN;
	if (repl_v_count_59_EN)
	  repl_v_count_59 <= `BSV_ASSIGNMENT_DELAY repl_v_count_59_D_IN;
	if (repl_v_count_6_EN)
	  repl_v_count_6 <= `BSV_ASSIGNMENT_DELAY repl_v_count_6_D_IN;
	if (repl_v_count_60_EN)
	  repl_v_count_60 <= `BSV_ASSIGNMENT_DELAY repl_v_count_60_D_IN;
	if (repl_v_count_61_EN)
	  repl_v_count_61 <= `BSV_ASSIGNMENT_DELAY repl_v_count_61_D_IN;
	if (repl_v_count_62_EN)
	  repl_v_count_62 <= `BSV_ASSIGNMENT_DELAY repl_v_count_62_D_IN;
	if (repl_v_count_63_EN)
	  repl_v_count_63 <= `BSV_ASSIGNMENT_DELAY repl_v_count_63_D_IN;
	if (repl_v_count_7_EN)
	  repl_v_count_7 <= `BSV_ASSIGNMENT_DELAY repl_v_count_7_D_IN;
	if (repl_v_count_8_EN)
	  repl_v_count_8 <= `BSV_ASSIGNMENT_DELAY repl_v_count_8_D_IN;
	if (repl_v_count_9_EN)
	  repl_v_count_9 <= `BSV_ASSIGNMENT_DELAY repl_v_count_9_D_IN;
	if (rg_readdone_EN)
	  rg_readdone <= `BSV_ASSIGNMENT_DELAY rg_readdone_D_IN;
	if (tag_arr_0_rg_output_0_EN)
	  tag_arr_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      tag_arr_0_rg_output_0_D_IN;
	if (tag_arr_1_rg_output_0_EN)
	  tag_arr_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      tag_arr_1_rg_output_0_D_IN;
	if (tag_arr_2_rg_output_0_EN)
	  tag_arr_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      tag_arr_2_rg_output_0_D_IN;
	if (tag_arr_3_rg_output_0_EN)
	  tag_arr_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      tag_arr_3_rg_output_0_D_IN;
      end
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      fb_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_addr_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      fb_dataline_0 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_1 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_2 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_3 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_4 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_5 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_6 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dataline_7 <= `BSV_ASSIGNMENT_DELAY 512'd0;
      fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_enables_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_4 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_5 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_6 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_enables_7 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      fb_err_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_err_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      fb_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_dirty_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_fbfillenable <= `BSV_ASSIGNMENT_DELAY 8'd0;
      rg_fbmissallocate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      rg_fbwriteback <= `BSV_ASSIGNMENT_DELAY 3'd0;
      rg_fence_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_fenceinit <= `BSV_ASSIGNMENT_DELAY 1'd1;
      rg_globaldirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_latest_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
      rg_miss_ongoing <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_polling <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_replaylatest <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_set_select <= `BSV_ASSIGNMENT_DELAY 6'd0;
      rg_storehead <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_storetail <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      rg_way_select <= `BSV_ASSIGNMENT_DELAY 4'd1;
      store_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      store_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      store_data_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      store_data_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      store_epoch_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_epoch_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_fbindex_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
      store_fbindex_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
      store_io_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_io_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_size_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      store_size_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      store_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_valid_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      store_valid_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (fb_addr_0_EN) fb_addr_0 <= `BSV_ASSIGNMENT_DELAY fb_addr_0_D_IN;
      if (fb_addr_1_EN) fb_addr_1 <= `BSV_ASSIGNMENT_DELAY fb_addr_1_D_IN;
      if (fb_addr_2_EN) fb_addr_2 <= `BSV_ASSIGNMENT_DELAY fb_addr_2_D_IN;
      if (fb_addr_3_EN) fb_addr_3 <= `BSV_ASSIGNMENT_DELAY fb_addr_3_D_IN;
      if (fb_addr_4_EN) fb_addr_4 <= `BSV_ASSIGNMENT_DELAY fb_addr_4_D_IN;
      if (fb_addr_5_EN) fb_addr_5 <= `BSV_ASSIGNMENT_DELAY fb_addr_5_D_IN;
      if (fb_addr_6_EN) fb_addr_6 <= `BSV_ASSIGNMENT_DELAY fb_addr_6_D_IN;
      if (fb_addr_7_EN) fb_addr_7 <= `BSV_ASSIGNMENT_DELAY fb_addr_7_D_IN;
      if (fb_dataline_0_EN)
	fb_dataline_0 <= `BSV_ASSIGNMENT_DELAY fb_dataline_0_D_IN;
      if (fb_dataline_1_EN)
	fb_dataline_1 <= `BSV_ASSIGNMENT_DELAY fb_dataline_1_D_IN;
      if (fb_dataline_2_EN)
	fb_dataline_2 <= `BSV_ASSIGNMENT_DELAY fb_dataline_2_D_IN;
      if (fb_dataline_3_EN)
	fb_dataline_3 <= `BSV_ASSIGNMENT_DELAY fb_dataline_3_D_IN;
      if (fb_dataline_4_EN)
	fb_dataline_4 <= `BSV_ASSIGNMENT_DELAY fb_dataline_4_D_IN;
      if (fb_dataline_5_EN)
	fb_dataline_5 <= `BSV_ASSIGNMENT_DELAY fb_dataline_5_D_IN;
      if (fb_dataline_6_EN)
	fb_dataline_6 <= `BSV_ASSIGNMENT_DELAY fb_dataline_6_D_IN;
      if (fb_dataline_7_EN)
	fb_dataline_7 <= `BSV_ASSIGNMENT_DELAY fb_dataline_7_D_IN;
      if (fb_dirty_0_EN) fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY fb_dirty_0_D_IN;
      if (fb_dirty_1_EN) fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY fb_dirty_1_D_IN;
      if (fb_dirty_2_EN) fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY fb_dirty_2_D_IN;
      if (fb_dirty_3_EN) fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY fb_dirty_3_D_IN;
      if (fb_dirty_4_EN) fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY fb_dirty_4_D_IN;
      if (fb_dirty_5_EN) fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY fb_dirty_5_D_IN;
      if (fb_dirty_6_EN) fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY fb_dirty_6_D_IN;
      if (fb_dirty_7_EN) fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY fb_dirty_7_D_IN;
      if (fb_enables_0_EN)
	fb_enables_0 <= `BSV_ASSIGNMENT_DELAY fb_enables_0_D_IN;
      if (fb_enables_1_EN)
	fb_enables_1 <= `BSV_ASSIGNMENT_DELAY fb_enables_1_D_IN;
      if (fb_enables_2_EN)
	fb_enables_2 <= `BSV_ASSIGNMENT_DELAY fb_enables_2_D_IN;
      if (fb_enables_3_EN)
	fb_enables_3 <= `BSV_ASSIGNMENT_DELAY fb_enables_3_D_IN;
      if (fb_enables_4_EN)
	fb_enables_4 <= `BSV_ASSIGNMENT_DELAY fb_enables_4_D_IN;
      if (fb_enables_5_EN)
	fb_enables_5 <= `BSV_ASSIGNMENT_DELAY fb_enables_5_D_IN;
      if (fb_enables_6_EN)
	fb_enables_6 <= `BSV_ASSIGNMENT_DELAY fb_enables_6_D_IN;
      if (fb_enables_7_EN)
	fb_enables_7 <= `BSV_ASSIGNMENT_DELAY fb_enables_7_D_IN;
      if (fb_err_0_EN) fb_err_0 <= `BSV_ASSIGNMENT_DELAY fb_err_0_D_IN;
      if (fb_err_1_EN) fb_err_1 <= `BSV_ASSIGNMENT_DELAY fb_err_1_D_IN;
      if (fb_err_2_EN) fb_err_2 <= `BSV_ASSIGNMENT_DELAY fb_err_2_D_IN;
      if (fb_err_3_EN) fb_err_3 <= `BSV_ASSIGNMENT_DELAY fb_err_3_D_IN;
      if (fb_err_4_EN) fb_err_4 <= `BSV_ASSIGNMENT_DELAY fb_err_4_D_IN;
      if (fb_err_5_EN) fb_err_5 <= `BSV_ASSIGNMENT_DELAY fb_err_5_D_IN;
      if (fb_err_6_EN) fb_err_6 <= `BSV_ASSIGNMENT_DELAY fb_err_6_D_IN;
      if (fb_err_7_EN) fb_err_7 <= `BSV_ASSIGNMENT_DELAY fb_err_7_D_IN;
      if (fb_valid_0_EN) fb_valid_0 <= `BSV_ASSIGNMENT_DELAY fb_valid_0_D_IN;
      if (fb_valid_1_EN) fb_valid_1 <= `BSV_ASSIGNMENT_DELAY fb_valid_1_D_IN;
      if (fb_valid_2_EN) fb_valid_2 <= `BSV_ASSIGNMENT_DELAY fb_valid_2_D_IN;
      if (fb_valid_3_EN) fb_valid_3 <= `BSV_ASSIGNMENT_DELAY fb_valid_3_D_IN;
      if (fb_valid_4_EN) fb_valid_4 <= `BSV_ASSIGNMENT_DELAY fb_valid_4_D_IN;
      if (fb_valid_5_EN) fb_valid_5 <= `BSV_ASSIGNMENT_DELAY fb_valid_5_D_IN;
      if (fb_valid_6_EN) fb_valid_6 <= `BSV_ASSIGNMENT_DELAY fb_valid_6_D_IN;
      if (fb_valid_7_EN) fb_valid_7 <= `BSV_ASSIGNMENT_DELAY fb_valid_7_D_IN;
      if (rg_dirty_0_EN) rg_dirty_0 <= `BSV_ASSIGNMENT_DELAY rg_dirty_0_D_IN;
      if (rg_dirty_1_EN) rg_dirty_1 <= `BSV_ASSIGNMENT_DELAY rg_dirty_1_D_IN;
      if (rg_dirty_10_EN)
	rg_dirty_10 <= `BSV_ASSIGNMENT_DELAY rg_dirty_10_D_IN;
      if (rg_dirty_11_EN)
	rg_dirty_11 <= `BSV_ASSIGNMENT_DELAY rg_dirty_11_D_IN;
      if (rg_dirty_12_EN)
	rg_dirty_12 <= `BSV_ASSIGNMENT_DELAY rg_dirty_12_D_IN;
      if (rg_dirty_13_EN)
	rg_dirty_13 <= `BSV_ASSIGNMENT_DELAY rg_dirty_13_D_IN;
      if (rg_dirty_14_EN)
	rg_dirty_14 <= `BSV_ASSIGNMENT_DELAY rg_dirty_14_D_IN;
      if (rg_dirty_15_EN)
	rg_dirty_15 <= `BSV_ASSIGNMENT_DELAY rg_dirty_15_D_IN;
      if (rg_dirty_16_EN)
	rg_dirty_16 <= `BSV_ASSIGNMENT_DELAY rg_dirty_16_D_IN;
      if (rg_dirty_17_EN)
	rg_dirty_17 <= `BSV_ASSIGNMENT_DELAY rg_dirty_17_D_IN;
      if (rg_dirty_18_EN)
	rg_dirty_18 <= `BSV_ASSIGNMENT_DELAY rg_dirty_18_D_IN;
      if (rg_dirty_19_EN)
	rg_dirty_19 <= `BSV_ASSIGNMENT_DELAY rg_dirty_19_D_IN;
      if (rg_dirty_2_EN) rg_dirty_2 <= `BSV_ASSIGNMENT_DELAY rg_dirty_2_D_IN;
      if (rg_dirty_20_EN)
	rg_dirty_20 <= `BSV_ASSIGNMENT_DELAY rg_dirty_20_D_IN;
      if (rg_dirty_21_EN)
	rg_dirty_21 <= `BSV_ASSIGNMENT_DELAY rg_dirty_21_D_IN;
      if (rg_dirty_22_EN)
	rg_dirty_22 <= `BSV_ASSIGNMENT_DELAY rg_dirty_22_D_IN;
      if (rg_dirty_23_EN)
	rg_dirty_23 <= `BSV_ASSIGNMENT_DELAY rg_dirty_23_D_IN;
      if (rg_dirty_24_EN)
	rg_dirty_24 <= `BSV_ASSIGNMENT_DELAY rg_dirty_24_D_IN;
      if (rg_dirty_25_EN)
	rg_dirty_25 <= `BSV_ASSIGNMENT_DELAY rg_dirty_25_D_IN;
      if (rg_dirty_26_EN)
	rg_dirty_26 <= `BSV_ASSIGNMENT_DELAY rg_dirty_26_D_IN;
      if (rg_dirty_27_EN)
	rg_dirty_27 <= `BSV_ASSIGNMENT_DELAY rg_dirty_27_D_IN;
      if (rg_dirty_28_EN)
	rg_dirty_28 <= `BSV_ASSIGNMENT_DELAY rg_dirty_28_D_IN;
      if (rg_dirty_29_EN)
	rg_dirty_29 <= `BSV_ASSIGNMENT_DELAY rg_dirty_29_D_IN;
      if (rg_dirty_3_EN) rg_dirty_3 <= `BSV_ASSIGNMENT_DELAY rg_dirty_3_D_IN;
      if (rg_dirty_30_EN)
	rg_dirty_30 <= `BSV_ASSIGNMENT_DELAY rg_dirty_30_D_IN;
      if (rg_dirty_31_EN)
	rg_dirty_31 <= `BSV_ASSIGNMENT_DELAY rg_dirty_31_D_IN;
      if (rg_dirty_32_EN)
	rg_dirty_32 <= `BSV_ASSIGNMENT_DELAY rg_dirty_32_D_IN;
      if (rg_dirty_33_EN)
	rg_dirty_33 <= `BSV_ASSIGNMENT_DELAY rg_dirty_33_D_IN;
      if (rg_dirty_34_EN)
	rg_dirty_34 <= `BSV_ASSIGNMENT_DELAY rg_dirty_34_D_IN;
      if (rg_dirty_35_EN)
	rg_dirty_35 <= `BSV_ASSIGNMENT_DELAY rg_dirty_35_D_IN;
      if (rg_dirty_36_EN)
	rg_dirty_36 <= `BSV_ASSIGNMENT_DELAY rg_dirty_36_D_IN;
      if (rg_dirty_37_EN)
	rg_dirty_37 <= `BSV_ASSIGNMENT_DELAY rg_dirty_37_D_IN;
      if (rg_dirty_38_EN)
	rg_dirty_38 <= `BSV_ASSIGNMENT_DELAY rg_dirty_38_D_IN;
      if (rg_dirty_39_EN)
	rg_dirty_39 <= `BSV_ASSIGNMENT_DELAY rg_dirty_39_D_IN;
      if (rg_dirty_4_EN) rg_dirty_4 <= `BSV_ASSIGNMENT_DELAY rg_dirty_4_D_IN;
      if (rg_dirty_40_EN)
	rg_dirty_40 <= `BSV_ASSIGNMENT_DELAY rg_dirty_40_D_IN;
      if (rg_dirty_41_EN)
	rg_dirty_41 <= `BSV_ASSIGNMENT_DELAY rg_dirty_41_D_IN;
      if (rg_dirty_42_EN)
	rg_dirty_42 <= `BSV_ASSIGNMENT_DELAY rg_dirty_42_D_IN;
      if (rg_dirty_43_EN)
	rg_dirty_43 <= `BSV_ASSIGNMENT_DELAY rg_dirty_43_D_IN;
      if (rg_dirty_44_EN)
	rg_dirty_44 <= `BSV_ASSIGNMENT_DELAY rg_dirty_44_D_IN;
      if (rg_dirty_45_EN)
	rg_dirty_45 <= `BSV_ASSIGNMENT_DELAY rg_dirty_45_D_IN;
      if (rg_dirty_46_EN)
	rg_dirty_46 <= `BSV_ASSIGNMENT_DELAY rg_dirty_46_D_IN;
      if (rg_dirty_47_EN)
	rg_dirty_47 <= `BSV_ASSIGNMENT_DELAY rg_dirty_47_D_IN;
      if (rg_dirty_48_EN)
	rg_dirty_48 <= `BSV_ASSIGNMENT_DELAY rg_dirty_48_D_IN;
      if (rg_dirty_49_EN)
	rg_dirty_49 <= `BSV_ASSIGNMENT_DELAY rg_dirty_49_D_IN;
      if (rg_dirty_5_EN) rg_dirty_5 <= `BSV_ASSIGNMENT_DELAY rg_dirty_5_D_IN;
      if (rg_dirty_50_EN)
	rg_dirty_50 <= `BSV_ASSIGNMENT_DELAY rg_dirty_50_D_IN;
      if (rg_dirty_51_EN)
	rg_dirty_51 <= `BSV_ASSIGNMENT_DELAY rg_dirty_51_D_IN;
      if (rg_dirty_52_EN)
	rg_dirty_52 <= `BSV_ASSIGNMENT_DELAY rg_dirty_52_D_IN;
      if (rg_dirty_53_EN)
	rg_dirty_53 <= `BSV_ASSIGNMENT_DELAY rg_dirty_53_D_IN;
      if (rg_dirty_54_EN)
	rg_dirty_54 <= `BSV_ASSIGNMENT_DELAY rg_dirty_54_D_IN;
      if (rg_dirty_55_EN)
	rg_dirty_55 <= `BSV_ASSIGNMENT_DELAY rg_dirty_55_D_IN;
      if (rg_dirty_56_EN)
	rg_dirty_56 <= `BSV_ASSIGNMENT_DELAY rg_dirty_56_D_IN;
      if (rg_dirty_57_EN)
	rg_dirty_57 <= `BSV_ASSIGNMENT_DELAY rg_dirty_57_D_IN;
      if (rg_dirty_58_EN)
	rg_dirty_58 <= `BSV_ASSIGNMENT_DELAY rg_dirty_58_D_IN;
      if (rg_dirty_59_EN)
	rg_dirty_59 <= `BSV_ASSIGNMENT_DELAY rg_dirty_59_D_IN;
      if (rg_dirty_6_EN) rg_dirty_6 <= `BSV_ASSIGNMENT_DELAY rg_dirty_6_D_IN;
      if (rg_dirty_60_EN)
	rg_dirty_60 <= `BSV_ASSIGNMENT_DELAY rg_dirty_60_D_IN;
      if (rg_dirty_61_EN)
	rg_dirty_61 <= `BSV_ASSIGNMENT_DELAY rg_dirty_61_D_IN;
      if (rg_dirty_62_EN)
	rg_dirty_62 <= `BSV_ASSIGNMENT_DELAY rg_dirty_62_D_IN;
      if (rg_dirty_63_EN)
	rg_dirty_63 <= `BSV_ASSIGNMENT_DELAY rg_dirty_63_D_IN;
      if (rg_dirty_7_EN) rg_dirty_7 <= `BSV_ASSIGNMENT_DELAY rg_dirty_7_D_IN;
      if (rg_dirty_8_EN) rg_dirty_8 <= `BSV_ASSIGNMENT_DELAY rg_dirty_8_D_IN;
      if (rg_dirty_9_EN) rg_dirty_9 <= `BSV_ASSIGNMENT_DELAY rg_dirty_9_D_IN;
      if (rg_fbfillenable_EN)
	rg_fbfillenable <= `BSV_ASSIGNMENT_DELAY rg_fbfillenable_D_IN;
      if (rg_fbmissallocate_EN)
	rg_fbmissallocate <= `BSV_ASSIGNMENT_DELAY rg_fbmissallocate_D_IN;
      if (rg_fbwriteback_EN)
	rg_fbwriteback <= `BSV_ASSIGNMENT_DELAY rg_fbwriteback_D_IN;
      if (rg_fence_pending_EN)
	rg_fence_pending <= `BSV_ASSIGNMENT_DELAY rg_fence_pending_D_IN;
      if (rg_fence_stall_EN)
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
      if (rg_fenceinit_EN)
	rg_fenceinit <= `BSV_ASSIGNMENT_DELAY rg_fenceinit_D_IN;
      if (rg_globaldirty_EN)
	rg_globaldirty <= `BSV_ASSIGNMENT_DELAY rg_globaldirty_D_IN;
      if (rg_latest_index_EN)
	rg_latest_index <= `BSV_ASSIGNMENT_DELAY rg_latest_index_D_IN;
      if (rg_miss_ongoing_EN)
	rg_miss_ongoing <= `BSV_ASSIGNMENT_DELAY rg_miss_ongoing_D_IN;
      if (rg_polling_EN) rg_polling <= `BSV_ASSIGNMENT_DELAY rg_polling_D_IN;
      if (rg_replaylatest_EN)
	rg_replaylatest <= `BSV_ASSIGNMENT_DELAY rg_replaylatest_D_IN;
      if (rg_set_select_EN)
	rg_set_select <= `BSV_ASSIGNMENT_DELAY rg_set_select_D_IN;
      if (rg_storehead_EN)
	rg_storehead <= `BSV_ASSIGNMENT_DELAY rg_storehead_D_IN;
      if (rg_storetail_EN)
	rg_storetail <= `BSV_ASSIGNMENT_DELAY rg_storetail_D_IN;
      if (rg_valid_0_EN) rg_valid_0 <= `BSV_ASSIGNMENT_DELAY rg_valid_0_D_IN;
      if (rg_valid_1_EN) rg_valid_1 <= `BSV_ASSIGNMENT_DELAY rg_valid_1_D_IN;
      if (rg_valid_10_EN)
	rg_valid_10 <= `BSV_ASSIGNMENT_DELAY rg_valid_10_D_IN;
      if (rg_valid_11_EN)
	rg_valid_11 <= `BSV_ASSIGNMENT_DELAY rg_valid_11_D_IN;
      if (rg_valid_12_EN)
	rg_valid_12 <= `BSV_ASSIGNMENT_DELAY rg_valid_12_D_IN;
      if (rg_valid_13_EN)
	rg_valid_13 <= `BSV_ASSIGNMENT_DELAY rg_valid_13_D_IN;
      if (rg_valid_14_EN)
	rg_valid_14 <= `BSV_ASSIGNMENT_DELAY rg_valid_14_D_IN;
      if (rg_valid_15_EN)
	rg_valid_15 <= `BSV_ASSIGNMENT_DELAY rg_valid_15_D_IN;
      if (rg_valid_16_EN)
	rg_valid_16 <= `BSV_ASSIGNMENT_DELAY rg_valid_16_D_IN;
      if (rg_valid_17_EN)
	rg_valid_17 <= `BSV_ASSIGNMENT_DELAY rg_valid_17_D_IN;
      if (rg_valid_18_EN)
	rg_valid_18 <= `BSV_ASSIGNMENT_DELAY rg_valid_18_D_IN;
      if (rg_valid_19_EN)
	rg_valid_19 <= `BSV_ASSIGNMENT_DELAY rg_valid_19_D_IN;
      if (rg_valid_2_EN) rg_valid_2 <= `BSV_ASSIGNMENT_DELAY rg_valid_2_D_IN;
      if (rg_valid_20_EN)
	rg_valid_20 <= `BSV_ASSIGNMENT_DELAY rg_valid_20_D_IN;
      if (rg_valid_21_EN)
	rg_valid_21 <= `BSV_ASSIGNMENT_DELAY rg_valid_21_D_IN;
      if (rg_valid_22_EN)
	rg_valid_22 <= `BSV_ASSIGNMENT_DELAY rg_valid_22_D_IN;
      if (rg_valid_23_EN)
	rg_valid_23 <= `BSV_ASSIGNMENT_DELAY rg_valid_23_D_IN;
      if (rg_valid_24_EN)
	rg_valid_24 <= `BSV_ASSIGNMENT_DELAY rg_valid_24_D_IN;
      if (rg_valid_25_EN)
	rg_valid_25 <= `BSV_ASSIGNMENT_DELAY rg_valid_25_D_IN;
      if (rg_valid_26_EN)
	rg_valid_26 <= `BSV_ASSIGNMENT_DELAY rg_valid_26_D_IN;
      if (rg_valid_27_EN)
	rg_valid_27 <= `BSV_ASSIGNMENT_DELAY rg_valid_27_D_IN;
      if (rg_valid_28_EN)
	rg_valid_28 <= `BSV_ASSIGNMENT_DELAY rg_valid_28_D_IN;
      if (rg_valid_29_EN)
	rg_valid_29 <= `BSV_ASSIGNMENT_DELAY rg_valid_29_D_IN;
      if (rg_valid_3_EN) rg_valid_3 <= `BSV_ASSIGNMENT_DELAY rg_valid_3_D_IN;
      if (rg_valid_30_EN)
	rg_valid_30 <= `BSV_ASSIGNMENT_DELAY rg_valid_30_D_IN;
      if (rg_valid_31_EN)
	rg_valid_31 <= `BSV_ASSIGNMENT_DELAY rg_valid_31_D_IN;
      if (rg_valid_32_EN)
	rg_valid_32 <= `BSV_ASSIGNMENT_DELAY rg_valid_32_D_IN;
      if (rg_valid_33_EN)
	rg_valid_33 <= `BSV_ASSIGNMENT_DELAY rg_valid_33_D_IN;
      if (rg_valid_34_EN)
	rg_valid_34 <= `BSV_ASSIGNMENT_DELAY rg_valid_34_D_IN;
      if (rg_valid_35_EN)
	rg_valid_35 <= `BSV_ASSIGNMENT_DELAY rg_valid_35_D_IN;
      if (rg_valid_36_EN)
	rg_valid_36 <= `BSV_ASSIGNMENT_DELAY rg_valid_36_D_IN;
      if (rg_valid_37_EN)
	rg_valid_37 <= `BSV_ASSIGNMENT_DELAY rg_valid_37_D_IN;
      if (rg_valid_38_EN)
	rg_valid_38 <= `BSV_ASSIGNMENT_DELAY rg_valid_38_D_IN;
      if (rg_valid_39_EN)
	rg_valid_39 <= `BSV_ASSIGNMENT_DELAY rg_valid_39_D_IN;
      if (rg_valid_4_EN) rg_valid_4 <= `BSV_ASSIGNMENT_DELAY rg_valid_4_D_IN;
      if (rg_valid_40_EN)
	rg_valid_40 <= `BSV_ASSIGNMENT_DELAY rg_valid_40_D_IN;
      if (rg_valid_41_EN)
	rg_valid_41 <= `BSV_ASSIGNMENT_DELAY rg_valid_41_D_IN;
      if (rg_valid_42_EN)
	rg_valid_42 <= `BSV_ASSIGNMENT_DELAY rg_valid_42_D_IN;
      if (rg_valid_43_EN)
	rg_valid_43 <= `BSV_ASSIGNMENT_DELAY rg_valid_43_D_IN;
      if (rg_valid_44_EN)
	rg_valid_44 <= `BSV_ASSIGNMENT_DELAY rg_valid_44_D_IN;
      if (rg_valid_45_EN)
	rg_valid_45 <= `BSV_ASSIGNMENT_DELAY rg_valid_45_D_IN;
      if (rg_valid_46_EN)
	rg_valid_46 <= `BSV_ASSIGNMENT_DELAY rg_valid_46_D_IN;
      if (rg_valid_47_EN)
	rg_valid_47 <= `BSV_ASSIGNMENT_DELAY rg_valid_47_D_IN;
      if (rg_valid_48_EN)
	rg_valid_48 <= `BSV_ASSIGNMENT_DELAY rg_valid_48_D_IN;
      if (rg_valid_49_EN)
	rg_valid_49 <= `BSV_ASSIGNMENT_DELAY rg_valid_49_D_IN;
      if (rg_valid_5_EN) rg_valid_5 <= `BSV_ASSIGNMENT_DELAY rg_valid_5_D_IN;
      if (rg_valid_50_EN)
	rg_valid_50 <= `BSV_ASSIGNMENT_DELAY rg_valid_50_D_IN;
      if (rg_valid_51_EN)
	rg_valid_51 <= `BSV_ASSIGNMENT_DELAY rg_valid_51_D_IN;
      if (rg_valid_52_EN)
	rg_valid_52 <= `BSV_ASSIGNMENT_DELAY rg_valid_52_D_IN;
      if (rg_valid_53_EN)
	rg_valid_53 <= `BSV_ASSIGNMENT_DELAY rg_valid_53_D_IN;
      if (rg_valid_54_EN)
	rg_valid_54 <= `BSV_ASSIGNMENT_DELAY rg_valid_54_D_IN;
      if (rg_valid_55_EN)
	rg_valid_55 <= `BSV_ASSIGNMENT_DELAY rg_valid_55_D_IN;
      if (rg_valid_56_EN)
	rg_valid_56 <= `BSV_ASSIGNMENT_DELAY rg_valid_56_D_IN;
      if (rg_valid_57_EN)
	rg_valid_57 <= `BSV_ASSIGNMENT_DELAY rg_valid_57_D_IN;
      if (rg_valid_58_EN)
	rg_valid_58 <= `BSV_ASSIGNMENT_DELAY rg_valid_58_D_IN;
      if (rg_valid_59_EN)
	rg_valid_59 <= `BSV_ASSIGNMENT_DELAY rg_valid_59_D_IN;
      if (rg_valid_6_EN) rg_valid_6 <= `BSV_ASSIGNMENT_DELAY rg_valid_6_D_IN;
      if (rg_valid_60_EN)
	rg_valid_60 <= `BSV_ASSIGNMENT_DELAY rg_valid_60_D_IN;
      if (rg_valid_61_EN)
	rg_valid_61 <= `BSV_ASSIGNMENT_DELAY rg_valid_61_D_IN;
      if (rg_valid_62_EN)
	rg_valid_62 <= `BSV_ASSIGNMENT_DELAY rg_valid_62_D_IN;
      if (rg_valid_63_EN)
	rg_valid_63 <= `BSV_ASSIGNMENT_DELAY rg_valid_63_D_IN;
      if (rg_valid_7_EN) rg_valid_7 <= `BSV_ASSIGNMENT_DELAY rg_valid_7_D_IN;
      if (rg_valid_8_EN) rg_valid_8 <= `BSV_ASSIGNMENT_DELAY rg_valid_8_D_IN;
      if (rg_valid_9_EN) rg_valid_9 <= `BSV_ASSIGNMENT_DELAY rg_valid_9_D_IN;
      if (rg_way_select_EN)
	rg_way_select <= `BSV_ASSIGNMENT_DELAY rg_way_select_D_IN;
      if (store_addr_0_EN)
	store_addr_0 <= `BSV_ASSIGNMENT_DELAY store_addr_0_D_IN;
      if (store_addr_1_EN)
	store_addr_1 <= `BSV_ASSIGNMENT_DELAY store_addr_1_D_IN;
      if (store_data_0_EN)
	store_data_0 <= `BSV_ASSIGNMENT_DELAY store_data_0_D_IN;
      if (store_data_1_EN)
	store_data_1 <= `BSV_ASSIGNMENT_DELAY store_data_1_D_IN;
      if (store_epoch_0_EN)
	store_epoch_0 <= `BSV_ASSIGNMENT_DELAY store_epoch_0_D_IN;
      if (store_epoch_1_EN)
	store_epoch_1 <= `BSV_ASSIGNMENT_DELAY store_epoch_1_D_IN;
      if (store_fbindex_0_EN)
	store_fbindex_0 <= `BSV_ASSIGNMENT_DELAY store_fbindex_0_D_IN;
      if (store_fbindex_1_EN)
	store_fbindex_1 <= `BSV_ASSIGNMENT_DELAY store_fbindex_1_D_IN;
      if (store_io_0_EN) store_io_0 <= `BSV_ASSIGNMENT_DELAY store_io_0_D_IN;
      if (store_io_1_EN) store_io_1 <= `BSV_ASSIGNMENT_DELAY store_io_1_D_IN;
      if (store_size_0_EN)
	store_size_0 <= `BSV_ASSIGNMENT_DELAY store_size_0_D_IN;
      if (store_size_1_EN)
	store_size_1 <= `BSV_ASSIGNMENT_DELAY store_size_1_D_IN;
      if (store_valid_0_EN)
	store_valid_0 <= `BSV_ASSIGNMENT_DELAY store_valid_0_D_IN;
      if (store_valid_0_1_EN)
	store_valid_0_1 <= `BSV_ASSIGNMENT_DELAY store_valid_0_1_D_IN;
      if (store_valid_1_EN)
	store_valid_1 <= `BSV_ASSIGNMENT_DELAY store_valid_1_D_IN;
      if (store_valid_1_1_EN)
	store_valid_1_1 <= `BSV_ASSIGNMENT_DELAY store_valid_1_1_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    data_arr_0_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_arr_1_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_arr_2_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_arr_3_rg_output_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_addr_0 = 32'hAAAAAAAA;
    fb_addr_1 = 32'hAAAAAAAA;
    fb_addr_2 = 32'hAAAAAAAA;
    fb_addr_3 = 32'hAAAAAAAA;
    fb_addr_4 = 32'hAAAAAAAA;
    fb_addr_5 = 32'hAAAAAAAA;
    fb_addr_6 = 32'hAAAAAAAA;
    fb_addr_7 = 32'hAAAAAAAA;
    fb_dataline_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_1 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_2 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_3 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_4 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_5 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_6 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dataline_7 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fb_dirty_0 = 1'h0;
    fb_dirty_1 = 1'h0;
    fb_dirty_2 = 1'h0;
    fb_dirty_3 = 1'h0;
    fb_dirty_4 = 1'h0;
    fb_dirty_5 = 1'h0;
    fb_dirty_6 = 1'h0;
    fb_dirty_7 = 1'h0;
    fb_enables_0 = 8'hAA;
    fb_enables_1 = 8'hAA;
    fb_enables_2 = 8'hAA;
    fb_enables_3 = 8'hAA;
    fb_enables_4 = 8'hAA;
    fb_enables_5 = 8'hAA;
    fb_enables_6 = 8'hAA;
    fb_enables_7 = 8'hAA;
    fb_err_0 = 1'h0;
    fb_err_1 = 1'h0;
    fb_err_2 = 1'h0;
    fb_err_3 = 1'h0;
    fb_err_4 = 1'h0;
    fb_err_5 = 1'h0;
    fb_err_6 = 1'h0;
    fb_err_7 = 1'h0;
    fb_valid_0 = 1'h0;
    fb_valid_1 = 1'h0;
    fb_valid_2 = 1'h0;
    fb_valid_3 = 1'h0;
    fb_valid_4 = 1'h0;
    fb_valid_5 = 1'h0;
    fb_valid_6 = 1'h0;
    fb_valid_7 = 1'h0;
    ff_core_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_from_tlb_rv = 41'h0AAAAAAAAAA;
    ff_hold_request_rv = 142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_nc_read_response_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_ptw_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_read_mem_response_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_write_mem_response_rv = 2'h2;
    repl_v_count_0 = 2'h2;
    repl_v_count_1 = 2'h2;
    repl_v_count_10 = 2'h2;
    repl_v_count_11 = 2'h2;
    repl_v_count_12 = 2'h2;
    repl_v_count_13 = 2'h2;
    repl_v_count_14 = 2'h2;
    repl_v_count_15 = 2'h2;
    repl_v_count_16 = 2'h2;
    repl_v_count_17 = 2'h2;
    repl_v_count_18 = 2'h2;
    repl_v_count_19 = 2'h2;
    repl_v_count_2 = 2'h2;
    repl_v_count_20 = 2'h2;
    repl_v_count_21 = 2'h2;
    repl_v_count_22 = 2'h2;
    repl_v_count_23 = 2'h2;
    repl_v_count_24 = 2'h2;
    repl_v_count_25 = 2'h2;
    repl_v_count_26 = 2'h2;
    repl_v_count_27 = 2'h2;
    repl_v_count_28 = 2'h2;
    repl_v_count_29 = 2'h2;
    repl_v_count_3 = 2'h2;
    repl_v_count_30 = 2'h2;
    repl_v_count_31 = 2'h2;
    repl_v_count_32 = 2'h2;
    repl_v_count_33 = 2'h2;
    repl_v_count_34 = 2'h2;
    repl_v_count_35 = 2'h2;
    repl_v_count_36 = 2'h2;
    repl_v_count_37 = 2'h2;
    repl_v_count_38 = 2'h2;
    repl_v_count_39 = 2'h2;
    repl_v_count_4 = 2'h2;
    repl_v_count_40 = 2'h2;
    repl_v_count_41 = 2'h2;
    repl_v_count_42 = 2'h2;
    repl_v_count_43 = 2'h2;
    repl_v_count_44 = 2'h2;
    repl_v_count_45 = 2'h2;
    repl_v_count_46 = 2'h2;
    repl_v_count_47 = 2'h2;
    repl_v_count_48 = 2'h2;
    repl_v_count_49 = 2'h2;
    repl_v_count_5 = 2'h2;
    repl_v_count_50 = 2'h2;
    repl_v_count_51 = 2'h2;
    repl_v_count_52 = 2'h2;
    repl_v_count_53 = 2'h2;
    repl_v_count_54 = 2'h2;
    repl_v_count_55 = 2'h2;
    repl_v_count_56 = 2'h2;
    repl_v_count_57 = 2'h2;
    repl_v_count_58 = 2'h2;
    repl_v_count_59 = 2'h2;
    repl_v_count_6 = 2'h2;
    repl_v_count_60 = 2'h2;
    repl_v_count_61 = 2'h2;
    repl_v_count_62 = 2'h2;
    repl_v_count_63 = 2'h2;
    repl_v_count_7 = 2'h2;
    repl_v_count_8 = 2'h2;
    repl_v_count_9 = 2'h2;
    rg_dirty_0 = 4'hA;
    rg_dirty_1 = 4'hA;
    rg_dirty_10 = 4'hA;
    rg_dirty_11 = 4'hA;
    rg_dirty_12 = 4'hA;
    rg_dirty_13 = 4'hA;
    rg_dirty_14 = 4'hA;
    rg_dirty_15 = 4'hA;
    rg_dirty_16 = 4'hA;
    rg_dirty_17 = 4'hA;
    rg_dirty_18 = 4'hA;
    rg_dirty_19 = 4'hA;
    rg_dirty_2 = 4'hA;
    rg_dirty_20 = 4'hA;
    rg_dirty_21 = 4'hA;
    rg_dirty_22 = 4'hA;
    rg_dirty_23 = 4'hA;
    rg_dirty_24 = 4'hA;
    rg_dirty_25 = 4'hA;
    rg_dirty_26 = 4'hA;
    rg_dirty_27 = 4'hA;
    rg_dirty_28 = 4'hA;
    rg_dirty_29 = 4'hA;
    rg_dirty_3 = 4'hA;
    rg_dirty_30 = 4'hA;
    rg_dirty_31 = 4'hA;
    rg_dirty_32 = 4'hA;
    rg_dirty_33 = 4'hA;
    rg_dirty_34 = 4'hA;
    rg_dirty_35 = 4'hA;
    rg_dirty_36 = 4'hA;
    rg_dirty_37 = 4'hA;
    rg_dirty_38 = 4'hA;
    rg_dirty_39 = 4'hA;
    rg_dirty_4 = 4'hA;
    rg_dirty_40 = 4'hA;
    rg_dirty_41 = 4'hA;
    rg_dirty_42 = 4'hA;
    rg_dirty_43 = 4'hA;
    rg_dirty_44 = 4'hA;
    rg_dirty_45 = 4'hA;
    rg_dirty_46 = 4'hA;
    rg_dirty_47 = 4'hA;
    rg_dirty_48 = 4'hA;
    rg_dirty_49 = 4'hA;
    rg_dirty_5 = 4'hA;
    rg_dirty_50 = 4'hA;
    rg_dirty_51 = 4'hA;
    rg_dirty_52 = 4'hA;
    rg_dirty_53 = 4'hA;
    rg_dirty_54 = 4'hA;
    rg_dirty_55 = 4'hA;
    rg_dirty_56 = 4'hA;
    rg_dirty_57 = 4'hA;
    rg_dirty_58 = 4'hA;
    rg_dirty_59 = 4'hA;
    rg_dirty_6 = 4'hA;
    rg_dirty_60 = 4'hA;
    rg_dirty_61 = 4'hA;
    rg_dirty_62 = 4'hA;
    rg_dirty_63 = 4'hA;
    rg_dirty_7 = 4'hA;
    rg_dirty_8 = 4'hA;
    rg_dirty_9 = 4'hA;
    rg_fbfillenable = 8'hAA;
    rg_fbmissallocate = 3'h2;
    rg_fbwriteback = 3'h2;
    rg_fence_pending = 1'h0;
    rg_fence_stall = 1'h0;
    rg_fenceinit = 1'h0;
    rg_globaldirty = 1'h0;
    rg_latest_index = 6'h2A;
    rg_miss_ongoing = 1'h0;
    rg_polling = 1'h0;
    rg_readdone = 1'h0;
    rg_replaylatest = 1'h0;
    rg_set_select = 6'h2A;
    rg_storehead = 1'h0;
    rg_storetail = 1'h0;
    rg_valid_0 = 4'hA;
    rg_valid_1 = 4'hA;
    rg_valid_10 = 4'hA;
    rg_valid_11 = 4'hA;
    rg_valid_12 = 4'hA;
    rg_valid_13 = 4'hA;
    rg_valid_14 = 4'hA;
    rg_valid_15 = 4'hA;
    rg_valid_16 = 4'hA;
    rg_valid_17 = 4'hA;
    rg_valid_18 = 4'hA;
    rg_valid_19 = 4'hA;
    rg_valid_2 = 4'hA;
    rg_valid_20 = 4'hA;
    rg_valid_21 = 4'hA;
    rg_valid_22 = 4'hA;
    rg_valid_23 = 4'hA;
    rg_valid_24 = 4'hA;
    rg_valid_25 = 4'hA;
    rg_valid_26 = 4'hA;
    rg_valid_27 = 4'hA;
    rg_valid_28 = 4'hA;
    rg_valid_29 = 4'hA;
    rg_valid_3 = 4'hA;
    rg_valid_30 = 4'hA;
    rg_valid_31 = 4'hA;
    rg_valid_32 = 4'hA;
    rg_valid_33 = 4'hA;
    rg_valid_34 = 4'hA;
    rg_valid_35 = 4'hA;
    rg_valid_36 = 4'hA;
    rg_valid_37 = 4'hA;
    rg_valid_38 = 4'hA;
    rg_valid_39 = 4'hA;
    rg_valid_4 = 4'hA;
    rg_valid_40 = 4'hA;
    rg_valid_41 = 4'hA;
    rg_valid_42 = 4'hA;
    rg_valid_43 = 4'hA;
    rg_valid_44 = 4'hA;
    rg_valid_45 = 4'hA;
    rg_valid_46 = 4'hA;
    rg_valid_47 = 4'hA;
    rg_valid_48 = 4'hA;
    rg_valid_49 = 4'hA;
    rg_valid_5 = 4'hA;
    rg_valid_50 = 4'hA;
    rg_valid_51 = 4'hA;
    rg_valid_52 = 4'hA;
    rg_valid_53 = 4'hA;
    rg_valid_54 = 4'hA;
    rg_valid_55 = 4'hA;
    rg_valid_56 = 4'hA;
    rg_valid_57 = 4'hA;
    rg_valid_58 = 4'hA;
    rg_valid_59 = 4'hA;
    rg_valid_6 = 4'hA;
    rg_valid_60 = 4'hA;
    rg_valid_61 = 4'hA;
    rg_valid_62 = 4'hA;
    rg_valid_63 = 4'hA;
    rg_valid_7 = 4'hA;
    rg_valid_8 = 4'hA;
    rg_valid_9 = 4'hA;
    rg_way_select = 4'hA;
    store_addr_0 = 32'hAAAAAAAA;
    store_addr_1 = 32'hAAAAAAAA;
    store_data_0 = 64'hAAAAAAAAAAAAAAAA;
    store_data_1 = 64'hAAAAAAAAAAAAAAAA;
    store_epoch_0 = 1'h0;
    store_epoch_1 = 1'h0;
    store_fbindex_0 = 3'h2;
    store_fbindex_1 = 3'h2;
    store_io_0 = 1'h0;
    store_io_1 = 1'h0;
    store_size_0 = 2'h2;
    store_size_1 = 2'h2;
    store_valid_0 = 1'h0;
    store_valid_0_1 = 1'h0;
    store_valid_1 = 1'h0;
    store_valid_1_1 = 1'h0;
    tag_arr_0_rg_output_0 = 20'hAAAAA;
    tag_arr_1_rg_output_0 = 20'hAAAAA;
    tag_arr_2_rg_output_0 = 20'hAAAAA;
    tag_arr_3_rg_output_0 = 20'hAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put)
	begin
	  TASK_testplusargs___d3008 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put)
	begin
	  TASK_testplusargs___d3009 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put)
	begin
	  TASK_testplusargs___d3010 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3015 =
	(TASK_testplusargs___d3008 ||
	 TASK_testplusargs___d3009 && TASK_testplusargs___d3010) &&
	core_req_put[76];
    TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3017 =
	(TASK_testplusargs___d3008 ||
	 TASK_testplusargs___d3009 && TASK_testplusargs___d3010) &&
	!core_req_put[76];
    TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3023 =
	(TASK_testplusargs___d3008 ||
	 TASK_testplusargs___d3009 && TASK_testplusargs___d3010) &&
	core_req_put[0];
    TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3025 =
	(TASK_testplusargs___d3008 ||
	 TASK_testplusargs___d3009 && TASK_testplusargs___d3010) &&
	!core_req_put[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put)
	begin
	  v__h398266 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("[%10d", v__h398266, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("DCACHE : Receiving request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3015)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3017)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("'h%h", core_req_put[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3023)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  TASK_testplusargs_008_OR_TASK_testplusargs_009_ETC___d3025)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_core_req_put &&
	  (TASK_testplusargs___d3008 ||
	   TASK_testplusargs___d3009 && TASK_testplusargs___d3010))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d13 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d15 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  v__h23932 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("[%10d", v__h23932, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("DCACHE : fb_full:%b fb_empty:%b rg_fbwb:%d rg_fbmiss:%d fbvalid:%b",
	       fb_valid_0 &&
	       fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32,
	       !fb_valid_0 &&
	       NOT_fb_valid_1_0_5_AND_NOT_fb_valid_2_1_6_AND__ETC___d47,
	       rg_fbwriteback,
	       rg_fbmissallocate,
	       { fb_valid_7,
		 fb_valid_6,
		 fb_valid_5,
		 fb_valid_4,
		 fb_valid_3,
		 fb_valid_2,
		 fb_valid_1,
		 fb_valid_0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d56 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d57 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  v__h26157 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d55 ||
	   TASK_testplusargs___d56 && TASK_testplusargs___d57))
	$write("[%10d", v__h26157, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d55 ||
	   TASK_testplusargs___d56 && TASK_testplusargs___d57))
	$write("DCACHE : sb_empty:%b sb_full:%b store_valid:%b storetail:%d storehd:%d",
	       !store_valid_0_1 && !store_valid_1_1,
	       store_valid_0_1 && store_valid_1_1,
	       { store_valid_1_1, store_valid_0_1 },
	       rg_storetail,
	       rg_storehead);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d55 ||
	   TASK_testplusargs___d56 && TASK_testplusargs___d57))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d70 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d71 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  TASK_testplusargs___d72 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable)
	begin
	  v__h26965 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d70 ||
	   TASK_testplusargs___d71 && TASK_testplusargs___d72))
	$write("[%10d", v__h26965, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d70 ||
	   TASK_testplusargs___d71 && TASK_testplusargs___d72))
	$write("DCACHE: Enable:%b", cache_enable_c);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_cache_enable &&
	  (TASK_testplusargs___d70 ||
	   TASK_testplusargs___d71 && TASK_testplusargs___d72))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2539 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2540 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2541 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2545 =
	(TASK_testplusargs___d2539 ||
	 TASK_testplusargs___d2540 && TASK_testplusargs___d2541) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2547 =
	(TASK_testplusargs___d2539 ||
	 TASK_testplusargs___d2540 && TASK_testplusargs___d2541) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2548 =
	(TASK_testplusargs___d2539 ||
	 TASK_testplusargs___d2540 && TASK_testplusargs___d2541) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2550 =
	(TASK_testplusargs___d2539 ||
	 TASK_testplusargs___d2540 && TASK_testplusargs___d2541) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  v__h374915 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write("[%10d", v__h374915, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write("DCACHE : Received from mem: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2545)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2547)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2548)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  TASK_testplusargs_539_OR_TASK_testplusargs_540_ETC___d2550)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2539 ||
	   TASK_testplusargs___d2540 && TASK_testplusargs___d2541))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2551 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2552 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  TASK_testplusargs___d2553 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response)
	begin
	  v__h375099 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2551 ||
	   TASK_testplusargs___d2552 && TASK_testplusargs___d2553))
	$write("[%10d", v__h375099, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2551 ||
	   TASK_testplusargs___d2552 && TASK_testplusargs___d2553))
	$write("DCACHE : Filling FB. fbindex:%d fb_addr:%h fb_data:%h fbenable:%h",
	       ff_fb_fillindex_D_OUT,
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2242,
	       y__h311709,
	       SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  (TASK_testplusargs___d2551 ||
	   TASK_testplusargs___d2552 && TASK_testplusargs___d2553))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 ==
	  8'd255)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1268, column 49\nFilling FB with already filled line");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_update_fb_with_memory_response &&
	  SEL_ARR_fb_enables_0_read__526_fb_enables_1_re_ETC___d2240 ==
	  8'd255)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66])
	begin
	  TASK_testplusargs___d2561 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66])
	begin
	  TASK_testplusargs___d2562 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66])
	begin
	  TASK_testplusargs___d2563 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2569 =
	(TASK_testplusargs___d2561 ||
	 TASK_testplusargs___d2562 && TASK_testplusargs___d2563) &&
	ff_nc_read_response_rv_port1__read[1];
    TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2571 =
	(TASK_testplusargs___d2561 ||
	 TASK_testplusargs___d2562 && TASK_testplusargs___d2563) &&
	!ff_nc_read_response_rv_port1__read[1];
    TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2573 =
	(TASK_testplusargs___d2561 ||
	 TASK_testplusargs___d2562 && TASK_testplusargs___d2563) &&
	ff_nc_read_response_rv_port1__read[0];
    TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2575 =
	(TASK_testplusargs___d2561 ||
	 TASK_testplusargs___d2562 && TASK_testplusargs___d2563) &&
	!ff_nc_read_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66])
	begin
	  v__h375389 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write("[%10d", v__h375389, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write("DCACHE: received IO response: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write("'h%h", ff_nc_read_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2569)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2571)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2573)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  TASK_testplusargs_561_OR_TASK_testplusargs_562_ETC___d2575)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  (TASK_testplusargs___d2561 ||
	   TASK_testplusargs___d2562 && TASK_testplusargs___d2563))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  !ff_nc_read_response_rv_port1__read[1])
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1280, column 37\nWhy is IO response a burst");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_nc_read_response_rv_port1__read[66] &&
	  !ff_nc_read_response_rv_port1__read[1])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest)
	begin
	  TASK_testplusargs___d2996 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest)
	begin
	  TASK_testplusargs___d2997 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest)
	begin
	  TASK_testplusargs___d2998 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest)
	begin
	  v__h396582 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest &&
	  (TASK_testplusargs___d2996 ||
	   TASK_testplusargs___d2997 && TASK_testplusargs___d2998))
	$write("[%10d", v__h396582, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest &&
	  (TASK_testplusargs___d2996 ||
	   TASK_testplusargs___d2997 && TASK_testplusargs___d2998))
	$write("DCACHE : Replaying last request for index:%d",
	       rg_latest_index);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_replaylatest &&
	  (TASK_testplusargs___d2996 ||
	   TASK_testplusargs___d2997 && TASK_testplusargs___d2998))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  dirty_and_valid__h27063)
	begin
	  TASK_testplusargs___d248 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  dirty_and_valid__h27063)
	begin
	  TASK_testplusargs___d249 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  dirty_and_valid__h27063)
	begin
	  TASK_testplusargs___d250 = $test$plusargs("l2");
	  #0;
	end
    SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d253 =
	dirty_and_valid__h27063 &&
	(TASK_testplusargs___d248 ||
	 TASK_testplusargs___d249 && TASK_testplusargs___d250);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  dirty_and_valid__h27063)
	begin
	  v__h30689 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d253)
	$write("[%10d", v__h30689, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d253)
	$write("DCACHE: Fence Evicting Addr:%h Data:%h",
	       final_address__h28113,
	       final_line___1__h28112);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation && !rg_fenceinit && rg_globaldirty &&
	  SEL_ARR_rg_dirty_0_01_rg_dirty_1_02_rg_dirty_2_ETC___d253)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1343 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1344 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1345 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  v__h288916 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1343 ||
	   TASK_testplusargs___d1344 && TASK_testplusargs___d1345))
	$write("[%10d", v__h288916, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1343 ||
	   TASK_testplusargs___d1344 && TASK_testplusargs___d1345))
	$write("DCACHE : Fence in progress.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1343 ||
	   TASK_testplusargs___d1344 && TASK_testplusargs___d1345))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1349 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1350 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  TASK_testplusargs___d1351 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation)
	begin
	  v__h289062 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1349 ||
	   TASK_testplusargs___d1350 && TASK_testplusargs___d1351))
	$write("[%10d", v__h289062, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1349 ||
	   TASK_testplusargs___d1350 && TASK_testplusargs___d1351))
	$write("DCACHE : Fence : way:%b set:%d index:%d nset:%d",
	       rg_way_select,
	       rg_set_select,
	       v__h28117,
	       next_set__h27061);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fence_operation &&
	  (TASK_testplusargs___d1349 ||
	   TASK_testplusargs___d1350 && TASK_testplusargs___d1351))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1439 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1440 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1441 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1452 =
	(TASK_testplusargs___d1439 ||
	 TASK_testplusargs___d1440 && TASK_testplusargs___d1441) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1454 =
	(TASK_testplusargs___d1439 ||
	 TASK_testplusargs___d1440 && TASK_testplusargs___d1441) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  v__h291788 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("[%10d", v__h291788, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("DCACHE : TAGCMP for Req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1452)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_439_OR_TASK_testplusargs_440_ETC___d1454)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1439 ||
	   TASK_testplusargs___d1440 && TASK_testplusargs___d1441))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1455 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1456 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1457 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1462 =
	(TASK_testplusargs___d1455 ||
	 TASK_testplusargs___d1456 && TASK_testplusargs___d1457) &&
	ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1463 =
	(TASK_testplusargs___d1455 ||
	 TASK_testplusargs___d1456 && TASK_testplusargs___d1457) &&
	!ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1465 =
	(TASK_testplusargs___d1455 ||
	 TASK_testplusargs___d1456 && TASK_testplusargs___d1457) &&
	ff_from_tlb_rv_port1__read[0];
    TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1466 =
	(TASK_testplusargs___d1455 ||
	 TASK_testplusargs___d1456 && TASK_testplusargs___d1457) &&
	!ff_from_tlb_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  v__h291990 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("[%10d", v__h291990, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("DCACHE : ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("DTLB_core_response { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("'h%h", ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1462)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1463)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("'h%h", ff_from_tlb_rv_port1__read[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write(", ", "tlbmiss: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1465)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  TASK_testplusargs_455_OR_TASK_testplusargs_456_ETC___d1466)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1455 ||
	   TASK_testplusargs___d1456 && TASK_testplusargs___d1457))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1467 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1468 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  TASK_testplusargs___d1469 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match)
	begin
	  v__h292174 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1467 ||
	   TASK_testplusargs___d1468 && TASK_testplusargs___d1469))
	$write("[%10d", v__h292174, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1467 ||
	   TASK_testplusargs___d1468 && TASK_testplusargs___d1469))
	$write("DCACHE : TAGCMP Result. Hit:%b Hitline:%h",
	       hit__h290166,
	       hitline__h290167);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  (TASK_testplusargs___d1467 ||
	   TASK_testplusargs___d1468 && TASK_testplusargs___d1469))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  NOT_0_CONCAT_IF_SEL_ARR_rg_valid_0_79_rg_valid_ETC___d1481)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 768, column 43\nMore than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tag_match &&
	  NOT_0_CONCAT_IF_SEL_ARR_rg_valid_0_79_rg_valid_ETC___d1481)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1647 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1648 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1649 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1653 =
	(TASK_testplusargs___d1647 ||
	 TASK_testplusargs___d1648 && TASK_testplusargs___d1649) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1654 =
	(TASK_testplusargs___d1647 ||
	 TASK_testplusargs___d1648 && TASK_testplusargs___d1649) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  v__h294801 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("[%10d", v__h294801, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("DCACHE : FB Polling for Req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1653)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  TASK_testplusargs_647_OR_TASK_testplusargs_648_ETC___d1654)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1647 ||
	   TASK_testplusargs___d1648 && TASK_testplusargs___d1649))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1655 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1656 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  TASK_testplusargs___d1657 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest)
	begin
	  v__h294993 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1655 ||
	   TASK_testplusargs___d1656 && TASK_testplusargs___d1657))
	$write("[%10d", v__h294993, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1655 ||
	   TASK_testplusargs___d1656 && TASK_testplusargs___d1657))
	$write("DCACHE : FP Polling Result. linehit:%b wordhit:%b",
	       fbhit__h292477 != 8'd0,
	       IF_fb_addr_7_read__322_BITS_31_TO_6_486_EQ_ff__ETC___d1542);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  (TASK_testplusargs___d1655 ||
	   TASK_testplusargs___d1656 && TASK_testplusargs___d1657))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  NOT_0_CONCAT_IF_fb_addr_7_read__322_BITS_31_TO_ETC___d1677)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 892, column 45\nMore than one line in FB is hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_fb_for_corerequest &&
	  NOT_0_CONCAT_IF_fb_addr_7_read__322_BITS_31_TO_ETC___d1677)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  !SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1056, column 52\nAllocating valid entry in fill - buffer on Cache Hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  !SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core)
	begin
	  TASK_testplusargs___d2060 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core)
	begin
	  TASK_testplusargs___d2061 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core)
	begin
	  TASK_testplusargs___d2062 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core)
	begin
	  v__h307934 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  (TASK_testplusargs___d2060 ||
	   TASK_testplusargs___d2061 && TASK_testplusargs___d2062))
	$write("[%10d", v__h307934, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  (TASK_testplusargs___d2060 ||
	   TASK_testplusargs___d2061 && TASK_testplusargs___d2062))
	$write("DCACHE: Sending to Core. Word:%h Addr:%h Access:%d TagHit:%b FBHit:%b NCHit:%b",
	       word__h307867,
	       ff_core_request_D_OUT[140:77],
	       ff_core_request_D_OUT[74:73],
	       IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730,
	       IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734,
	       IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  (TASK_testplusargs___d2060 ||
	   TASK_testplusargs___d2061 && TASK_testplusargs___d2062))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2133)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1113, column 45\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2133)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2146)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1114, column 46\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core &&
	  NOT_0_CONCAT_IF_IF_wr_nc_response_whas__747_TH_ETC___d2146)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods deq and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods first and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  !ff_hold_request_rv[141] &&
	  !ff_ptw_response_rv[72] &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1848 &&
	  ff_core_request_EMPTY_N &&
	  ff_from_tlb_rv_port1__read[40] &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods port0__read and port0__write of module instance\n  ff_core_response_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd0 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd1 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd2 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd3 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd4 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd5 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd6 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_respond_to_core && WILL_FIRE_RL_fence_operation &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd0 &&
	  rg_fbmissallocate == 3'd7 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_respond_to_core and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_7.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2178 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2179 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2180 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2183 =
	cache_enable_c &&
	!ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	(TASK_testplusargs___d2178 ||
	 TASK_testplusargs___d2179 && TASK_testplusargs___d2180);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  v__h310104 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2183)
	$write("[%10d", v__h310104, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2183)
	$write("DCACHE : Sending Line Request for Addr:%h",
	       x_address__h309373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2183)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2185 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2186 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  TASK_testplusargs___d2187 = $test$plusargs("l1");
	  #0;
	end
    wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2190 =
	cache_enable_c &&
	!ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	(TASK_testplusargs___d2185 ||
	 TASK_testplusargs___d2186 && TASK_testplusargs___d2187);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164)
	begin
	  v__h310259 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2190)
	$write("[%10d", v__h310259, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2190)
	$write("DCACHE : Allocating FBindex:", rg_fbmissallocate);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  wr_cache_enable_wget__6_AND_NOT_ff_from_tlb_rv_ETC___d2190)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	  !SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1159, column 52\nAllocating valid entry in fill - buffer");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 &&
	  !SEL_ARR_NOT_fb_valid_0_9_4_NOT_fb_valid_1_0_5__ETC___d2026)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  (ff_core_request_D_OUT[74:73] == 2'd0 ||
	   ff_core_request_D_OUT[74:73] == 2'd2))
	begin
	  TASK_testplusargs___d2199 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  (ff_core_request_D_OUT[74:73] == 2'd0 ||
	   ff_core_request_D_OUT[74:73] == 2'd2))
	begin
	  TASK_testplusargs___d2200 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  (ff_core_request_D_OUT[74:73] == 2'd0 ||
	   ff_core_request_D_OUT[74:73] == 2'd2))
	begin
	  TASK_testplusargs___d2201 = $test$plusargs("l0");
	  #0;
	end
    ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2204 =
	(ff_core_request_D_OUT[74:73] == 2'd0 ||
	 ff_core_request_D_OUT[74:73] == 2'd2) &&
	(TASK_testplusargs___d2199 ||
	 TASK_testplusargs___d2200 && TASK_testplusargs___d2201);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  (ff_core_request_D_OUT[74:73] == 2'd0 ||
	   ff_core_request_D_OUT[74:73] == 2'd2))
	begin
	  v__h310702 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2204)
	$write("[%10d", v__h310702, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2204)
	$write("DCACHE : Sending IO Request for Addr:%h",
	       ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2204)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_D_OUT[74:73] == 2'd1)
	begin
	  TASK_testplusargs___d2208 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_D_OUT[74:73] == 2'd1)
	begin
	  TASK_testplusargs___d2209 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_D_OUT[74:73] == 2'd1)
	begin
	  TASK_testplusargs___d2210 = $test$plusargs("l0");
	  #0;
	end
    ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2213 =
	ff_core_request_D_OUT[74:73] == 2'd1 &&
	(TASK_testplusargs___d2208 ||
	 TASK_testplusargs___d2209 && TASK_testplusargs___d2210);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_D_OUT[74:73] == 2'd1)
	begin
	  v__h310925 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2213)
	$write("[%10d", v__h310925, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2213)
	$write("DCACHE : Allocating IO Write in SB for Addr: %h",
	       ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_first__4_BITS_74_TO_73_447_EQ__ETC___d2213)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (!cache_enable_c ||
	   ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164) &&
	  ff_core_request_D_OUT[74:73] == 2'd1 &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods deq and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods first and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	  2'd0 &&
	  IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	  2'd1 &&
	  IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	  2'd1 &&
	  !rg_miss_ongoing &&
	  ff_fb_fillindex_FULL_N &&
	  ff_nc_read_request_FULL_N &&
	  ff_read_mem_request_FULL_N &&
	  !wr_trap_from_tlb_whas &&
	  (!fb_valid_0 ||
	   NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377) &&
	  ff_from_tlb_rv_port1__read[40] &&
	  EN_cache_enable &&
	  ff_core_request_EMPTY_N &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods port0__read and port0__write of module instance\n  ff_core_response_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd0 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   !NOT_fb_valid_1_0_5_OR_NOT_fb_valid_2_1_6_OR_NO_ETC___d1377 &&
	   !ff_core_response_rv[72] &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd1 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   !NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd2 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   fb_valid_3 &&
	   !NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd3 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   !NOT_fb_valid_4_3_8_OR_NOT_fb_valid_5_4_9_OR_NO_ETC___d1374 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd4 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   fb_valid_5 &&
	   fb_valid_6 &&
	   fb_valid_7 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd5 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   fb_valid_6 &&
	   fb_valid_7 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd6 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   fb_valid_7 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_5 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_request_to_memory && WILL_FIRE_RL_fence_operation &&
	  (rg_fbmissallocate == 3'd7 && cache_enable_c &&
	   !ff_from_tlb_rv_port1__read__360_BITS_39_TO_8_4_ETC___d2164 ||
	   IF_wr_nc_response_whas__747_THEN_wr_nc_respons_ETC___d1749 !=
	   2'd0 &&
	   IF_wr_fb_response_whas__732_THEN_wr_fb_respons_ETC___d1734 ==
	   2'd1 &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1730 ==
	   2'd1 &&
	   !ff_core_response_rv[72] &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_5 &&
	   fb_valid_6 &&
	   !rg_miss_ongoing &&
	   ff_fb_fillindex_FULL_N &&
	   ff_nc_read_request_FULL_N &&
	   ff_read_mem_request_FULL_N &&
	   !wr_trap_from_tlb_whas &&
	   ff_from_tlb_rv_port1__read[40] &&
	   EN_cache_enable &&
	   ff_core_request_EMPTY_N) &&
	  _deq_RL_fence_operation_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1135, column 10: (R0002)\n  Conflict-free rules RL_request_to_memory and RL_fence_operation called\n  conflicting methods read and write of module instance fb_valid_7.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer)
	begin
	  TASK_testplusargs___d1829 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer)
	begin
	  TASK_testplusargs___d1830 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer)
	begin
	  TASK_testplusargs___d1831 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer)
	begin
	  v__h298843 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer &&
	  (TASK_testplusargs___d1829 ||
	   TASK_testplusargs___d1830 && TASK_testplusargs___d1831))
	$write("[%10d", v__h298843, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer &&
	  (TASK_testplusargs___d1829 ||
	   TASK_testplusargs___d1830 && TASK_testplusargs___d1831))
	$write("DCACHE : Allocating SB. sbindex:%d, data:%h addr:%h, fbindex:%d",
	       rg_storetail,
	       x__h296016,
	       ff_from_tlb_rv_port1__read[39:8],
	       fbindex__h295994);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer &&
	  (TASK_testplusargs___d1829 ||
	   TASK_testplusargs___d1830 && TASK_testplusargs___d1831))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer &&
	  WILL_FIRE_RL_request_to_memory &&
	  (1'b1 ||
	   !wr_trap_from_tlb_whas &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751 &&
	   ff_core_request_EMPTY_N &&
	   ff_from_tlb_rv_port1__read[40]) &&
	  _deq_RL_request_to_memory_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 930, column 10: (R0002)\n  Conflict-free rules RL_allocate_storebuffer and RL_request_to_memory called\n  conflicting methods first and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer &&
	  WILL_FIRE_RL_request_to_memory &&
	  (1'b1 ||
	   ff_core_request_D_OUT[74:73] != 2'd0 &&
	   !ff_core_request_D_OUT[76] &&
	   !wr_trap_from_tlb_whas &&
	   ff_core_request_EMPTY_N &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751) &&
	  _deq_RL_request_to_memory_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 930, column 10: (R0002)\n  Conflict-free rules RL_allocate_storebuffer and RL_request_to_memory called\n  conflicting methods port1__read and port1__write of module instance\n  ff_from_tlb_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer && WILL_FIRE_RL_respond_to_core &&
	  (1'b1 ||
	   !wr_trap_from_tlb_whas &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751 &&
	   ff_core_request_EMPTY_N &&
	   ff_from_tlb_rv_port1__read[40]))
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 930, column 10: (R0002)\n  Conflict-free rules RL_allocate_storebuffer and RL_respond_to_core called\n  conflicting methods first and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_allocate_storebuffer && WILL_FIRE_RL_respond_to_core &&
	  (1'b1 ||
	   ff_core_request_D_OUT[74:73] != 2'd0 &&
	   !ff_core_request_D_OUT[76] &&
	   !wr_trap_from_tlb_whas &&
	   ff_core_request_EMPTY_N &&
	   IF_wr_cache_response_whas__728_THEN_wr_cache_r_ETC___d1751))
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 930, column 10: (R0002)\n  Conflict-free rules RL_allocate_storebuffer and RL_respond_to_core called\n  conflicting methods port1__read and port1__write of module instance\n  ff_from_tlb_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	  !rg_readdone)
	begin
	  TASK_testplusargs___d2714 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	  !rg_readdone)
	begin
	  TASK_testplusargs___d2715 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	  !rg_readdone)
	begin
	  TASK_testplusargs___d2716 = $test$plusargs("l1");
	  #0;
	end
    SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2719 =
	SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	!rg_readdone &&
	(TASK_testplusargs___d2714 ||
	 TASK_testplusargs___d2715 && TASK_testplusargs___d2716);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 &&
	  !rg_readdone)
	begin
	  v__h378775 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2719)
	$write("[%10d", v__h378775, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2719)
	$write("DCACHE : FBRelease. ReadPhase. index:%d",
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2719)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  rg_readdone)
	begin
	  TASK_testplusargs___d2731 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  rg_readdone)
	begin
	  TASK_testplusargs___d2732 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  rg_readdone)
	begin
	  TASK_testplusargs___d2733 = $test$plusargs("l1");
	  #0;
	end
    __duses1897 =
	rg_readdone &&
	(TASK_testplusargs___d2731 ||
	 TASK_testplusargs___d2732 && TASK_testplusargs___d2733);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  rg_readdone)
	begin
	  v__h380697 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses1897)
	$write("[%10d", v__h380697, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses1897)
	$write("DCACHE : FBRelease. Evict Addr:%h Data:%h",
	       final_address__h380608,
	       v__h380270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses1897)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	   rg_readdone))
	begin
	  TASK_testplusargs___d2980 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	   rg_readdone))
	begin
	  TASK_testplusargs___d2981 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	   rg_readdone))
	begin
	  TASK_testplusargs___d2982 = $test$plusargs("l1");
	  #0;
	end
    __duses2726 =
	(!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	 rg_readdone) &&
	(TASK_testplusargs___d2980 ||
	 TASK_testplusargs___d2981 && TASK_testplusargs___d2982);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	   rg_readdone))
	begin
	  v__h395025 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses2726)
	$write("[%10d", v__h395025, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses2726)
	$write("DCACHE : ReleaseFiring. rg_fbwb:%d index:%d tag:%h way:%d",
	       rg_fbwriteback,
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[11:6],
	       SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d1324[31:12],
	       v__h375911,
	       " dirty:%b",
	       SEL_ARR_fb_dirty_0_read__875_fb_dirty_1_read___ETC___d2884);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB &&
	  SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	  __duses2726)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  x__h375884 == 8'd255 &&
	  (!fb_valid_0 ||
	   !fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32) &&
	  !SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	  !rg_replaylatest &&
	  !rg_fence_stall &&
	  !store_valid_0_1 &&
	  !store_valid_1_1 &&
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 &&
	  (fb_valid_0 ||
	   fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225) &&
	  !CAN_FIRE_RL_allocate_storebuffer &&
	  ff_write_mem_request_FULL_N &&
	  !EN_core_req_put)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods notEmpty and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_0_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_1_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_2_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_3_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_4_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_4 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_4) &&
	  _write_RL_respond_to_core_EN_fb_valid_5_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_5 &&
	   fb_valid_4 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_5 &&
	   fb_valid_4) &&
	  _write_RL_respond_to_core_EN_fb_valid_6_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_respond_to_core &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_respond_to_core_EN_fb_valid_7_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_respond_to_core called\n  conflicting methods read and write of module instance fb_valid_7.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  x__h375884 == 8'd255 &&
	  (!fb_valid_0 ||
	   !fb_valid_1_0_AND_fb_valid_2_1_AND_fb_valid_3_2_ETC___d32) &&
	  !SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	  !rg_replaylatest &&
	  !rg_fence_stall &&
	  !store_valid_0_1 &&
	  !store_valid_1_1 &&
	  SEL_ARR_fb_valid_0_9_fb_valid_1_0_fb_valid_2_1_ETC___d2600 &&
	  (fb_valid_0 ||
	   fb_valid_1_0_OR_fb_valid_2_1_OR_fb_valid_3_2_O_ETC___d2225) &&
	  !CAN_FIRE_RL_allocate_storebuffer &&
	  ff_write_mem_request_FULL_N &&
	  !EN_core_req_put &&
	  _deq_RL_request_to_memory_EN_ff_core_request_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods notEmpty and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_0_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_1_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_2_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_3_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_4_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_4 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_6 &&
	   fb_valid_4) &&
	  _write_RL_request_to_memory_EN_fb_valid_5_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_5 &&
	   fb_valid_4 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_7 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_5 &&
	   fb_valid_4) &&
	  _write_RL_request_to_memory_EN_fb_valid_6_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_release_from_FB && WILL_FIRE_RL_request_to_memory &&
	  (!y__h378534 &&
	   (!SEL_ARR_rg_valid_0_79_rg_valid_1_80_rg_valid_2_ETC___d2694 ||
	    rg_readdone) &&
	   SEL_ARR_NOT_fb_err_0_read__638_698_NOT_fb_err__ETC___d2707 &&
	   SEL_ARR_fb_addr_0_read__315_fb_addr_1_read__31_ETC___d2586 &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5 ||
	   x__h375884 == 8'd255 &&
	   (!NOT_ff_core_request_notEmpty__576_577_AND_NOT__ETC___d2588 ||
	    CAN_FIRE_RL_allocate_storebuffer) &&
	   !rg_replaylatest &&
	   !rg_fence_stall &&
	   !store_valid_0_1 &&
	   !store_valid_1_1 &&
	   ff_write_mem_request_FULL_N &&
	   fb_valid_0 &&
	   fb_valid_1 &&
	   fb_valid_2 &&
	   fb_valid_3 &&
	   fb_valid_4 &&
	   fb_valid_6 &&
	   fb_valid_5) &&
	  _write_RL_request_to_memory_EN_fb_valid_7_wget)
	$display("Error: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1299, column 10: (R0002)\n  Conflict-free rules RL_release_from_FB and RL_request_to_memory called\n  conflicting methods read and write of module instance fb_valid_7.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store)
	begin
	  TASK_testplusargs___d3091 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store)
	begin
	  TASK_testplusargs___d3092 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store)
	begin
	  TASK_testplusargs___d3093 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store)
	begin
	  v__h399469 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  (TASK_testplusargs___d3091 ||
	   TASK_testplusargs___d3092 && TASK_testplusargs___d3093))
	$write("[%10d", v__h399469, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  (TASK_testplusargs___d3091 ||
	   TASK_testplusargs___d3092 && TASK_testplusargs___d3093))
	$write("DCACHE : Performing Store. sbhead:%d addr:%h data:%h",
	       rg_storehead,
	       addr__h399391,
	       SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  (TASK_testplusargs___d3091 ||
	   TASK_testplusargs___d3092 && TASK_testplusargs___d3093))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107)
	begin
	  TASK_testplusargs___d3109 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107)
	begin
	  TASK_testplusargs___d3110 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107)
	begin
	  TASK_testplusargs___d3111 = $test$plusargs("l1");
	  #0;
	end
    SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3114 =
	SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	(TASK_testplusargs___d3109 ||
	 TASK_testplusargs___d3110 && TASK_testplusargs___d3111);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107)
	begin
	  v__h399729 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3114)
	$write("[%10d", v__h399729, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3114)
	$write("DCACHE : IO Store Addr:%h Size:%d Data:%h",
	       addr__h399391,
	       x__h400003,
	       SEL_ARR_store_data_0_702_store_data_1_703_704__ETC___d3098);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3114)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132)
	begin
	  TASK_testplusargs___d3148 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132)
	begin
	  TASK_testplusargs___d3149 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132)
	begin
	  TASK_testplusargs___d3150 = $test$plusargs("l1");
	  #0;
	end
    wr_fbbeingfilled_whas__121_AND_wr_fbbeingfille_ETC___d3153 =
	CAN_FIRE_RL_update_fb_with_memory_response &&
	wr_fbbeingfilled_wget[3] &&
	SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130 &&
	(TASK_testplusargs___d3148 ||
	 TASK_testplusargs___d3149 && TASK_testplusargs___d3150);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3132)
	begin
	  v__h401224 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  wr_fbbeingfilled_whas__121_AND_wr_fbbeingfille_ETC___d3153)
	$write("[%10d", v__h401224, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  wr_fbbeingfilled_whas__121_AND_wr_fbbeingfille_ETC___d3153)
	$write("DCACHE : Store to FillingFB");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  wr_fbbeingfilled_whas__121_AND_wr_fbbeingfille_ETC___d3153)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162)
	begin
	  TASK_testplusargs___d3164 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162)
	begin
	  TASK_testplusargs___d3165 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162)
	begin
	  TASK_testplusargs___d3166 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_fbbeingfilled_whas__121_157_OR_NOT_wr_f_ETC___d3169 =
	(!CAN_FIRE_RL_update_fb_with_memory_response ||
	 !wr_fbbeingfilled_wget[3] ||
	 !SEL_ARR_store_fbindex_0_125_store_fbindex_1_12_ETC___d3130) &&
	(TASK_testplusargs___d3164 ||
	 TASK_testplusargs___d3165 && TASK_testplusargs___d3166);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  NOT_SEL_ARR_store_io_0_104_store_io_1_105_106__ETC___d3162)
	begin
	  v__h401393 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  NOT_wr_fbbeingfilled_whas__121_157_OR_NOT_wr_f_ETC___d3169)
	$write("[%10d", v__h401393, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  NOT_wr_fbbeingfilled_whas__121_157_OR_NOT_wr_f_ETC___d3169)
	$write("DCACHE : Store to FB index:%d", fbindex__h399390);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	  !SEL_ARR_store_io_0_104_store_io_1_105_106_rg_s_ETC___d3107 &&
	  NOT_wr_fbbeingfilled_whas__121_157_OR_NOT_wr_f_ETC___d3169)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  !SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103)
	begin
	  TASK_testplusargs___d3204 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  !SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103)
	begin
	  TASK_testplusargs___d3205 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  !SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103)
	begin
	  TASK_testplusargs___d3206 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_store_epoch_0_099_store_epoch_1_10_ETC___d3209 =
	!SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103 &&
	(TASK_testplusargs___d3204 ||
	 TASK_testplusargs___d3205 && TASK_testplusargs___d3206);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  !SEL_ARR_store_epoch_0_099_store_epoch_1_100_10_ETC___d3103)
	begin
	  v__h409996 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  NOT_SEL_ARR_store_epoch_0_099_store_epoch_1_10_ETC___d3209)
	$write("[%10d", v__h409996, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  NOT_SEL_ARR_store_epoch_0_099_store_epoch_1_10_ETC___d3209)
	$write("DCACHE : Dropping Store sbhead:%d", rg_storehead);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  NOT_SEL_ARR_store_epoch_0_099_store_epoch_1_10_ETC___d3209)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  NOT_SEL_ARR_store_valid_0_1_1_store_valid_1_1__ETC___d3216)
	$display("Dynamic assertion failed: \"../base-sim/caches_mmu/src/dcache/l1dcache_vipt.bsv\", line 1547, column 49\nPerforming Store on invalid entry in SB");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_perform_store &&
	  NOT_SEL_ARR_store_valid_0_1_1_store_valid_1_1__ETC___d3216)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkdcache

