//
// Generated by Bluespec Compiler (build a026416)
//
// On Tue Jun 16 00:03:24 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// get_result                     O    70 reg
// RDY_get_result                 O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64 reg
// _start_operand2                I    64 reg
// _start_operand3                I    64 reg
// _start_opcode                  I     4 reg
// _start_funct7                  I     7 reg
// _start_funct3                  I     3 reg
// _start_imm                     I     2 reg
// _start_issp                    I     1 reg
// EN__start                      I     1
// EN_flush                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_imm,
	     _start_issp,
	     EN__start,
	     RDY__start,

	     get_result,
	     RDY_get_result,

	     EN_flush,
	     RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [63 : 0] _start_operand3;
  input  [3 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_imm;
  input  _start_issp;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [69 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [69 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [69 : 0] rg_result_1_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [169 : 0] inst_dpfpu_divider_int_div_wr_final_out_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [82 : 0] inst_spfpu_divider_int_div_wr_final_out_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_fpu_int_to_fp_fcvt_s_llu_res_wget,
		inst_fpu_int_to_fp_fcvt_s_wwu_res_wget,
		inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       rg_result_1_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  wire rg_multicycle_op_D_IN, rg_multicycle_op_EN;

  // register rg_result
  reg [69 : 0] rg_result;
  wire [69 : 0] rg_result_D_IN;
  wire rg_result_EN;

  // ports of submodule ff_input
  wire [208 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rg_result__dreg_update,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_30,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rg_result__dreg_update,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_30,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_rg_result_1_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_3,
		MUX_rg_result_1_wset_1__VAL_4,
		MUX_rg_result_1_wset_1__VAL_5,
		MUX_rg_result_1_wset_1__VAL_6,
		MUX_rg_result_1_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_1,
       MUX_rg_result_1_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d6005;
  reg TASK_testplusargs___d6006;
  reg TASK_testplusargs___d6007;
  reg [63 : 0] v__h293059;
  reg TASK_testplusargs___d6011;
  reg TASK_testplusargs___d6012;
  reg TASK_testplusargs___d6013;
  reg [63 : 0] v__h293205;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2,
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
      CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112,
      IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229,
      IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842,
      IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241,
      IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434,
      _theResult_____4___1__h228726;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16,
		 x__h63212;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423,
		 IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208,
		 _theResult____h102159,
		 _theResult____h148380,
		 _theResult___snd_fst__h171519,
		 _theResult___snd_fst__h171521,
		 add_mantissa__h148376,
		 mantissa2__h102146,
		 mantissa2__h102168,
		 mantissa2__h102189,
		 mantissa3___1__h121879,
		 mantissa3__h102190,
		 mantissa_to_shift___1__h102187,
		 mantissa_to_shift__h102182,
		 resultant_mantissa___1__h171274,
		 resultant_mantissa_norm_expo__h170972,
		 resultant_mantissa_norm_zerosMSB__h170973,
		 sub_mantissa1__h148377,
		 sub_mantissa2__h148378,
		 sub_mantissa__h148379;
  wire [125 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794,
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793,
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796;
  wire [115 : 0] _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037,
		 final_man__h218465;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934,
		 mantissa___1__h284870,
		 mantissa__h268792,
		 mantissa__h268794,
		 mantissa__h268804,
		 mantissa__h78127;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118,
		 _theResult_____1_snd__h94501,
		 _theResult_____1_snd__h94504,
		 _theResult___snd_snd_snd_snd_fst__h94541,
		 lv_product_mantissa___1__h94474,
		 lv_product_mantissa___1__h94492,
		 lv_product_mantissa__h79349,
		 lv_product_mantissa__h94440,
		 lv_product_mantissa_shiftL_expo__h94446,
		 lv_product_mantissa_shiftL_zerosMSB__h94448,
		 x_lv_product_mantissa__h79417;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218;
  wire [86 : 0] _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868,
		final_man__h215965;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		x__h4764;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783,
		IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220,
		_theResult____h25823,
		_theResult____h47423,
		_theResult___snd_fst__h58382,
		_theResult___snd_fst__h58384,
		add_mantissa__h47419,
		mantissa2__h25810,
		mantissa2__h25832,
		mantissa2__h25853,
		mantissa3___1__h35045,
		mantissa3__h25854,
		mantissa_to_shift___1__h25851,
		mantissa_to_shift__h25846,
		resultant_mantissa___1__h58137,
		resultant_mantissa_norm_expo__h57835,
		resultant_mantissa_norm_zerosMSB__h57836,
		sub_mantissa1__h47420,
		sub_mantissa2__h47421,
		sub_mantissa__h47422;
  wire [69 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468,
		IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460,
		IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812,
		IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264,
		IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531;
  wire [68 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453,
		IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454,
		IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767;
  wire [63 : 0] IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493,
		IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006,
		IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491,
		IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893,
		IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490,
		_theResult_____1_fst__h217625,
		_theResult_____1_fst__h220124,
		_theResult_____1_fst__h76557,
		_theResult_____2_fst__h217300,
		_theResult_____2_fst__h217407,
		_theResult_____2_fst__h217459,
		_theResult_____2_fst__h217510,
		_theResult_____2_fst__h217514,
		_theResult_____2_fst__h219801,
		_theResult_____2_fst__h219906,
		_theResult_____2_fst__h219958,
		_theResult_____2_fst__h220009,
		_theResult_____2_fst__h220013,
		_theResult_____3_fst__h199426,
		_theResult_____3_fst__h199978,
		_theResult_____3_fst__h216568,
		_theResult_____3_fst__h219071,
		_theResult_____3_snd_fst__h171113,
		_theResult_____3_snd_fst__h171170,
		_theResult_____3_snd_fst__h171220,
		_theResult_____3_snd_fst__h171761,
		_theResult____h184913,
		_theResult____h194469,
		_theResult___fst__h216156,
		_theResult___fst__h216196,
		_theResult___fst__h216208,
		_theResult___fst__h216259,
		_theResult___fst__h216304,
		_theResult___fst__h216325,
		_theResult___fst__h216371,
		_theResult___fst__h216392,
		_theResult___fst__h216424,
		_theResult___fst__h216470,
		_theResult___fst__h216490,
		_theResult___fst__h216536,
		_theResult___fst__h216926,
		_theResult___fst__h217029,
		_theResult___fst__h217033,
		_theResult___fst__h217097,
		_theResult___fst__h217157,
		_theResult___fst__h217161,
		_theResult___fst__h217226,
		_theResult___fst__h218659,
		_theResult___fst__h218699,
		_theResult___fst__h218711,
		_theResult___fst__h218762,
		_theResult___fst__h218807,
		_theResult___fst__h218828,
		_theResult___fst__h218874,
		_theResult___fst__h218895,
		_theResult___fst__h218927,
		_theResult___fst__h218973,
		_theResult___fst__h218993,
		_theResult___fst__h219039,
		_theResult___fst__h219429,
		_theResult___fst__h219530,
		_theResult___fst__h219534,
		_theResult___fst__h219598,
		_theResult___fst__h219658,
		_theResult___fst__h219662,
		_theResult___fst__h219727,
		_theResult___snd_final_result__h194477,
		final_result___1__h216314,
		final_result___1__h216348,
		final_result___1__h216447,
		final_result___1__h216977,
		final_result___1__h217552,
		final_result___1__h217582,
		final_result___1__h218817,
		final_result___1__h218851,
		final_result___1__h218950,
		final_result___1__h219478,
		final_result___1__h220051,
		final_result___1__h220081,
		final_result___2__h216612,
		final_result___2__h217513,
		final_result___2__h219114,
		final_result___2__h220012,
		final_result___3__h216565,
		final_result___3__h219068,
		final_result__h215967,
		final_result__h218467,
		final_result__h229395,
		final_result__h229418,
		final_result__h269237,
		final_result__h78465,
		getMant64_argwget_BITS_127_TO_64__q26,
		getMant64_argwget_BITS_191_TO_128__q25,
		getMant64_argwget_BITS_63_TO_0__q27,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24,
		lv_final_output__h171115,
		lv_final_output__h171172,
		lv_final_output__h171222,
		lv_final_output__h76535,
		lv_result__h200023,
		lv_result__h200064,
		new_value_final_result__h171024,
		res__h194461,
		setCanonicalNaN_argwget_BITS_127_TO_64__q40,
		setCanonicalNaN_argwget_BITS_191_TO_128__q39,
		setCanonicalNaN_argwget_BITS_63_TO_0__q41,
		wr_final_out_final_result__h194475,
		x_data__h197518,
		x_data__h199396,
		x_data__h200315,
		x_data__h200471,
		x_data__h214528,
		x_data__h214766,
		x_data__h215996,
		x_data__h218496,
		x_data__h229319,
		x_data__h229391,
		x_data__h292551,
		x_data__h292682,
		x_data__h292804;
  wire [62 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256,
		IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757,
		IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756;
  wire [61 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655,
		IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20,
		_remainder___1__h61561,
		_remainder__h61389,
		_theResult_____3__h268802,
		_theResult____h78125,
		lv_remainder__h78232,
		lv_remainder__h78322,
		lv_remainder__h78877,
		lv_remainder_temp__h78122,
		lv_root_rem__h78453,
		lv_root_temp_1__h78123,
		lv_root_temp_2__h78124,
		x__h78855;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15,
		_denominator__h63150,
		_dividend___1__h61562,
		_dividend__h60797,
		_dividend__h60895,
		_dividend__h61391,
		_dividend__h61392,
		_numerator__h63151,
		_theResult___fst__h64539,
		_theResult___fst__h64558,
		_theResult___fst__h76225,
		_theResult___fst__h76229,
		inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11,
		lv_extended_mantissa___1__h78942,
		lv_extended_mantissa__h78461,
		lv_quotient___1__h64575,
		lv_quotient_shiftL_expo__h64551,
		lv_quotient_shiftL_zerosMSB__h64553,
		x_lv_quotient__h64441;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
		result_mantissa__h78452,
		x__h284899,
		x__h78162,
		x__h78425;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732,
		IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716,
		_theResult_____4__h76442,
		_theResult_____5__h170994,
		lv_man___1__h214427,
		lv_man__h205177,
		lv_rounded_mantissa___1__h171674,
		lv_rounded_mantissa__h171704,
		lv_rounded_quotient___1__h76800,
		lv_rounded_quotient__h76441,
		lv_rounded_quotient__h76830;
  wire [52 : 0] man1__h243162,
		man2__h243163,
		x__h232466,
		x__h232530,
		x__h258071,
		x__h258099;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050,
		_theResult___snd_snd_fst__h218703,
		_theResult___snd_snd_fst__h218715,
		_theResult___snd_snd_fst__h218766,
		_theResult___snd_snd_fst__h218811,
		_theResult___snd_snd_fst__h218832,
		_theResult___snd_snd_fst__h218878,
		_theResult___snd_snd_fst__h218899,
		_theResult___snd_snd_fst__h218931,
		_theResult___snd_snd_fst__h218977,
		_theResult___snd_snd_fst__h218997,
		_theResult___snd_snd_fst__h219043,
		condFlags64_argwget_BITS_125_TO_74__q31,
		condFlags64_argwget_BITS_188_TO_137__q30,
		condFlags64_argwget_BITS_62_TO_11__q32,
		getMant64_reswget_BITS_103_TO_52__q35,
		getMant64_reswget_BITS_155_TO_104__q28,
		man__h223616,
		mant__h223556,
		mantissa___1__h267748,
		mantissa__h13735,
		mantissa__h194460,
		mantissa__h259789,
		mantissa__h259791,
		mantissa__h259801;
  wire [48 : 0] IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320,
		IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594,
		_theResult_____1_snd__h22051,
		_theResult_____1_snd__h22054,
		_theResult___snd_snd_snd_snd_fst__h22091,
		lv_product_mantissa___1__h22024,
		lv_product_mantissa___1__h22042,
		lv_product_mantissa__h14961,
		lv_product_mantissa__h21990,
		lv_product_mantissa_shiftL_expo__h21996,
		lv_product_mantissa_shiftL_zerosMSB__h21998,
		man__h228356,
		man__h228455,
		x_lv_product_mantissa__h15029,
		y_avValue_snd_snd_fst__h228784;
  wire [36 : 0] IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388,
		IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359,
		y_avValue__h228122,
		y_avValue__h228271;
  wire [31 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412,
		IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411,
		_1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49,
		_1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29,
		_theResult_____1_fst__h12164,
		_theResult_____3_fst__h197573,
		_theResult_____3_fst__h198131,
		_theResult_____3_snd_fst__h57976,
		_theResult_____3_snd_fst__h58033,
		_theResult_____3_snd_fst__h58083,
		_theResult_____3_snd_fst__h58624,
		_theResult____h179873,
		_theResult____h194456,
		_theResult___fst__h229045,
		ff_inputD_OUT_BITS_176_TO_145__q1,
		final_result___216612_BITS_31_TO_0__q57,
		final_result___217513_BITS_31_TO_0__q56,
		final_result___219114_BITS_31_TO_0__q37,
		final_result___220012_BITS_31_TO_0__q36,
		final_result__h14073,
		final_result__h260235,
		getMant32_argwget_BITS_31_TO_0__q47,
		getMant32_argwget_BITS_63_TO_32__q46,
		getMant32_argwget_BITS_95_TO_64__q45,
		inp32___1__h200923,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23,
		lv_final_output__h12142,
		lv_final_output__h57978,
		lv_final_output__h58035,
		lv_final_output__h58085,
		lv_result__h198176,
		lv_result__h198217,
		new_value_final_result__h57887,
		res___1__h229232,
		res__h179778,
		res__h228589,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q43,
		setCanonicalNaN_reswget_BITS_95_TO_64__q42,
		theResult__94456_SL_x00543_BITS_4_TO_0__q3,
		x1_avValue_final_result__h179783,
		x1_avValue_final_result__h184810,
		x1_avValue_final_result__h194354,
		x1_avValue_final_result__h194362,
		x1_avValue_final_result__h214517,
		x1_avValue_fst__h228981,
		x__h194550,
		x__h194619,
		x__h194659,
		y_avValue_fst__h228978;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268,
		IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349,
		IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		_remainder___1__h3107,
		_remainder__h2935,
		_theResult_____3__h259799,
		_theResult____h13733,
		lv_remainder__h13840,
		lv_remainder__h13930,
		lv_remainder__h14485,
		lv_remainder_temp__h13730,
		lv_root_rem__h14061,
		lv_root_temp_1__h13731,
		lv_root_temp_2__h13732,
		x__h14463;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5,
		_denominator__h4702,
		_dividend___1__h3108,
		_dividend__h2343,
		_dividend__h2441,
		_dividend__h2937,
		_dividend__h2938,
		_numerator__h4703,
		_theResult___fst__h11832,
		_theResult___fst__h11836,
		_theResult___fst__h6091,
		_theResult___fst__h6110,
		inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199,
		lv_extended_mantissa___1__h14550,
		lv_extended_mantissa__h14069,
		lv_quotient___1__h6127,
		lv_quotient_shiftL_expo__h6103,
		lv_quotient_shiftL_zerosMSB__h6105,
		x_lv_quotient__h5993;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h14060,
		x__h13770,
		x__h14033,
		x__h267777;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324,
		_theResult_____4__h12049,
		_theResult_____5__h57857,
		lv_man___1__h184716,
		lv_man___1__h194255,
		lv_man__h179888,
		lv_man__h184928,
		lv_rounded_mantissa___1__h58537,
		lv_rounded_mantissa__h58567,
		lv_rounded_quotient___1__h12407,
		lv_rounded_quotient__h12048,
		lv_rounded_quotient__h12437;
  wire [23 : 0] IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365,
		fman___1__h229253,
		fman__h228917,
		man1__h234934,
		man2__h234935,
		x__h231010,
		x__h231074,
		x__h241781,
		x__h241809;
  wire [22 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881,
		_theResult___snd_snd_fst__h216200,
		_theResult___snd_snd_fst__h216212,
		_theResult___snd_snd_fst__h216263,
		_theResult___snd_snd_fst__h216308,
		_theResult___snd_snd_fst__h216329,
		_theResult___snd_snd_fst__h216375,
		_theResult___snd_snd_fst__h216396,
		_theResult___snd_snd_fst__h216428,
		_theResult___snd_snd_fst__h216474,
		_theResult___snd_snd_fst__h216494,
		_theResult___snd_snd_fst__h216540,
		condFlags32_argwget_BITS_30_TO_8__q52,
		condFlags32_argwget_BITS_61_TO_39__q51,
		condFlags32_argwget_BITS_92_TO_70__q50,
		getMant32_reswget_BITS_45_TO_23__q55,
		getMant32_reswget_BITS_68_TO_46__q48,
		value__h226868;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240,
		IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454,
		_theResult_____1_fst__h94500,
		_theResult_____1_fst__h94503,
		_theResult_____4_snd_fst__h102388,
		_theResult___fst__h171302,
		_theResult___fst__h171306,
		_theResult___snd_fst__h76309,
		_theResult___snd_fst__h76319,
		_theResult___snd_fst__h76327,
		_theResult___snd_fst__h76337,
		_theResult___snd_fst__h76339,
		_theResult___snd_snd_snd_fst__h94456,
		exp1__h243170,
		exp1_temp__h232422,
		exp2__h243171,
		exp2_temp__h232423,
		exponent2__h102169,
		exponent3__h102148,
		exponent3__h102160,
		exponent_difference__h102183,
		inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871,
		inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451,
		lv_exponent___1__h76829,
		lv_exponent___1__h76916,
		lv_exponent__h243172,
		lv_exponent__h76444,
		lv_exponent_inc_shift__h64549,
		lv_exponent_sub_shift__h64552,
		lv_exponent_sub_zerosMSB__h64554,
		lv_minuend__h102179,
		lv_product_exponent___1__h94475,
		lv_product_exponent__h94438,
		lv_product_exponent_inc_shift__h94444,
		lv_product_exponent_sub_shift__h94447,
		lv_product_exponent_sub_zerosMSB__h94449,
		lv_summed_exponent__h232424,
		resultant_exponent___1__h171703,
		resultant_exponent__h170976,
		resultant_exponent_inc__h170971,
		resultant_exponent_sub__h170969,
		resultant_exponent_sub_zerosMSB__h170974,
		shift_neg__h64550,
		shift_neg__h94445,
		x__h232603,
		x__h232605,
		x__h232607,
		x__h243225,
		x__h94536,
		x_lv_exponent__h64442,
		x_lv_product_exponent__h79416,
		y__h232604,
		y__h232606,
		y__h243224,
		y__h243226,
		y__h243227,
		y__h250652,
		y__h94535;
  wire [11 : 0] IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6,
		_theResult_____1_fst__h78943,
		exponent___1__h269430,
		lv_exp__h218462,
		result_exponent___1__h78965,
		result_exponent__h268801,
		x__h218578,
		x__h269401,
		x__h269432,
		x__h285143,
		x__h285145,
		y__h269402,
		y__h285144;
  wire [10 : 0] expo__h194459,
		expo__h194472,
		expo__h223555,
		expo__h223614,
		local_expo___1__h214450,
		shiftDist__h228355,
		x__h228476;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252,
	       IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133,
	       _theResult_____1_fst__h22050,
	       _theResult_____1_fst__h22053,
	       _theResult_____4_snd_fst__h26052,
	       _theResult___fst__h58165,
	       _theResult___fst__h58169,
	       _theResult___snd_fst__h11916,
	       _theResult___snd_fst__h11926,
	       _theResult___snd_fst__h11934,
	       _theResult___snd_fst__h11944,
	       _theResult___snd_fst__h11946,
	       _theResult___snd_snd_snd_fst__h22006,
	       exp1__h234942,
	       exp1_temp__h230966,
	       exp2__h234943,
	       exp2_temp__h230967,
	       exponent2__h25833,
	       exponent3__h25812,
	       exponent3__h25824,
	       exponent_difference__h25847,
	       inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463,
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130,
	       lv_exponent___1__h12436,
	       lv_exponent___1__h12523,
	       lv_exponent__h12051,
	       lv_exponent__h234944,
	       lv_exponent_inc_shift__h6101,
	       lv_exponent_sub_shift__h6104,
	       lv_exponent_sub_zerosMSB__h6106,
	       lv_minuend__h25843,
	       lv_product_exponent___1__h22025,
	       lv_product_exponent__h21988,
	       lv_product_exponent_inc_shift__h21994,
	       lv_product_exponent_sub_shift__h21997,
	       lv_product_exponent_sub_zerosMSB__h21999,
	       lv_summed_exponent__h230968,
	       resultant_exponent___1__h58566,
	       resultant_exponent__h57839,
	       resultant_exponent_inc__h57834,
	       resultant_exponent_sub__h57832,
	       resultant_exponent_sub_zerosMSB__h57837,
	       shift_neg__h21995,
	       shift_neg__h6102,
	       x__h22086,
	       x__h221212,
	       x__h222117,
	       x__h231147,
	       x__h231149,
	       x__h231151,
	       x__h234997,
	       x_lv_exponent__h5994,
	       x_lv_product_exponent__h15028,
	       y__h22085,
	       y__h231148,
	       y__h231150,
	       y__h234996,
	       y__h234998,
	       y__h234999,
	       y__h238393;
  wire [8 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347,
	       _theResult_____1_fst__h14551,
	       exponent___1__h260428,
	       exponent__h259785,
	       result_exponent___1__h14573,
	       result_exponent__h259798,
	       x__h260399,
	       x__h260430,
	       x__h268021,
	       x__h268023,
	       y__h260400,
	       y__h268022;
  wire [7 : 0] IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832,
	       _theResult_____2__h228964,
	       expo___1__h229256,
	       expo__h179875,
	       expo__h184915,
	       expo__h228591,
	       local_expo___1__h184741,
	       local_expo___1__h194280,
	       lv_zeros_on_left__h148382,
	       x__h137255,
	       x__h171551;
  wire [6 : 0] lsb_zeros__h94442,
	       lv_leading_zeros__h268793,
	       lv_zeros_on_left__h47425,
	       msb_zeros___1__h94477,
	       msb_zeros__h79368,
	       msb_zeros__h94436,
	       x__h185093,
	       x__h205273,
	       x__h284873,
	       x__h42127,
	       x__h58414,
	       x__h94510;
  wire [5 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345,
	       lsb_zeros__h21992,
	       lsb_zeros__h64547,
	       lv_leading_zeros__h259790,
	       msb_zeros___1__h22027,
	       msb_zeros__h14980,
	       msb_zeros__h21986,
	       msb_zeros__h64399,
	       x__h180035,
	       x__h200543,
	       x__h22060,
	       x__h243232,
	       x__h250653,
	       x__h267751;
  wire [4 : 0] IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338,
	       IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263,
	       _theResult_____1_snd__h12143,
	       _theResult_____1_snd__h12154,
	       _theResult_____1_snd__h12165,
	       _theResult_____1_snd__h12182,
	       _theResult_____1_snd__h12292,
	       _theResult_____1_snd__h12532,
	       _theResult_____1_snd__h12550,
	       _theResult_____1_snd__h76536,
	       _theResult_____1_snd__h76547,
	       _theResult_____1_snd__h76558,
	       _theResult_____1_snd__h76575,
	       _theResult_____1_snd__h76685,
	       _theResult_____1_snd__h76925,
	       _theResult_____1_snd__h76943,
	       _theResult_____3_snd__h197574,
	       _theResult_____3_snd__h197715,
	       _theResult_____3_snd__h198132,
	       _theResult_____3_snd__h199427,
	       _theResult_____3_snd__h199568,
	       _theResult_____3_snd__h199979,
	       condFlags32_reswget_BITS_14_TO_10__q53,
	       condFlags32_reswget_BITS_9_TO_5__q54,
	       condFlags64_reswget_BITS_14_TO_10__q33,
	       condFlags64_reswget_BITS_9_TO_5__q34,
	       exception__h228597,
	       fflags__h14108,
	       fflags__h171015,
	       fflags__h179890,
	       fflags__h184930,
	       fflags__h260034,
	       fflags__h269036,
	       fflags__h57878,
	       fflags__h78500,
	       lsb_zeros__h6099,
	       msb_zeros__h5951,
	       result__h223427,
	       result__h227993,
	       result__h228992,
	       result__h229031,
	       wr_final_out_fflags__h194476,
	       x1_avValue_fflags__h179784,
	       x1_avValue_fflags__h184811,
	       x1_avValue_fflags__h194355,
	       x__h215549,
	       x__h215709,
	       x__h215806,
	       x__h218048,
	       x__h218208,
	       x__h218305,
	       x__h223619,
	       x__h235004,
	       x__h238394,
	       x_fflags__h197520,
	       x_fflags__h199398,
	       x_fflags__h200317,
	       x_fflags__h200473;
  wire [1 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868,
	       IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798,
	       IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984,
	       _theResult_____6_snd_snd__h148123,
	       _theResult_____6_snd_snd__h47166,
	       _theResult_____6_snd_snd_snd__h148170,
	       _theResult_____6_snd_snd_snd__h47213,
	       _theResult____h197731,
	       _theResult____h199584,
	       lv_compare_result__h197502,
	       lv_compare_result__h199381,
	       lv_result_is_infinity___1__h148124,
	       lv_result_is_infinity___1__h148186,
	       lv_result_is_infinity___1__h47167,
	       lv_result_is_infinity___1__h47229,
	       lv_result_is_zero___1__h148219,
	       lv_result_is_zero___1__h148223,
	       lv_result_is_zero___1__h47262,
	       lv_result_is_zero___1__h47266,
	       x__h148166,
	       x__h148207,
	       x__h148457,
	       x__h47209,
	       x__h47250,
	       x__h47500;
  wire IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314,
       IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194,
       IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246,
       IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230,
       IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313,
       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339,
       IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399,
       IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699,
       IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759,
       IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194,
       NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255,
       NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179,
       NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287,
       NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951,
       NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118,
       NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958,
       NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124,
       NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653,
       NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702,
       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245,
       NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455,
       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134,
       _theResult_____1__h102193,
       _theResult_____1__h25857,
       _theResult_____1_fst__h171838,
       _theResult_____1_fst__h58701,
       _theResult_____1_snd__h217626,
       _theResult_____1_snd__h217699,
       _theResult_____1_snd__h220125,
       _theResult_____1_snd__h220198,
       _theResult_____1_snd_fst__h171840,
       _theResult_____1_snd_fst__h58703,
       _theResult_____1_snd_snd_snd__h171843,
       _theResult_____1_snd_snd_snd__h58706,
       _theResult_____2_snd__h217301,
       _theResult_____2_snd__h219802,
       _theResult_____3_fst__h171111,
       _theResult_____3_fst__h171759,
       _theResult_____3_fst__h57974,
       _theResult_____3_fst__h58622,
       _theResult_____3_snd_fst__h217632,
       _theResult_____3_snd_fst__h220131,
       _theResult_____3_snd_snd__h171762,
       _theResult_____3_snd_snd__h58625,
       _theResult_____3_snd_snd_fst__h171875,
       _theResult_____3_snd_snd_fst__h58738,
       _theResult_____3_snd_snd_snd__h171876,
       _theResult_____3_snd_snd_snd__h58739,
       _theResult_____6__h170993,
       _theResult_____6__h57856,
       _theResult_____6_fst__h148120,
       _theResult_____6_fst__h47163,
       _theResult____h12046,
       _theResult____h179885,
       _theResult____h184925,
       _theResult____h205174,
       _theResult____h76439,
       _theResult___snd__h217034,
       _theResult___snd__h217098,
       _theResult___snd__h217162,
       _theResult___snd__h217227,
       _theResult___snd__h219535,
       _theResult___snd__h219599,
       _theResult___snd__h219663,
       _theResult___snd__h219728,
       _theResult___snd_fst__h216158,
       _theResult___snd_fst__h216198,
       _theResult___snd_fst__h216210,
       _theResult___snd_fst__h216261,
       _theResult___snd_fst__h216327,
       _theResult___snd_fst__h216394,
       _theResult___snd_fst__h216426,
       _theResult___snd_fst__h216492,
       _theResult___snd_fst__h217637,
       _theResult___snd_fst__h218661,
       _theResult___snd_fst__h218701,
       _theResult___snd_fst__h218713,
       _theResult___snd_fst__h218764,
       _theResult___snd_fst__h218830,
       _theResult___snd_fst__h218897,
       _theResult___snd_fst__h218929,
       _theResult___snd_fst__h218995,
       _theResult___snd_fst__h220136,
       _theResult___snd_snd__h231399,
       _theResult___snd_snd__h232851,
       _theResult___snd_snd_snd__h231393,
       _theResult___snd_snd_snd__h232845,
       and_sign__h197500,
       and_sign__h199379,
       ex_overflow__h170984,
       ex_overflow__h57847,
       expo3_zero__h102157,
       expo3_zero__h25821,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607,
       ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170,
       ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
       ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965,
       ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130,
       ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971,
       ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135,
       inexact__h179886,
       inexact__h184926,
       inexact__h205175,
       inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872,
       inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407,
       inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292,
       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452,
       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453,
       inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464,
       inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767,
       inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132,
       lv_inexact1__h215978,
       lv_inexact1__h218478,
       lv_inexact___1__h216563,
       lv_inexact___1__h219066,
       lv_inexact__h14068,
       lv_inexact__h170992,
       lv_inexact__h215971,
       lv_inexact__h218471,
       lv_inexact__h57855,
       lv_inexact__h78460,
       lv_invalid___2__h216566,
       lv_invalid___2__h219069,
       lv_invalid__h215953,
       lv_invalid__h215969,
       lv_invalid__h215981,
       lv_invalid__h218452,
       lv_invalid__h218469,
       lv_invalid__h218481,
       lv_op1_subnormal__h230957,
       lv_op1_subnormal__h232413,
       lv_op2_Nan__h197498,
       lv_op2_Nan__h199377,
       lv_op2_subnormal__h230958,
       lv_op2_subnormal__h232414,
       lv_round_up___1__h12336,
       lv_round_up___1__h12372,
       lv_round_up___1__h171420,
       lv_round_up___1__h171642,
       lv_round_up___1__h216646,
       lv_round_up___1__h217263,
       lv_round_up___1__h219149,
       lv_round_up___1__h219764,
       lv_round_up___1__h228746,
       lv_round_up___1__h228877,
       lv_round_up___1__h58283,
       lv_round_up___1__h58505,
       lv_round_up___1__h76729,
       lv_round_up___1__h76765,
       lv_roundup___1__h14131,
       lv_roundup___1__h14513,
       lv_roundup___1__h184644,
       lv_roundup___1__h184681,
       lv_roundup___1__h194183,
       lv_roundup___1__h194220,
       lv_roundup___1__h214356,
       lv_roundup___1__h214392,
       lv_roundup___1__h78523,
       lv_roundup___1__h78905,
       lv_sign__h194452,
       lv_sticky___1__h6128,
       lv_sticky___1__h64576,
       lv_sticky__h14066,
       lv_sticky__h170990,
       lv_sticky__h215976,
       lv_sticky__h218476,
       lv_sticky__h228252,
       lv_sticky__h228595,
       lv_sticky__h57853,
       lv_sticky__h78458,
       op_xor_sign3__h102158,
       op_xor_sign3__h25822,
       or_sign__h197499,
       or_sign__h199378,
       quiet_nan_two__h230962,
       quiet_nan_two__h232418,
       sign2__h102145,
       sign2__h25809,
       sign3__h102147,
       sign3__h25811,
       sign__h205172,
       x__h101899,
       x__h101930,
       x__h101960,
       x__h102299,
       x__h102311,
       x__h11974,
       x__h11979,
       x__h12199,
       x__h12349,
       x__h12384,
       x__h12386,
       x__h14422,
       x__h14537,
       x__h148043,
       x__h148050,
       x__h148158,
       x__h148198,
       x__h148200,
       x__h148202,
       x__h148203,
       x__h148231,
       x__h148243,
       x__h148273,
       x__h171572,
       x__h171654,
       x__h179904,
       x__h184657,
       x__h184944,
       x__h194196,
       x__h205193,
       x__h214369,
       x__h216904,
       x__h217275,
       x__h219407,
       x__h219776,
       x__h228796,
       x__h228889,
       x__h228891,
       x__h231202,
       x__h231465,
       x__h231471,
       x__h231520,
       x__h231533,
       x__h231623,
       x__h232654,
       x__h232917,
       x__h232923,
       x__h232971,
       x__h232984,
       x__h233074,
       x__h241839,
       x__h241903,
       x__h241918,
       x__h241923,
       x__h25563,
       x__h25594,
       x__h25624,
       x__h258181,
       x__h258196,
       x__h258201,
       x__h25963,
       x__h25975,
       x__h290815,
       x__h47086,
       x__h47093,
       x__h47201,
       x__h47241,
       x__h47243,
       x__h47245,
       x__h47246,
       x__h47274,
       x__h47286,
       x__h47316,
       x__h58435,
       x__h58517,
       x__h76367,
       x__h76372,
       x__h76592,
       x__h76742,
       x__h76777,
       x__h76779,
       x__h78814,
       x__h78929,
       y__h102312,
       y__h12348,
       y__h12385,
       y__h14143,
       y__h14525,
       y__h148199,
       y__h148201,
       y__h148244,
       y__h171432,
       y__h171668,
       y__h184656,
       y__h184694,
       y__h194195,
       y__h194233,
       y__h214368,
       y__h214405,
       y__h216658,
       y__h217288,
       y__h219161,
       y__h219789,
       y__h228758,
       y__h231534,
       y__h231536,
       y__h231580,
       y__h232985,
       y__h232987,
       y__h233031,
       y__h25976,
       y__h260048,
       y__h260069,
       y__h269050,
       y__h269071,
       y__h47242,
       y__h47244,
       y__h47287,
       y__h58295,
       y__h58531,
       y__h76741,
       y__h76778,
       y__h78535,
       y__h78917,
       y_avValue_snd_snd_fst__h228823,
       y_avValue_snd_snd_snd_fst__h228819;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = rg_result ;
  assign RDY_get_result = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule ff_input
  FIFO1 #(.width(32'd209), .guarded(32'd1)) ff_input(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ff_input_D_IN),
						     .ENQ(ff_input_ENQ),
						     .DEQ(ff_input_DEQ),
						     .CLR(ff_input_CLR),
						     .D_OUT(ff_input_D_OUT),
						     .FULL_N(ff_input_FULL_N),
						     .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     inst_dpfpu_sqrt_ff_final_out[69] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_30
  assign CAN_FIRE___me_check_30 = 1'b1 ;
  assign WILL_FIRE___me_check_30 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rg_result__dreg_update
  assign CAN_FIRE_RL_rg_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 ;
  assign MUX_rg_multicycle_op_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 ;
  assign MUX_rg_result_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h63212, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	      ff_input_D_OUT[208] &&
	      (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q33[3])) ?
	       { 65'h17FF8000000000000, fflags__h269036 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[1] &&
		 !ff_input_D_OUT[208]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h269237, 5'd0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h78465, fflags__h78500 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h268804,
	       x__h284899,
	       result_exponent__h268801,
	       ff_input_D_OUT[208],
	       _theResult_____3__h268802,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h78127,
	       x__h78162,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h78125,
	       x__h78425,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h4764, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	      ff_input_D_OUT[176] &&
	      (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q53[3])) ?
	       { 33'h17FC00000, fflags__h260034 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q53[1] &&
		 !ff_input_D_OUT[176]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h260235, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h14073, fflags__h14108 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h259801,
	       x__h267777,
	       result_exponent__h259798,
	       ff_input_D_OUT[176],
	       _theResult_____3__h259799,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h13735,
	       x__h13770,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h13733,
	       x__h14033,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468 or
	  x_data__h214528 or
	  x_data__h214766 or
	  IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531 or
	  IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264 or
	  IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812)
  begin
    case (ff_input_D_OUT[12:8])
      5'b00100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      { ff_input_D_OUT[0] ? x_data__h214528 : x_data__h214766,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531;
      5'b11000:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264;
      5'b11010:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812;
      default: MUX_rg_result_1_wset_1__VAL_1 =
		   IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468;
    endcase
  end
  assign MUX_rg_result_1_wset_1__VAL_2 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_4 =
	     { x_data__h292804,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_5 =
	     { x_data__h292551,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_6 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_7 =
	     { x_data__h292682, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;

  // inlined wires
  always@(MUX_rg_result_1_wset_1__SEL_1 or
	  MUX_rg_result_1_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_7)
  case (1'b1)
    MUX_rg_result_1_wset_1__SEL_1:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_3;
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_4;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_5;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_6;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_7;
    default: rg_result_1_wget =
		 70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_result_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 } ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h12142, _theResult_____1_snd__h12143 } :
	       IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h57887, fflags__h57878 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h76535, _theResult_____1_snd__h76536 } :
	       IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h171024, fflags__h171015 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[176:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_res_wget =
	     { fflags__h179890,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159[23] ?
		 local_expo___1__h184741 :
		 expo__h179875,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159[22:0] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[208:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_res_wget =
	     { fflags__h184930,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035[23] ?
		 local_expo___1__h194280 :
		 expo__h184915,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035[22:0] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657 } ;
  assign condFlags32_res_wget = { x__h215549, x__h215709, x__h215806 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[22:0],
	       getMant32_argwget_BITS_63_TO_32__q46[22:0],
	       getMant32_argwget_BITS_31_TO_0__q47[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[30:23],
	       getMant32_argwget_BITS_63_TO_32__q46[30:23],
	       getMant32_argwget_BITS_31_TO_0__q47[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796 } ;
  assign condFlags64_res_wget = { x__h218048, x__h218208, x__h218305 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[208:81] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'd0 } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145], 128'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81], 64'd0 } :
			      ff_input_D_OUT[208:17]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[51:0],
	       getMant64_argwget_BITS_127_TO_64__q26[51:0],
	       getMant64_argwget_BITS_63_TO_0__q27[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[62:52],
	       getMant64_argwget_BITS_127_TO_64__q26[62:52],
	       getMant64_argwget_BITS_63_TO_0__q27[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b11100 &&
		     ff_input_D_OUT[5:3] == 3'b001 ||
		     ff_input_D_OUT[12:8] == 5'b01000) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[208:145],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[208:17]))))) ;
  assign setCanonicalNaN_res_wget = { x__h194550, x__h194619, x__h194659 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298[105:0],
	       lv_summed_exponent__h232424,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[208] :
		 ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[144] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 ff_input_D_OUT[80],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h232654,
	       x__h232917,
	       x__h232923,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h79416,
	       x_lv_product_mantissa__h79417,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h101899,
	       x__h101960,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h148158,
	       x__h102299,
	       _theResult_____1__h102193,
	       lv_minuend__h102179,
	       mantissa2__h102189,
	       mantissa3__h102190,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h148050,
	       x__h148166,
	       x__h148207,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h148231,
	       x__h148273,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h148380,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h148457,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h148382 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_dpfpu_divider_int_div_wr_final_out_wget ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h243172,
	       x__h258071,
	       x__h258099,
	       ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
	       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	       lv_op2_Nan__h199377 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3],
	       x__h258181,
	       x__h258196,
	       x__h258201,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h232418 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h64441,
	       inst_dpfpu_divider_int_div_wr_final_out_wget[113:57],
	       x_lv_exponent__h64442,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h76367,
	       !inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452,
	       x__h76372,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	       NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     { inst_dpfpu_sqrt_ff_final_out_1_whas &&
	       inst_dpfpu_sqrt_ff_final_out_1_wget[69],
	       inst_dpfpu_sqrt_ff_final_out_1_wget[68:0] } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218[47:0],
	       lv_summed_exponent__h230968,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h231202,
	       x__h231465,
	       x__h231471,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h15028,
	       x_lv_product_mantissa__h15029,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h25563,
	       x__h25624,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h47201,
	       x__h25963,
	       _theResult_____1__h25857,
	       lv_minuend__h25843,
	       mantissa2__h25853,
	       mantissa3__h25854,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h47093,
	       x__h47209,
	       x__h47250,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h47274,
	       x__h47316,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h47423,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h47500,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h47425 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_spfpu_divider_int_div_wr_final_out_wget ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h234944,
	       x__h241781,
	       x__h241809,
	       x__h241839,
	       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	       lv_op2_Nan__h197498 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3],
	       x__h241903,
	       x__h241918,
	       x__h241923,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h230962 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h5993,
	       inst_spfpu_divider_int_div_wr_final_out_wget[55:28],
	       x_lv_exponent__h5994,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h11974,
	       !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
	       x__h11979,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     { inst_spfpu_sqrt_ff_final_out_1_whas &&
	       inst_spfpu_sqrt_ff_final_out_1_wget[37],
	       inst_spfpu_sqrt_ff_final_out_1_wget[36:0] } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  assign rg_multicycle_op_D_IN = MUX_rg_multicycle_op_write_1__SEL_1 ;
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // register rg_result
  assign rg_result_D_IN =
	     rg_result_1_whas ?
	       rg_result_1_wget :
	       { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 6'd0 } ;
  assign rg_result_EN = 1'd1 ;

  // submodule ff_input
  assign ff_input_D_IN =
	     { _start_operand1,
	       _start_operand2,
	       _start_operand3,
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp } ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817 =
	     _theResult_____3__h259799[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941 =
	     _theResult_____3__h268802[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063 =
	     (x__h218578[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[208] ?
		  IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[0] ?
	       mantissa__h259791 :
	       mantissa___1__h267748 ;
  assign IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[0] ?
	       mantissa__h268794 :
	       mantissa___1__h284870 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240 =
	     (_theResult_____5__h170994[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:158] ==
	      2'b0 &&
	      _theResult_____5__h170994[52]) ?
	       resultant_exponent___1__h171703 :
	       resultant_exponent__h170976 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253 =
	     _theResult_____5__h170994[53] ?
	       lv_rounded_mantissa__h171704 :
	       _theResult_____5__h170994 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405 =
	     _remainder__h61389[57] ?
	       { _remainder___1__h61561, _dividend___1__h61562 } :
	       { _remainder__h61389, _dividend__h61392 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732 =
	     _theResult_____4__h76442[53] ?
	       lv_rounded_quotient__h76830 :
	       _theResult_____4__h76442 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 ?
	       lv_man___1__h194255 :
	       lv_man__h184928 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 ?
	       lv_man___1__h184716 :
	       lv_man__h179888 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252 =
	     (_theResult_____5__h57857[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:71] ==
	      2'b0 &&
	      _theResult_____5__h57857[23]) ?
	       resultant_exponent___1__h58566 :
	       resultant_exponent__h57839 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265 =
	     _theResult_____5__h57857[24] ?
	       lv_rounded_mantissa__h58567 :
	       _theResult_____5__h57857 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 =
	     _remainder__h2935[28] ?
	       { _remainder___1__h3107, _dividend___1__h3108 } :
	       { _remainder__h2935, _dividend__h2938 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324 =
	     _theResult_____4__h12049[24] ?
	       lv_rounded_quotient__h12437 :
	       _theResult_____4__h12049 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414 =
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h197498 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412) ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h216200 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       { expo__h223614, man__h223616 } :
	       { expo__h223555, mant__h223556 } ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0]) ?
	       { result__h223427, 64'h7FF8000000000000 } :
	       { 5'd0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 condFlags32_reswget_BITS_14_TO_10__q53[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450 } ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       { 5'b0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 63'b0 } :
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803 =
	     x__h260399 - y__h260400 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493 =
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ?
	       ff_input_D_OUT[144:81] :
	       (lv_op2_Nan__h199377 ?
		  ff_input_D_OUT[208:145] :
		  IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218578[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h218703 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] ?
	       { 5'd0, ff_input_D_OUT[208], 31'h7F800000 } :
	       (IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 ?
		  y_avValue__h228271 :
		  y_avValue__h228122) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       { 5'b0, ff_input_D_OUT[208], 31'b0 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[2] ||
		 condFlags64_reswget_BITS_14_TO_10__q33[0]) ?
		  { result__h227993, 32'h7FC00000 } :
		  IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927 =
	     x__h269401 - y__h269402 ;
  assign IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 ?
	       lv_man___1__h214427 :
	       lv_man__h205177 ;
  assign IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365 =
	     _theResult_____4___1__h228726 ?
	       fman___1__h229253 :
	       fman__h228917 ;
  assign IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
		  IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       49'd0 :
	       y_avValue_snd_snd_fst__h228784 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423 =
	     mantissa_to_shift__h102182 >> exponent_difference__h102183 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ?
	       (!resultant_exponent__h170976[12] ||
		inst_dpfm_add_sub_ff_stage5[8]) &&
	       !inst_dpfm_add_sub_ff_stage5[11] :
	       !inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ?
	       resultant_exponent__h170976[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[112:0],
	       1'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 ?
	       _theResult_____1_fst__h78943 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 ?
	       lv_extended_mantissa___1__h78942 :
	       lv_extended_mantissa__h78461 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006 =
	     _theResult____h184913 << x__h185093[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130 =
	     _theResult____h179873 << x__h180035[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783 =
	     mantissa_to_shift__h25846 >> exponent_difference__h25847 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ?
	       (!resultant_exponent__h57839[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ?
	       resultant_exponent__h57839[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[54:0],
	       1'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 ?
	       _theResult_____1_fst__h14551 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 ?
	       lv_extended_mantissa___1__h14550 :
	       lv_extended_mantissa__h14069 ;
  assign IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 =
	     lv_invalid__h215981 | condFlags32_reswget_BITS_14_TO_10__q53[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       lv_inexact___1__h216563 :
	       lv_inexact__h215971 ;
  assign IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230 =
	     lv_invalid__h218481 | condFlags64_reswget_BITS_14_TO_10__q33[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       lv_inexact___1__h219066 :
	       lv_inexact__h218471 ;
  assign IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338 =
	     (!IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	      IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 &&
	      x__h228889) ?
	       result__h229031 :
	       exception__h228597 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256 =
	     (ex_overflow__h170984 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	      11'd2047) ?
	       ((inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		 !inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		 inst_dpfm_add_sub_ff_stage5[23]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0],
		 IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253[51:0] } ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268 =
	     (ex_overflow__h57847 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265[22:0] } ;
  assign IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692 =
	     _theResult____h194469 << x__h205273[5:0] ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h197502 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h197502 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h198176 :
	       IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411 ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491 =
	     (!ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h200023 :
	       IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757 =
	     (NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { 11'd0,
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[52]) ?
	       lv_exponent___1__h76916 :
	       lv_exponent__h76444 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349 =
	     (NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[23]) ?
	       lv_exponent___1__h12523 :
	       lv_exponent__h12051 ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 =
	     condFlags32_reswget_BITS_14_TO_10__q53[2] |
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837 =
	     condFlags32_reswget_BITS_14_TO_10__q53[1] | lv_invalid__h215953 ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241) ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 =
	     condFlags32_reswget_BITS_9_TO_5__q54[0] |
	     condFlags32_reswget_BITS_9_TO_5__q54[2] ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 =
	     condFlags64_reswget_BITS_14_TO_10__q33[2] |
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] | lv_invalid__h218452 ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218578[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) &&
	     (!ff_input_D_OUT[208] || !ff_input_D_OUT[1] ||
	      NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255) ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 =
	     condFlags64_reswget_BITS_9_TO_5__q34[0] |
	     condFlags64_reswget_BITS_9_TO_5__q34[2] ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793 ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] :
	       x__h241839 ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h231520,
		 x__h231623 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h232971,
		 x__h233074 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468 =
	     (ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[0] ? x__h221212 : x__h222117, 6'd32 } :
	       ((ff_input_D_OUT[12:8] == 5'b01000) ?
		  IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460 :
		  { ((ff_input_D_OUT[12:6] == 7'b1110000 ||
		      ff_input_D_OUT[12:6] == 7'b1111000) &&
		     ff_input_D_OUT[5:3] == 3'b0) ?
		      x_data__h229391 :
		      ff_input_D_OUT[208:145],
		    6'd32 }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  62'd0 :
		  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793 =
	     (ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  126'd0 :
		  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h231520, x__h231623 } :
	       { x__h290815,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h231520,
		 x__h231623 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h232971, x__h233074 } :
	       { x__h290815,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h232971,
		 x__h233074 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460 =
	     { ff_input_D_OUT[0] ?
		 x_data__h229319 :
		 IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454[63:0],
	       1'd1,
	       ff_input_D_OUT[0] ?
		 IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388[36:32] :
		 IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454[68:64] } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812 =
	     { ff_input_D_OUT[0] ? x_data__h200315 : x_data__h200471,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h200317 : x_fflags__h200473 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263 =
	     { ff_input_D_OUT[0] ?
		 IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 :
		 IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230,
	       3'd0,
	       ff_input_D_OUT[0] ?
		 _theResult_____1_snd__h217699 :
		 _theResult_____1_snd__h220198 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264 =
	     { ff_input_D_OUT[0] ? x_data__h215996 : x_data__h218496,
	       1'd1,
	       IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531 =
	     { ff_input_D_OUT[0] ? x_data__h197518 : x_data__h199396,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h197520 : x_fflags__h199398 } ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 =
	     ff_input_D_OUT[1] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215953 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215953 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215953 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215953 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218452 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218452 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218452 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218452 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ;
  assign IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h198217 :
	       IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410 ;
  assign IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490 =
	     (ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h200064 :
	       ((!ff_input_D_OUT[3] && lv_compare_result__h199381 == 2'b01 ||
		 ff_input_D_OUT[3] && lv_compare_result__h199381 == 2'b10) ?
		  ff_input_D_OUT[208:145] :
		  ff_input_D_OUT[144:81]) ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd192 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd191 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 =
	     getExp64_res_wget[32:22] <= 11'd1150 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 =
	     getExp64_res_wget[32:22] <= 11'd872 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 =
	     getExp64_res_wget[32:22] <= 11'd896 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118 =
	     lv_product_mantissa__h94440 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h94442 } ^ 13'h1000) ||
	      lv_product_mantissa__h94440[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h102145 | op_xor_sign3__h102158 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h102145 & op_xor_sign3__h102158) ?
	       2'b11 :
	       (sign2__h102145 ? lv_result_is_zero___1__h148219 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 =
	     exponent2__h102169 <= exponent3__h102160 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 =
	     (resultant_exponent__h170976 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h171274 :
	       _theResult___snd_fst__h171519 ;
  assign IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h76547 } :
	       { _theResult_____1_fst__h76557,
		 _theResult_____1_snd__h76558 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594 =
	     lv_product_mantissa__h21990 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h21992 } ^ 10'h200) ||
	      lv_product_mantissa__h21990[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h25809 | op_xor_sign3__h25822 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h25809 & op_xor_sign3__h25822) ?
	       2'b11 :
	       (sign2__h25809 ? lv_result_is_zero___1__h47262 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 =
	     exponent2__h25833 <= exponent3__h25824 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 =
	     (resultant_exponent__h57839 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h58137 :
	       _theResult___snd_fst__h58382 ;
  assign IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h12154 } :
	       { _theResult_____1_fst__h12164,
		 _theResult_____1_snd__h12165 } ;
  assign IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 =
	     shift_neg__h94445 < { 6'd0, x__h94510 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 =
	     shift_neg__h21995 < { 4'd0, x__h22060 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 =
	     shift_neg__h64550 < { 7'd0, msb_zeros__h64399 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 =
	     shift_neg__h6102 < { 5'd0, msb_zeros__h5951 } ;
  assign NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255 =
	     (x__h218578[10:0] != 11'd2047 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h218578[10] || ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[4] &&
	     (!IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] ||
	      IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847 :
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852) ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[4] &&
	     (!x__h218578[10] ||
	      IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017 :
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022) ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ;
  assign NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197498 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199377 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	      ff_input_D_OUT[176] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !ff_input_D_OUT[176] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	      ff_input_D_OUT[208] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !ff_input_D_OUT[208] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544) ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      !ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730) ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h215967[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218578[10:0] == 11'd30 &&
	     final_result__h218467[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h215967[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218578[10:0] == 11'd31 &&
	     final_result__h218467[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653 =
	     !inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ||
	      !inst_dpfpu_divider_int_div_wr_final_out_wget[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 =
	     x__h76592 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245 =
	     !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ||
	      !inst_spfpu_divider_int_div_wr_final_out_wget[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194) ;
  assign NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 =
	     x__h12199 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751 =
	     ({ 5'd0, x__h137255 } < exponent_difference__h102183 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423[0]) &&
	     mantissa_to_shift__h102182 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937 =
	     ({ 3'd0, x__h42127 } < exponent_difference__h25847 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783[0]) &&
	     mantissa_to_shift__h25846 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218 =
	     { 24'd0, x__h231010 } * { 24'd0, x__h231074 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298 =
	     { 53'd0, x__h232466 } * { 53'd0, x__h232530 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 <=
	     resultant_exponent_sub__h170969 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 <=
	     resultant_exponent_sub__h57832 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 =
	     (x__h218578[10:0] ^ 11'h400) < 11'd1088 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 =
	     (x__h218578[10:0] ^ 11'h400) < 11'd1087 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 =
	     (x__h218578[10:0] ^ 11'h400) < 11'd1056 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 =
	     (x__h218578[10:0] ^ 11'h400) < 11'd1055 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200 =
	     x__h218578[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h218578[10] && ff_input_D_OUT[5:3] == 3'b010 ;
  assign _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868 =
	     final_man__h215965 <<
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ;
  assign _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49 =
	     _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[54:23] ;
  assign _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037 =
	     final_man__h218465 << x__h218578[10:0] ;
  assign _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29 =
	     _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 =
	     13'd1 - lv_product_exponent__h94438 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 =
	     10'd1 - lv_product_exponent__h21988 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h4702 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h63150 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3108 = _dividend__h2938 - 27'd1 ;
  assign _dividend___1__h61562 = _dividend__h61392 - 56'd1 ;
  assign _dividend__h2343 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign _dividend__h2441 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign _dividend__h2937 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2441 :
	       _dividend__h2343 ;
  assign _dividend__h2938 = _dividend__h2937 - ~_dividend__h2937 ;
  assign _dividend__h60797 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign _dividend__h60895 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign _dividend__h61391 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h60895 :
	       _dividend__h60797 ;
  assign _dividend__h61392 = _dividend__h61391 - ~_dividend__h61391 ;
  assign _numerator__h4703 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h63151 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3107 =
	     _remainder__h2935 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       1'b0 } ;
  assign _remainder___1__h61561 =
	     _remainder__h61389 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       1'b0 } ;
  assign _remainder__h2935 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[54:26] ;
  assign _remainder__h61389 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388[112:55] ;
  assign _theResult_____1__h102193 = mantissa2__h102189 > mantissa3__h102190 ;
  assign _theResult_____1__h25857 = mantissa2__h25853 > mantissa3__h25854 ;
  assign _theResult_____1_fst__h12164 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349) } ;
  assign _theResult_____1_fst__h14551 =
	     lv_extended_mantissa___1__h14550[26] ?
	       result_exponent___1__h14573 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h171838 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_fst__h171111 ;
  assign _theResult_____1_fst__h217625 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       final_result___3__h216565 ;
  assign _theResult_____1_fst__h220124 =
	     (ff_input_D_OUT[1] && ff_input_D_OUT[208]) ?
	       64'd0 :
	       final_result___3__h219068 ;
  assign _theResult_____1_fst__h22050 =
	     (msb_zeros__h21986 == 6'b000001) ?
	       lv_product_exponent__h21988 :
	       _theResult_____1_fst__h22053 ;
  assign _theResult_____1_fst__h22053 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 ?
	       lv_product_exponent_sub_shift__h21997 :
	       lv_product_exponent_sub_zerosMSB__h21999 ;
  assign _theResult_____1_fst__h58701 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_fst__h57974 ;
  assign _theResult_____1_fst__h76557 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757) } ;
  assign _theResult_____1_fst__h78943 =
	     lv_extended_mantissa___1__h78942[55] ?
	       result_exponent___1__h78965 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_fst__h94500 =
	     (msb_zeros__h94436 == 7'b0000001) ?
	       lv_product_exponent__h94438 :
	       _theResult_____1_fst__h94503 ;
  assign _theResult_____1_fst__h94503 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 ?
	       lv_product_exponent_sub_shift__h94447 :
	       lv_product_exponent_sub_zerosMSB__h94449 ;
  assign _theResult_____1_snd__h12143 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h12154 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h12165 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h12182 ;
  assign _theResult_____1_snd__h12182 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h12292 ;
  assign _theResult_____1_snd__h12292 =
	     (NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h12532 ;
  assign _theResult_____1_snd__h12532 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h12550 ;
  assign _theResult_____1_snd__h12550 =
	     NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h217626 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     lv_invalid___2__h216566 ;
  assign _theResult_____1_snd__h217699 =
	     !IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 &&
	     IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246 ;
  assign _theResult_____1_snd__h220125 =
	     ff_input_D_OUT[1] && ff_input_D_OUT[208] ||
	     lv_invalid___2__h219069 ;
  assign _theResult_____1_snd__h220198 =
	     !IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230 &&
	     IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260 ;
  assign _theResult_____1_snd__h22051 =
	     (msb_zeros__h21986 == 6'b000001) ?
	       lv_product_mantissa__h21990 :
	       _theResult_____1_snd__h22054 ;
  assign _theResult_____1_snd__h22054 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 ?
	       lv_product_mantissa_shiftL_expo__h21996 :
	       lv_product_mantissa_shiftL_zerosMSB__h21998 ;
  assign _theResult_____1_snd__h76536 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h76547 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h76558 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h76575 ;
  assign _theResult_____1_snd__h76575 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h76685 ;
  assign _theResult_____1_snd__h76685 =
	     (NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h76925 ;
  assign _theResult_____1_snd__h76925 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h76943 ;
  assign _theResult_____1_snd__h76943 =
	     NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h94501 =
	     (msb_zeros__h94436 == 7'b0000001) ?
	       lv_product_mantissa__h94440 :
	       _theResult_____1_snd__h94504 ;
  assign _theResult_____1_snd__h94504 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 ?
	       lv_product_mantissa_shiftL_expo__h94446 :
	       lv_product_mantissa_shiftL_zerosMSB__h94448 ;
  assign _theResult_____1_snd_fst__h171840 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292 &&
	     _theResult_____3_snd_snd_fst__h171875 ;
  assign _theResult_____1_snd_fst__h58703 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304 &&
	     _theResult_____3_snd_snd_fst__h58738 ;
  assign _theResult_____1_snd_snd_snd__h171843 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_snd__h171876 ;
  assign _theResult_____1_snd_snd_snd__h58706 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_snd__h58739 ;
  assign _theResult_____2__h228964 =
	     IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365[23] ?
	       expo___1__h229256 :
	       expo__h228591 ;
  assign _theResult_____2_fst__h217300 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_fst__h217407 ;
  assign _theResult_____2_fst__h217407 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h217459 ;
  assign _theResult_____2_fst__h217459 =
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h217510 ;
  assign _theResult_____2_fst__h217510 =
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h217514 ;
  assign _theResult_____2_fst__h217514 =
	     (!ff_input_D_OUT[2] && final_result___2__h217513[31]) ?
	       final_result___1__h217552 :
	       final_result___2__h217513 ;
  assign _theResult_____2_fst__h219801 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_fst__h219906 ;
  assign _theResult_____2_fst__h219906 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h219958 ;
  assign _theResult_____2_fst__h219958 =
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h220009 ;
  assign _theResult_____2_fst__h220009 =
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h220013 ;
  assign _theResult_____2_fst__h220013 =
	     (!ff_input_D_OUT[2] && final_result___2__h220012[31]) ?
	       final_result___1__h220051 :
	       final_result___2__h220012 ;
  assign _theResult_____2_snd__h217301 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 ||
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 ||
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 ||
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 ;
  assign _theResult_____2_snd__h219802 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 ||
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 ||
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 ||
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 ;
  assign _theResult_____3__h259799 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h268802 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h171111 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		lv_inexact__h170992 :
		_theResult_____3_fst__h171759) ;
  assign _theResult_____3_fst__h171759 =
	     ex_overflow__h170984 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	     11'd2047 ||
	     lv_inexact__h170992 ;
  assign _theResult_____3_fst__h197573 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       32'd0 :
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 ;
  assign _theResult_____3_fst__h198131 =
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &
	      lv_op2_Nan__h197498) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414 ;
  assign _theResult_____3_fst__h199426 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       64'd0 :
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 ;
  assign _theResult_____3_fst__h199978 =
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &
	      lv_op2_Nan__h199377) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493 ;
  assign _theResult_____3_fst__h216568 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       ((!ff_input_D_OUT[2] && final_result___2__h216612[31]) ?
		  final_result___1__h217582 :
		  final_result___2__h216612) :
	       _theResult_____1_fst__h217625 ;
  assign _theResult_____3_fst__h219071 =
	     sign__h205172 ?
	       ((!ff_input_D_OUT[2] && final_result___2__h219114[31]) ?
		  final_result___1__h220081 :
		  final_result___2__h219114) :
	       _theResult_____1_fst__h220124 ;
  assign _theResult_____3_fst__h57974 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h57855 :
		_theResult_____3_fst__h58622) ;
  assign _theResult_____3_fst__h58622 =
	     ex_overflow__h57847 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	     8'd255 ||
	     lv_inexact__h57855 ;
  assign _theResult_____3_snd__h197574 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       _theResult_____3_snd__h197715 :
	       5'd0 ;
  assign _theResult_____3_snd__h197715 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] |
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h198132 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h199427 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       _theResult_____3_snd__h199568 :
	       5'd0 ;
  assign _theResult_____3_snd__h199568 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] |
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h199979 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd_fst__h171113 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       lv_final_output__h171115 :
	       _theResult_____3_snd_fst__h171170 ;
  assign _theResult_____3_snd_fst__h171170 =
	     inst_dpfm_add_sub_ff_stage5[13] ?
	       lv_final_output__h171172 :
	       _theResult_____3_snd_fst__h171220 ;
  assign _theResult_____3_snd_fst__h171220 =
	     inst_dpfm_add_sub_ff_stage5[18] ?
	       lv_final_output__h171222 :
	       _theResult_____3_snd_fst__h171761 ;
  assign _theResult_____3_snd_fst__h171761 =
	     { inst_dpfm_add_sub_ff_stage5[23],
	       IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256 } ;
  assign _theResult_____3_snd_fst__h217632 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       lv_invalid___2__h216566 :
	       _theResult_____1_snd__h217626 ;
  assign _theResult_____3_snd_fst__h220131 =
	     sign__h205172 ?
	       lv_invalid___2__h219069 :
	       _theResult_____1_snd__h220125 ;
  assign _theResult_____3_snd_fst__h57976 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       lv_final_output__h57978 :
	       _theResult_____3_snd_fst__h58033 ;
  assign _theResult_____3_snd_fst__h58033 =
	     inst_spfm_add_sub_ff_stage5[12] ?
	       lv_final_output__h58035 :
	       _theResult_____3_snd_fst__h58083 ;
  assign _theResult_____3_snd_fst__h58083 =
	     inst_spfm_add_sub_ff_stage5[17] ?
	       lv_final_output__h58085 :
	       _theResult_____3_snd_fst__h58624 ;
  assign _theResult_____3_snd_fst__h58624 =
	     { inst_spfm_add_sub_ff_stage5[22],
	       IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268 } ;
  assign _theResult_____3_snd_snd__h171762 =
	     ex_overflow__h170984 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_snd_snd__h58625 =
	     ex_overflow__h57847 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd_snd_fst__h171875 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h170993 ;
  assign _theResult_____3_snd_snd_fst__h58738 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h57856 ;
  assign _theResult_____3_snd_snd_snd__h171876 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		ex_overflow__h170984 :
		_theResult_____3_snd_snd__h171762) ;
  assign _theResult_____3_snd_snd_snd__h58739 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h57847 :
		_theResult_____3_snd_snd__h58625) ;
  assign _theResult_____4__h12049 =
	     IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 ?
	       lv_rounded_quotient___1__h12407 :
	       lv_rounded_quotient__h12048 ;
  assign _theResult_____4__h76442 =
	     IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 ?
	       lv_rounded_quotient___1__h76800 :
	       lv_rounded_quotient__h76441 ;
  assign _theResult_____4_snd_fst__h102388 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       exponent2__h102169 :
	       exponent3__h102160 ;
  assign _theResult_____4_snd_fst__h26052 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       exponent2__h25833 :
	       exponent3__h25824 ;
  assign _theResult_____5__h170994 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 ?
	       lv_rounded_mantissa___1__h171674 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:106] ;
  assign _theResult_____5__h57857 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 ?
	       lv_rounded_mantissa___1__h58537 :
	       IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:48] ;
  assign _theResult_____6__h170993 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 &&
	     lv_inexact__h170992 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302 ;
  assign _theResult_____6__h57856 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 &&
	     lv_inexact__h57855 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314 ;
  assign _theResult_____6_fst__h148120 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h47163 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h148123 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h148124 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h148186 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h47166 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h47167 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h47229 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h148170 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h148223 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h47213 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h47266 :
		  IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984) :
	       2'd0 ;
  assign _theResult____h102159 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h121879 :
	       160'd0 ;
  assign _theResult____h12046 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h13733 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h13840 :
	       lv_remainder__h13930 ;
  assign _theResult____h148380 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h148379 :
	       add_mantissa__h148376 ;
  assign _theResult____h179873 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h179885 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[5:0] !=
	     6'd0 ;
  assign _theResult____h184913 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h184925 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[37:0] !=
	     38'd0 ;
  assign _theResult____h194456 =
	     lv_sign__h194452 ? inp32___1__h200923 : ff_input_D_OUT[176:145] ;
  assign _theResult____h194469 =
	     sign__h205172 ?
	       ~ff_input_D_OUT[208:145] + 64'd1 :
	       ff_input_D_OUT[208:145] ;
  assign _theResult____h197731 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h199584 =
	     (ff_input_D_OUT[207:197] < ff_input_D_OUT[143:133]) ?
	       2'b01 :
	       ((ff_input_D_OUT[207:197] == ff_input_D_OUT[143:133]) ?
		  ((ff_input_D_OUT[196:145] < ff_input_D_OUT[132:81]) ?
		     2'b01 :
		     ((ff_input_D_OUT[196:145] == ff_input_D_OUT[132:81]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h205174 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[8:0] !=
	     9'd0 ;
  assign _theResult____h25823 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h35045 :
	       73'd0 ;
  assign _theResult____h47423 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h47422 :
	       add_mantissa__h47419 ;
  assign _theResult____h76439 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h78125 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h78232 :
	       lv_remainder__h78322 ;
  assign _theResult___fst__h11832 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] :
	       _theResult___fst__h11836 ;
  assign _theResult___fst__h11836 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 ?
	       lv_quotient_shiftL_expo__h6103 :
	       lv_quotient_shiftL_zerosMSB__h6105 ;
  assign _theResult___fst__h171302 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h171306 ;
  assign _theResult___fst__h171306 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ?
	       resultant_exponent_sub_zerosMSB__h170974 :
	       13'd0 ;
  assign _theResult___fst__h216156 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       _theResult___fst__h216926 :
	       _theResult___fst__h216196 ;
  assign _theResult___fst__h216196 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h216392 :
	       _theResult___fst__h216208 ;
  assign _theResult___fst__h216208 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h216325 :
	       _theResult___fst__h216259 ;
  assign _theResult___fst__h216259 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       final_result___1__h216977 :
	       _theResult___fst__h216304 ;
  assign _theResult___fst__h216304 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       final_result___1__h216314 :
	       _theResult___fst__h217029 ;
  assign _theResult___fst__h216325 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       final_result___1__h216348 :
	       _theResult___fst__h216371 ;
  assign _theResult___fst__h216371 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ?
	       final_result___1__h216314 :
	       _theResult___fst__h217097 ;
  assign _theResult___fst__h216392 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h216490 :
	       _theResult___fst__h216424 ;
  assign _theResult___fst__h216424 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       final_result___1__h216447 :
	       _theResult___fst__h216470 ;
  assign _theResult___fst__h216470 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[86:23] :
	       _theResult___fst__h217157 ;
  assign _theResult___fst__h216490 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       final_result___1__h216348 :
	       _theResult___fst__h216536 ;
  assign _theResult___fst__h216536 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[86:23] :
	       _theResult___fst__h217226 ;
  assign _theResult___fst__h216926 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895) ;
  assign _theResult___fst__h217029 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       64'd0 :
	       _theResult___fst__h217033 ;
  assign _theResult___fst__h217033 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___fst__h217097 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h217157 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       64'd0 :
	       _theResult___fst__h217161 ;
  assign _theResult___fst__h217161 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___fst__h217226 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h218659 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218578[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       _theResult___fst__h219429 :
	       _theResult___fst__h218699 ;
  assign _theResult___fst__h218699 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h218895 :
	       _theResult___fst__h218711 ;
  assign _theResult___fst__h218711 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218828 :
	       _theResult___fst__h218762 ;
  assign _theResult___fst__h218762 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       final_result___1__h219478 :
	       _theResult___fst__h218807 ;
  assign _theResult___fst__h218807 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       final_result___1__h218817 :
	       _theResult___fst__h219530 ;
  assign _theResult___fst__h218828 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       final_result___1__h218851 :
	       _theResult___fst__h218874 ;
  assign _theResult___fst__h218874 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ?
	       final_result___1__h218817 :
	       _theResult___fst__h219598 ;
  assign _theResult___fst__h218895 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218993 :
	       _theResult___fst__h218927 ;
  assign _theResult___fst__h218927 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       final_result___1__h218950 :
	       _theResult___fst__h218973 ;
  assign _theResult___fst__h218973 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[115:52] :
	       _theResult___fst__h219658 ;
  assign _theResult___fst__h218993 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       final_result___1__h218851 :
	       _theResult___fst__h219039 ;
  assign _theResult___fst__h219039 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[115:52] :
	       _theResult___fst__h219727 ;
  assign _theResult___fst__h219429 =
	     (!ff_input_D_OUT[208] && ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063) ;
  assign _theResult___fst__h219530 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       64'd0 :
	       _theResult___fst__h219534 ;
  assign _theResult___fst__h219534 =
	     ff_input_D_OUT[208] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___fst__h219598 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h219658 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       64'd0 :
	       _theResult___fst__h219662 ;
  assign _theResult___fst__h219662 =
	     ff_input_D_OUT[208] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___fst__h219727 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h229045 =
	     (ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[5:3] == 3'b011 && !ff_input_D_OUT[208]) ?
		  32'd1 :
		  { ff_input_D_OUT[208], 31'b0 }) ;
  assign _theResult___fst__h58165 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h58169 ;
  assign _theResult___fst__h58169 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ?
	       resultant_exponent_sub_zerosMSB__h57837 :
	       10'd0 ;
  assign _theResult___fst__h6091 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       27'd1 :
	       _theResult___fst__h6110 ;
  assign _theResult___fst__h6110 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___fst__h11832 :
	       lv_quotient___1__h6127 ;
  assign _theResult___fst__h64539 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ?
	       56'd1 :
	       _theResult___fst__h64558 ;
  assign _theResult___fst__h64558 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ?
	       _theResult___fst__h76225 :
	       lv_quotient___1__h64575 ;
  assign _theResult___fst__h76225 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] :
	       _theResult___fst__h76229 ;
  assign _theResult___fst__h76229 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 ?
	       lv_quotient_shiftL_expo__h64551 :
	       lv_quotient_shiftL_zerosMSB__h64553 ;
  assign _theResult___snd__h217034 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___snd__h217098 =
	     !IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ||
	     lv_invalid__h215953 ;
  assign _theResult___snd__h217162 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___snd__h217227 =
	     !IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ||
	     lv_invalid__h215953 ;
  assign _theResult___snd__h219535 =
	     !ff_input_D_OUT[208] || x__h218578[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___snd__h219599 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ||
	     lv_invalid__h218452 ;
  assign _theResult___snd__h219663 =
	     !ff_input_D_OUT[208] || x__h218578[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___snd__h219728 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ||
	     lv_invalid__h218452 ;
  assign _theResult___snd_final_result__h194477 =
	     ff_input_D_OUT[2] ?
	       wr_final_out_final_result__h194475 :
	       res__h194461 ;
  assign _theResult___snd_fst__h11916 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___snd_fst__h11926 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h11926 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       10'd0 :
	       _theResult___snd_fst__h11934 ;
  assign _theResult___snd_fst__h11934 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___snd_fst__h11944 :
	       lv_exponent_inc_shift__h6101 ;
  assign _theResult___snd_fst__h11944 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h11946 ;
  assign _theResult___snd_fst__h11946 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 ?
	       lv_exponent_sub_shift__h6104 :
	       lv_exponent_sub_zerosMSB__h6106 ;
  assign _theResult___snd_fst__h171519 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h171521 ;
  assign _theResult___snd_fst__h171521 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ?
	       resultant_mantissa_norm_zerosMSB__h170973 :
	       resultant_mantissa_norm_expo__h170972 ;
  assign _theResult___snd_fst__h216158 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       _theResult___snd_fst__h217637 :
	       _theResult___snd_fst__h216198 ;
  assign _theResult___snd_fst__h216198 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h216394 :
	       _theResult___snd_fst__h216210 ;
  assign _theResult___snd_fst__h216210 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h216327 :
	       _theResult___snd_fst__h216261 ;
  assign _theResult___snd_fst__h216261 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850) ?
	       lv_invalid__h215953 :
	       _theResult___snd__h217034 ;
  assign _theResult___snd_fst__h216327 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848) ?
	       lv_invalid__h215953 :
	       _theResult___snd__h217098 ;
  assign _theResult___snd_fst__h216394 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h216492 :
	       _theResult___snd_fst__h216426 ;
  assign _theResult___snd_fst__h216426 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845) ?
	       lv_invalid__h215953 :
	       _theResult___snd__h217162 ;
  assign _theResult___snd_fst__h216492 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843) ?
	       lv_invalid__h215953 :
	       _theResult___snd__h217227 ;
  assign _theResult___snd_fst__h217637 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164 ||
	     lv_invalid__h215953 ;
  assign _theResult___snd_fst__h218661 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218578[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       _theResult___snd_fst__h220136 :
	       _theResult___snd_fst__h218701 ;
  assign _theResult___snd_fst__h218701 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h218897 :
	       _theResult___snd_fst__h218713 ;
  assign _theResult___snd_fst__h218713 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218830 :
	       _theResult___snd_fst__h218764 ;
  assign _theResult___snd_fst__h218764 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020) ?
	       lv_invalid__h218452 :
	       _theResult___snd__h219535 ;
  assign _theResult___snd_fst__h218830 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018) ?
	       lv_invalid__h218452 :
	       _theResult___snd__h219599 ;
  assign _theResult___snd_fst__h218897 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218995 :
	       _theResult___snd_fst__h218929 ;
  assign _theResult___snd_fst__h218929 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015) ?
	       lv_invalid__h218452 :
	       _theResult___snd__h219663 ;
  assign _theResult___snd_fst__h218995 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013) ?
	       lv_invalid__h218452 :
	       _theResult___snd__h219728 ;
  assign _theResult___snd_fst__h220136 =
	     ff_input_D_OUT[208] && ff_input_D_OUT[1] &&
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200 ||
	     lv_invalid__h218452 ;
  assign _theResult___snd_fst__h58382 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h58384 ;
  assign _theResult___snd_fst__h58384 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ?
	       resultant_mantissa_norm_zerosMSB__h57836 :
	       resultant_mantissa_norm_expo__h57835 ;
  assign _theResult___snd_fst__h76309 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ?
	       _theResult___snd_fst__h76319 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h76319 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ?
	       13'd0 :
	       _theResult___snd_fst__h76327 ;
  assign _theResult___snd_fst__h76327 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ?
	       _theResult___snd_fst__h76337 :
	       lv_exponent_inc_shift__h64549 ;
  assign _theResult___snd_fst__h76337 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h76339 ;
  assign _theResult___snd_fst__h76339 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 ?
	       lv_exponent_sub_shift__h64552 :
	       lv_exponent_sub_zerosMSB__h64554 ;
  assign _theResult___snd_snd__h231399 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     quiet_nan_two__h230962 ;
  assign _theResult___snd_snd__h232851 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     quiet_nan_two__h232418 ;
  assign _theResult___snd_snd_fst__h216200 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_fst__h216396 :
	       _theResult___snd_snd_fst__h216212 ;
  assign _theResult___snd_snd_fst__h216212 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h216329 :
	       _theResult___snd_snd_fst__h216263 ;
  assign _theResult___snd_snd_fst__h216263 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h216308 ;
  assign _theResult___snd_snd_fst__h216308 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h216329 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h216375 ;
  assign _theResult___snd_snd_fst__h216375 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h216396 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h216494 :
	       _theResult___snd_snd_fst__h216428 ;
  assign _theResult___snd_snd_fst__h216428 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h216474 ;
  assign _theResult___snd_snd_fst__h216474 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h216494 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215953) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h216540 ;
  assign _theResult___snd_snd_fst__h216540 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h218703 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_fst__h218899 :
	       _theResult___snd_snd_fst__h218715 ;
  assign _theResult___snd_snd_fst__h218715 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h218832 :
	       _theResult___snd_snd_fst__h218766 ;
  assign _theResult___snd_snd_fst__h218766 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h218811 ;
  assign _theResult___snd_snd_fst__h218811 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h218832 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h218878 ;
  assign _theResult___snd_snd_fst__h218878 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h218899 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h218997 :
	       _theResult___snd_snd_fst__h218931 ;
  assign _theResult___snd_snd_fst__h218931 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h218977 ;
  assign _theResult___snd_snd_fst__h218977 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h218997 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218452) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h219043 ;
  assign _theResult___snd_snd_fst__h219043 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_snd__h231393 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) ?
	       _theResult___snd_snd__h231399 :
	       quiet_nan_two__h230962 ;
  assign _theResult___snd_snd_snd__h232845 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) ?
	       _theResult___snd_snd__h232851 :
	       quiet_nan_two__h232418 ;
  assign _theResult___snd_snd_snd_fst__h22006 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ?
	       _theResult_____1_fst__h22050 :
	       lv_product_exponent_inc_shift__h21994 ;
  assign _theResult___snd_snd_snd_fst__h94456 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 ?
	       _theResult_____1_fst__h94500 :
	       lv_product_exponent_inc_shift__h94444 ;
  assign _theResult___snd_snd_snd_snd_fst__h22091 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ?
	       _theResult_____1_snd__h22051 :
	       lv_product_mantissa___1__h22042 ;
  assign _theResult___snd_snd_snd_snd_fst__h94541 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 ?
	       _theResult_____1_snd__h94501 :
	       lv_product_mantissa___1__h94492 ;
  assign add_mantissa__h148376 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h47419 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h197500 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign and_sign__h199379 = ff_input_D_OUT[208] & ff_input_D_OUT[144] ;
  assign condFlags32_argwget_BITS_30_TO_8__q52 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q51 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q50 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q53 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q54 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q31 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q30 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q32 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q33 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q34 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h170984 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ;
  assign ex_overflow__h57847 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ;
  assign exception__h228597 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       5'd3 :
	       5'd0 ;
  assign exp1__h234942 = exp1_temp__h230966 - { 5'd0, x__h235004 } ;
  assign exp1__h243170 = exp1_temp__h232422 - { 7'd0, x__h243232 } ;
  assign exp1_temp__h230966 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h232422 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h234943 = exp2_temp__h230967 - { 5'd0, x__h238394 } ;
  assign exp2__h243171 = exp2_temp__h232423 - { 7'd0, x__h250653 } ;
  assign exp2_temp__h230967 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h232423 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h102157 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h25821 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h229256 = expo__h228591 + 8'd1 ;
  assign expo__h179875 = 8'd158 - { 3'd0, x__h180035[4:0] } ;
  assign expo__h184915 = 8'd190 - { 2'd0, x__h185093[5:0] } ;
  assign expo__h194459 = 11'd1054 - { 6'd0, x__h200543[4:0] } ;
  assign expo__h194472 = 11'd1086 - { 5'd0, x__h205273[5:0] } ;
  assign expo__h223555 = { 3'd0, getExp32_res_wget[23:16] } + 11'd896 ;
  assign expo__h223614 = 11'd896 - { 6'd0, x__h223619 } ;
  assign expo__h228591 =
	     (IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ||
	      IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312) ?
	       8'd0 :
	       x__h228476[7:0] ;
  assign exponent2__h102169 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h25833 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h102148 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h102160 =
	     exponent3__h102148 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h25812 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h25824 =
	     exponent3__h25812 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h260428 = exponent__h259785 + 9'd1 ;
  assign exponent___1__h269430 = lv_exp__h218462 + 12'd1 ;
  assign exponent__h259785 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h102183 =
	     lv_minuend__h102179 - _theResult_____4_snd_fst__h102388 ;
  assign exponent_difference__h25847 =
	     lv_minuend__h25843 - _theResult_____4_snd_fst__h26052 ;
  assign ff_inputD_OUT_BITS_176_TO_145__q1 = ff_input_D_OUT[176:145] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345 =
	     ff_input_D_OUT[12:8] == 5'b00100 ||
	     ff_input_D_OUT[12:8] == 5'b11000 ||
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 ||
	     ff_input_D_OUT[12:8] == 5'b01000 ||
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000 ||
	      ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     !ff_input_D_OUT[0] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 =
	     (ff_input_D_OUT[12:8] == 5'b11000 ||
	      ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001 ||
	      ff_input_D_OUT[12:8] == 5'b01000) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170 =
	     ff_input_D_OUT[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 ;
  assign ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820 =
	     ff_input_D_OUT[208] ^ ff_input_D_OUT[144] ;
  assign ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h215967[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218578[10:0] == 11'd62 &&
	     final_result__h218467[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h215967 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218578[10:0] == 11'd63 &&
	     final_result__h218467 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign fflags__h14108 = { 4'b0, lv_inexact__h14068 } ;
  assign fflags__h171015 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_snd__h171843,
	       _theResult_____1_snd_fst__h171840,
	       _theResult_____1_fst__h171838 } ;
  assign fflags__h179890 = { 4'd0, inexact__h179886 } ;
  assign fflags__h184930 = { 4'd0, inexact__h184926 } ;
  assign fflags__h260034 =
	     { condFlags32_reswget_BITS_14_TO_10__q53[0] | y__h260048,
	       4'b0 } ;
  assign fflags__h269036 =
	     { condFlags64_reswget_BITS_14_TO_10__q33[0] | y__h269050,
	       4'b0 } ;
  assign fflags__h57878 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_snd__h58706,
	       _theResult_____1_snd_fst__h58703,
	       _theResult_____1_fst__h58701 } ;
  assign fflags__h78500 = { 4'b0, lv_inexact__h78460 } ;
  assign final_man__h215965 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h218465 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h216314 =
	     { {32{_1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49[31]}},
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49 } ;
  assign final_result___1__h216348 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215953 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h216447 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215953 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h216977 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215953 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h217552 =
	     { {32{final_result___217513_BITS_31_TO_0__q56[31]}},
	       final_result___217513_BITS_31_TO_0__q56 } ;
  assign final_result___1__h217582 =
	     { {32{final_result___216612_BITS_31_TO_0__q57[31]}},
	       final_result___216612_BITS_31_TO_0__q57 } ;
  assign final_result___1__h218817 =
	     { {32{_1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29[31]}},
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29 } ;
  assign final_result___1__h218851 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218452 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h218950 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218452 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h219478 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218452 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h220051 =
	     { {32{final_result___220012_BITS_31_TO_0__q36[31]}},
	       final_result___220012_BITS_31_TO_0__q36 } ;
  assign final_result___1__h220081 =
	     { {32{final_result___219114_BITS_31_TO_0__q37[31]}},
	       final_result___219114_BITS_31_TO_0__q37 } ;
  assign final_result___216612_BITS_31_TO_0__q57 =
	     final_result___2__h216612[31:0] ;
  assign final_result___217513_BITS_31_TO_0__q56 =
	     final_result___2__h217513[31:0] ;
  assign final_result___219114_BITS_31_TO_0__q37 =
	     final_result___2__h219114[31:0] ;
  assign final_result___220012_BITS_31_TO_0__q36 =
	     final_result___2__h220012[31:0] ;
  assign final_result___2__h216612 = ~final_result___3__h216565 + 64'd1 ;
  assign final_result___2__h217513 = final_result__h215967 + 64'd1 ;
  assign final_result___2__h219114 = ~final_result___3__h219068 + 64'd1 ;
  assign final_result___2__h220012 = final_result__h218467 + 64'd1 ;
  assign final_result___3__h216565 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 ?
	       _theResult_____2_fst__h217300 :
	       final_result__h215967 ;
  assign final_result___3__h219068 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 ?
	       _theResult_____2_fst__h219801 :
	       final_result__h218467 ;
  assign final_result__h14073 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5[24:2] } ;
  assign final_result__h215967 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       64'd0 :
	       _theResult___fst__h216156 ;
  assign final_result__h218467 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       64'd0 :
	       _theResult___fst__h218659 ;
  assign final_result__h229395 =
	     { {32{ff_inputD_OUT_BITS_176_TO_145__q1[31]}},
	       ff_inputD_OUT_BITS_176_TO_145__q1 } ;
  assign final_result__h229418 = { 32'hFFFFFFFF, ff_input_D_OUT[176:145] } ;
  assign final_result__h260235 = { ff_input_D_OUT[176], 31'd0 } ;
  assign final_result__h269237 = { ff_input_D_OUT[208], 63'd0 } ;
  assign final_result__h78465 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7[53:2] } ;
  assign fman___1__h229253 = fman__h228917 + 24'd1 ;
  assign fman__h228917 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q47 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q46 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q45 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q55 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q48 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q26 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q25 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q27 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q35 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q28 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h179886 = x__h179904 | _theResult____h179885 ;
  assign inexact__h184926 = x__h184944 | _theResult____h184925 ;
  assign inexact__h205175 = x__h205193 | _theResult____h205174 ;
  assign inp32___1__h200923 = ~ff_input_D_OUT[176:145] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 =
	     (inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292 =
	     inst_dpfm_add_sub_ff_stage5[15] ||
	     (inst_dpfm_add_sub_ff_stage5[183] ||
	      inst_dpfm_add_sub_ff_stage5[182] ||
	      _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ||
	      !lv_inexact__h170992) &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286 ||
	     !IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253[52] ||
	     inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 =
	     (inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ||
	      !lv_inexact__h57855) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h184741 = expo__h179875 + 8'd1 ;
  assign local_expo___1__h194280 = expo__h184915 + 8'd1 ;
  assign local_expo___1__h214450 = expo__h194472 + 11'd1 ;
  assign lsb_zeros__h21992 =
	     lv_product_mantissa__h21990[0] ?
	       6'd0 :
	       (lv_product_mantissa__h21990[1] ?
		  6'd1 :
		  (lv_product_mantissa__h21990[2] ?
		     6'd2 :
		     (lv_product_mantissa__h21990[3] ?
			6'd3 :
			(lv_product_mantissa__h21990[4] ?
			   6'd4 :
			   (lv_product_mantissa__h21990[5] ?
			      6'd5 :
			      (lv_product_mantissa__h21990[6] ?
				 6'd6 :
				 (lv_product_mantissa__h21990[7] ?
				    6'd7 :
				    (lv_product_mantissa__h21990[8] ?
				       6'd8 :
				       (lv_product_mantissa__h21990[9] ?
					  6'd9 :
					  (lv_product_mantissa__h21990[10] ?
					     6'd10 :
					     (lv_product_mantissa__h21990[11] ?
						6'd11 :
						(lv_product_mantissa__h21990[12] ?
						   6'd12 :
						   (lv_product_mantissa__h21990[13] ?
						      6'd13 :
						      (lv_product_mantissa__h21990[14] ?
							 6'd14 :
							 (lv_product_mantissa__h21990[15] ?
							    6'd15 :
							    (lv_product_mantissa__h21990[16] ?
							       6'd16 :
							       (lv_product_mantissa__h21990[17] ?
								  6'd17 :
								  (lv_product_mantissa__h21990[18] ?
								     6'd18 :
								     (lv_product_mantissa__h21990[19] ?
									6'd19 :
									(lv_product_mantissa__h21990[20] ?
									   6'd20 :
									   (lv_product_mantissa__h21990[21] ?
									      6'd21 :
									      (lv_product_mantissa__h21990[22] ?
										 6'd22 :
										 (lv_product_mantissa__h21990[23] ?
										    6'd23 :
										    (lv_product_mantissa__h21990[24] ?
										       6'd24 :
										       (lv_product_mantissa__h21990[25] ?
											  6'd25 :
											  (lv_product_mantissa__h21990[26] ?
											     6'd26 :
											     (lv_product_mantissa__h21990[27] ?
												6'd27 :
												(lv_product_mantissa__h21990[28] ?
												   6'd28 :
												   (lv_product_mantissa__h21990[29] ?
												      6'd29 :
												      (lv_product_mantissa__h21990[30] ?
													 6'd30 :
													 (lv_product_mantissa__h21990[31] ?
													    6'd31 :
													    (lv_product_mantissa__h21990[32] ?
													       6'd32 :
													       (lv_product_mantissa__h21990[33] ?
														  6'd33 :
														  (lv_product_mantissa__h21990[34] ?
														     6'd34 :
														     (lv_product_mantissa__h21990[35] ?
															6'd35 :
															(lv_product_mantissa__h21990[36] ?
															   6'd36 :
															   (lv_product_mantissa__h21990[37] ?
															      6'd37 :
															      (lv_product_mantissa__h21990[38] ?
																 6'd38 :
																 (lv_product_mantissa__h21990[39] ?
																    6'd39 :
																    (lv_product_mantissa__h21990[40] ?
																       6'd40 :
																       (lv_product_mantissa__h21990[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h21990[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h21990[43] ?
																		6'd43 :
																		(lv_product_mantissa__h21990[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h21990[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h21990[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h21990[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h21990[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h6099 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h64547 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h94442 =
	     lv_product_mantissa__h94440[0] ?
	       7'd0 :
	       (lv_product_mantissa__h94440[1] ?
		  7'd1 :
		  (lv_product_mantissa__h94440[2] ?
		     7'd2 :
		     (lv_product_mantissa__h94440[3] ?
			7'd3 :
			(lv_product_mantissa__h94440[4] ?
			   7'd4 :
			   (lv_product_mantissa__h94440[5] ?
			      7'd5 :
			      (lv_product_mantissa__h94440[6] ?
				 7'd6 :
				 (lv_product_mantissa__h94440[7] ?
				    7'd7 :
				    (lv_product_mantissa__h94440[8] ?
				       7'd8 :
				       (lv_product_mantissa__h94440[9] ?
					  7'd9 :
					  (lv_product_mantissa__h94440[10] ?
					     7'd10 :
					     (lv_product_mantissa__h94440[11] ?
						7'd11 :
						(lv_product_mantissa__h94440[12] ?
						   7'd12 :
						   (lv_product_mantissa__h94440[13] ?
						      7'd13 :
						      (lv_product_mantissa__h94440[14] ?
							 7'd14 :
							 (lv_product_mantissa__h94440[15] ?
							    7'd15 :
							    (lv_product_mantissa__h94440[16] ?
							       7'd16 :
							       (lv_product_mantissa__h94440[17] ?
								  7'd17 :
								  (lv_product_mantissa__h94440[18] ?
								     7'd18 :
								     (lv_product_mantissa__h94440[19] ?
									7'd19 :
									(lv_product_mantissa__h94440[20] ?
									   7'd20 :
									   (lv_product_mantissa__h94440[21] ?
									      7'd21 :
									      (lv_product_mantissa__h94440[22] ?
										 7'd22 :
										 (lv_product_mantissa__h94440[23] ?
										    7'd23 :
										    (lv_product_mantissa__h94440[24] ?
										       7'd24 :
										       (lv_product_mantissa__h94440[25] ?
											  7'd25 :
											  (lv_product_mantissa__h94440[26] ?
											     7'd26 :
											     (lv_product_mantissa__h94440[27] ?
												7'd27 :
												(lv_product_mantissa__h94440[28] ?
												   7'd28 :
												   (lv_product_mantissa__h94440[29] ?
												      7'd29 :
												      (lv_product_mantissa__h94440[30] ?
													 7'd30 :
													 (lv_product_mantissa__h94440[31] ?
													    7'd31 :
													    (lv_product_mantissa__h94440[32] ?
													       7'd32 :
													       (lv_product_mantissa__h94440[33] ?
														  7'd33 :
														  (lv_product_mantissa__h94440[34] ?
														     7'd34 :
														     (lv_product_mantissa__h94440[35] ?
															7'd35 :
															(lv_product_mantissa__h94440[36] ?
															   7'd36 :
															   (lv_product_mantissa__h94440[37] ?
															      7'd37 :
															      (lv_product_mantissa__h94440[38] ?
																 7'd38 :
																 (lv_product_mantissa__h94440[39] ?
																    7'd39 :
																    (lv_product_mantissa__h94440[40] ?
																       7'd40 :
																       (lv_product_mantissa__h94440[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h94440[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h94440[43] ?
																		7'd43 :
																		(lv_product_mantissa__h94440[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h94440[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h94440[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h94440[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h94440[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h94440[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h94440[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h94440[51] ?
																					7'd51 :
																					(lv_product_mantissa__h94440[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h94440[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h94440[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h94440[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h94440[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h94440[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h94440[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h94440[59] ?
																								7'd59 :
																								(lv_product_mantissa__h94440[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h94440[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h94440[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h94440[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h94440[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h94440[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h94440[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h94440[67] ?
																											7'd67 :
																											(lv_product_mantissa__h94440[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h94440[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h94440[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h94440[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h94440[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h94440[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h94440[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h94440[75] ?
																														7'd75 :
																														(lv_product_mantissa__h94440[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h94440[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h94440[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h94440[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h94440[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h94440[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h94440[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h94440[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h94440[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h94440[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h94440[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h94440[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h94440[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h94440[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h94440[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h94440[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h94440[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h94440[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h94440[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h94440[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h94440[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h94440[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h94440[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h94440[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h94440[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h94440[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h94440[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h94440[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h94440[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h94440[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h94440[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h197502 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  { _theResult____h197731[0], _theResult____h197731[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  2'b10 :
		  _theResult____h197731) ;
  assign lv_compare_result__h199381 =
	     ff_input_D_OUT[208] ?
	       (ff_input_D_OUT[144] ?
		  { _theResult____h199584[0], _theResult____h199584[1] } :
		  2'b01) :
	       (ff_input_D_OUT[144] ? 2'b10 : _theResult____h199584) ;
  assign lv_exp__h218462 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h12436 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h12523 = lv_exponent__h12051 + 10'd1 ;
  assign lv_exponent___1__h76829 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent___1__h76916 = lv_exponent__h76444 + 13'd1 ;
  assign lv_exponent__h12051 =
	     _theResult_____4__h12049[24] ?
	       lv_exponent___1__h12436 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h234944 = 10'd127 + y__h234996 ;
  assign lv_exponent__h243172 = 13'd1023 + y__h243224 ;
  assign lv_exponent__h76444 =
	     _theResult_____4__h76442[53] ?
	       lv_exponent___1__h76829 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h6101 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign lv_exponent_inc_shift__h64549 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ;
  assign lv_exponent_sub_shift__h6104 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h6102 ;
  assign lv_exponent_sub_shift__h64552 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h64550 ;
  assign lv_exponent_sub_zerosMSB__h6106 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h5951 } ;
  assign lv_exponent_sub_zerosMSB__h64554 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h64399 } ;
  assign lv_extended_mantissa___1__h14550 =
	     lv_extended_mantissa__h14069 + 27'd4 ;
  assign lv_extended_mantissa___1__h78942 =
	     lv_extended_mantissa__h78461 + 56'd4 ;
  assign lv_extended_mantissa__h14069 = { 1'b0, result_mantissa__h14060 } ;
  assign lv_extended_mantissa__h78461 = { 1'b0, result_mantissa__h78452 } ;
  assign lv_final_output__h12142 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h171115 =
	     { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } ;
  assign lv_final_output__h171172 =
	     { inst_dpfm_add_sub_ff_stage5[14], 63'd0 } ;
  assign lv_final_output__h171222 =
	     { inst_dpfm_add_sub_ff_stage5[19], 63'd0 } ;
  assign lv_final_output__h57978 =
	     { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } ;
  assign lv_final_output__h58035 =
	     { inst_spfm_add_sub_ff_stage5[13], 31'd0 } ;
  assign lv_final_output__h58085 =
	     { inst_spfm_add_sub_ff_stage5[18], 31'd0 } ;
  assign lv_final_output__h76535 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h215978 = x__h217275 | lv_sticky__h215976 ;
  assign lv_inexact1__h218478 = x__h219776 | lv_sticky__h218476 ;
  assign lv_inexact___1__h216563 =
	     lv_inexact__h215971 | lv_inexact1__h215978 ;
  assign lv_inexact___1__h219066 =
	     lv_inexact__h218471 | lv_inexact1__h218478 ;
  assign lv_inexact__h14068 = x__h14537 | lv_sticky__h14066 ;
  assign lv_inexact__h170992 = x__h171654 | lv_sticky__h170990 ;
  assign lv_inexact__h215971 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243 ;
  assign lv_inexact__h218471 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257 ;
  assign lv_inexact__h57855 = x__h58517 | lv_sticky__h57853 ;
  assign lv_inexact__h78460 = x__h78929 | lv_sticky__h78458 ;
  assign lv_invalid___2__h216566 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 ?
	       _theResult_____2_snd__h217301 :
	       lv_invalid__h215969 ;
  assign lv_invalid___2__h219069 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 ?
	       _theResult_____2_snd__h219802 :
	       lv_invalid__h218469 ;
  assign lv_invalid__h215953 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] |
	     condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign lv_invalid__h215969 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       lv_invalid__h215953 :
	       _theResult___snd_fst__h216158 ;
  assign lv_invalid__h215981 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       _theResult_____3_snd_fst__h217632 :
	       lv_invalid__h215969 ;
  assign lv_invalid__h218452 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] |
	     condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign lv_invalid__h218469 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       lv_invalid__h218452 :
	       _theResult___snd_fst__h218661 ;
  assign lv_invalid__h218481 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       _theResult_____3_snd_fst__h220131 :
	       lv_invalid__h218469 ;
  assign lv_leading_zeros__h259790 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773[0] ?
		  6'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		     6'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[21] ?
			6'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[20] ?
			   6'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			      6'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[18] ?
				 6'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				    6'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				       6'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[15] ?
					  6'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					     6'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[13] ?
						6'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[12] ?
						   6'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						      6'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[10] ?
							 6'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							    6'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							       6'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[7] ?
								  6'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								     6'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[5] ?
									6'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[4] ?
									   6'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									      6'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[2] ?
										 6'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										    6'd23 :
										    (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h268793 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868[0] ?
		  7'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		     7'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[50] ?
			7'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[49] ?
			   7'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[48] ?
			      7'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[47] ?
				 7'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				    7'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				       7'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[44] ?
					  7'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					     7'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[42] ?
						7'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[41] ?
						   7'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[40] ?
						      7'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[39] ?
							 7'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							    7'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							       7'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[36] ?
								  7'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								     7'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[34] ?
									7'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[33] ?
									   7'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[32] ?
									      7'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[31] ?
										 7'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										    7'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										       7'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[28] ?
											  7'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											     7'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[26] ?
												7'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[25] ?
												   7'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[24] ?
												      7'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[23] ?
													 7'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													    7'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													       7'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[20] ?
														  7'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														     7'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[18] ?
															7'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[17] ?
															   7'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[16] ?
															      7'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[15] ?
																 7'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																    7'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																       7'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																	  7'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	     7'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																		7'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		   7'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		      7'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																			 7'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			    7'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			       7'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																				  7'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				     7'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																					7'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					   7'd52 :
																					   (getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h184716 = lv_man__h179888 + 25'd1 ;
  assign lv_man___1__h194255 = lv_man__h184928 + 25'd1 ;
  assign lv_man___1__h214427 = lv_man__h205177 + 54'd1 ;
  assign lv_man__h179888 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[30:8] } ;
  assign lv_man__h184928 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[62:40] } ;
  assign lv_man__h205177 =
	     { 2'b0,
	       IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[62:11] } ;
  assign lv_minuend__h102179 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       exponent3__h102160 :
	       exponent2__h102169 ;
  assign lv_minuend__h25843 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       exponent3__h25824 :
	       exponent2__h25833 ;
  assign lv_op1_subnormal__h230957 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] |
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ;
  assign lv_op1_subnormal__h232413 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] |
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ;
  assign lv_op2_Nan__h197498 =
	     condFlags32_reswget_BITS_9_TO_5__q54[2] |
	     condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign lv_op2_Nan__h199377 =
	     condFlags64_reswget_BITS_9_TO_5__q34[2] |
	     condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign lv_op2_subnormal__h230958 =
	     condFlags32_reswget_BITS_9_TO_5__q54[4] |
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign lv_op2_subnormal__h232414 =
	     condFlags64_reswget_BITS_9_TO_5__q34[4] |
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign lv_product_exponent___1__h22025 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent___1__h94475 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent__h21988 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h22025 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent__h94438 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h94475 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent_inc_shift__h21994 =
	     lv_product_exponent__h21988 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ;
  assign lv_product_exponent_inc_shift__h94444 =
	     lv_product_exponent__h94438 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ;
  assign lv_product_exponent_sub_shift__h21997 =
	     lv_product_exponent__h21988 - shift_neg__h21995 ;
  assign lv_product_exponent_sub_shift__h94447 =
	     lv_product_exponent__h94438 - shift_neg__h94445 ;
  assign lv_product_exponent_sub_zerosMSB__h21999 =
	     lv_product_exponent__h21988 - y__h22085 ;
  assign lv_product_exponent_sub_zerosMSB__h94449 =
	     lv_product_exponent__h94438 - y__h94535 ;
  assign lv_product_mantissa___1__h22024 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h22042 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699 } ;
  assign lv_product_mantissa___1__h94474 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h94492 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339 } ;
  assign lv_product_mantissa__h14961 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h21990 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h22024 :
	       lv_product_mantissa__h14961 ;
  assign lv_product_mantissa__h79349 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa__h94440 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h94474 :
	       lv_product_mantissa__h79349 ;
  assign lv_product_mantissa_shiftL_expo__h21996 =
	     lv_product_mantissa__h21990 << shift_neg__h21995 ;
  assign lv_product_mantissa_shiftL_expo__h94446 =
	     lv_product_mantissa__h94440 << shift_neg__h94445 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h21998 =
	     lv_product_mantissa__h21990 << x__h22060 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h94448 =
	     lv_product_mantissa__h94440 << x__h94510 ;
  assign lv_quotient___1__h6127 =
	     { inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199[26:1],
	       lv_sticky___1__h6128 } ;
  assign lv_quotient___1__h64575 =
	     { inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578[55:1],
	       lv_sticky___1__h64576 } ;
  assign lv_quotient_shiftL_expo__h6103 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     shift_neg__h6102 ;
  assign lv_quotient_shiftL_expo__h64551 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     shift_neg__h64550 ;
  assign lv_quotient_shiftL_zerosMSB__h6105 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     msb_zeros__h5951 ;
  assign lv_quotient_shiftL_zerosMSB__h64553 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     msb_zeros__h64399 ;
  assign lv_remainder__h13840 =
	     lv_remainder_temp__h13730 + lv_root_temp_1__h13731 ;
  assign lv_remainder__h13930 =
	     lv_remainder_temp__h13730 - lv_root_temp_2__h13732 ;
  assign lv_remainder__h14485 = _theResult____h13733 + lv_root_rem__h14061 ;
  assign lv_remainder__h78232 =
	     lv_remainder_temp__h78122 + lv_root_temp_1__h78123 ;
  assign lv_remainder__h78322 =
	     lv_remainder_temp__h78122 - lv_root_temp_2__h78124 ;
  assign lv_remainder__h78877 = _theResult____h78125 + lv_root_rem__h78453 ;
  assign lv_remainder_temp__h13730 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h78122 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h198176 =
	     { or_sign__h197499,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:0] } ;
  assign lv_result__h198217 =
	     { and_sign__h197500,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign lv_result__h200023 = { or_sign__h199378, ff_input_D_OUT[143:81] } ;
  assign lv_result__h200064 = { and_sign__h199379, ff_input_D_OUT[207:145] } ;
  assign lv_result_is_infinity___1__h148124 =
	     { sign2__h102145, ~x__h148158 } ;
  assign lv_result_is_infinity___1__h148186 =
	     { x__h148198 | y__h148199, 1'd1 } ;
  assign lv_result_is_infinity___1__h47167 = { sign2__h25809, ~x__h47201 } ;
  assign lv_result_is_infinity___1__h47229 = { x__h47241 | y__h47242, 1'd1 } ;
  assign lv_result_is_zero___1__h148219 = { op_xor_sign3__h102158, 1'b1 } ;
  assign lv_result_is_zero___1__h148223 = { sign2__h102145, 1'd1 } ;
  assign lv_result_is_zero___1__h47262 = { op_xor_sign3__h25822, 1'b1 } ;
  assign lv_result_is_zero___1__h47266 = { sign2__h25809, 1'd1 } ;
  assign lv_root_rem__h14061 = { 2'b0, x__h14033, 1'b1 } ;
  assign lv_root_rem__h78453 = { 2'b0, x__h78425, 1'b1 } ;
  assign lv_root_temp_1__h13731 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h78123 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h13732 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h78124 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h12336 =
	     inst_spfpu_divider_rg_stage3[53] & y__h12348 ;
  assign lv_round_up___1__h12372 = x__h12384 & y__h12385 ;
  assign lv_round_up___1__h171420 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105] &
	     y__h171432 ;
  assign lv_round_up___1__h171642 =
	     lv_inexact__h170992 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h216646 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22] &
	     y__h216658 ;
  assign lv_round_up___1__h217263 =
	     lv_inexact1__h215978 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign lv_round_up___1__h219149 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51] &
	     y__h219161 ;
  assign lv_round_up___1__h219764 =
	     lv_inexact1__h218478 & ff_input_D_OUT[208] ;
  assign lv_round_up___1__h228746 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25] &
	     y__h228758 ;
  assign lv_round_up___1__h228877 = x__h228889 & y__h219789 ;
  assign lv_round_up___1__h58283 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47] &
	     y__h58295 ;
  assign lv_round_up___1__h58505 =
	     lv_inexact__h57855 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h76729 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h76741 ;
  assign lv_round_up___1__h76765 = x__h76777 & y__h76778 ;
  assign lv_rounded_mantissa___1__h171674 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h58537 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h171704 =
	     { 1'd0, _theResult_____5__h170994[53:1] } ;
  assign lv_rounded_mantissa__h58567 =
	     { 1'd0, _theResult_____5__h57857[24:1] } ;
  assign lv_rounded_quotient___1__h12407 =
	     lv_rounded_quotient__h12048 + 25'd1 ;
  assign lv_rounded_quotient___1__h76800 =
	     lv_rounded_quotient__h76441 + 54'd1 ;
  assign lv_rounded_quotient__h12048 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h12437 =
	     { 1'd0, _theResult_____4__h12049[24:1] } ;
  assign lv_rounded_quotient__h76441 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h76830 =
	     { 1'd0, _theResult_____4__h76442[53:1] } ;
  assign lv_roundup___1__h14131 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h14143 ;
  assign lv_roundup___1__h14513 = lv_inexact__h14068 & y__h14525 ;
  assign lv_roundup___1__h184644 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7] &
	     y__h184656 ;
  assign lv_roundup___1__h184681 = inexact__h179886 & y__h184694 ;
  assign lv_roundup___1__h194183 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39] &
	     y__h194195 ;
  assign lv_roundup___1__h194220 = inexact__h184926 & y__h194233 ;
  assign lv_roundup___1__h214356 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10] &
	     y__h214368 ;
  assign lv_roundup___1__h214392 = inexact__h205175 & y__h214405 ;
  assign lv_roundup___1__h78523 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h78535 ;
  assign lv_roundup___1__h78905 = lv_inexact__h78460 & y__h78917 ;
  assign lv_sign__h194452 = !ff_input_D_OUT[1] && ff_input_D_OUT[176] ;
  assign lv_sticky___1__h6128 =
	     inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h6099 } ^ 10'h200) ||
	      inst_spfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky___1__h64576 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h64547 } ^ 13'h1000) ||
	      inst_dpfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky__h14066 = x__h14463 != 29'd0 ;
  assign lv_sticky__h170990 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[103:0] !=
	     104'd0 ;
  assign lv_sticky__h215976 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[20:0] !=
	     21'd0 ;
  assign lv_sticky__h218476 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[49:0] !=
	     50'd0 ;
  assign lv_sticky__h228252 =
	     getMant64_reswget_BITS_155_TO_104__q28[26:0] != 27'd0 ;
  assign lv_sticky__h228595 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       lv_sticky__h228252 :
	       y_avValue_snd_snd_snd_fst__h228819 ;
  assign lv_sticky__h57853 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[45:0] !=
	     46'd0 ;
  assign lv_sticky__h78458 = x__h78855 != 58'd0 ;
  assign lv_summed_exponent__h230968 = x__h231147 + y__h231148 ;
  assign lv_summed_exponent__h232424 = x__h232603 + y__h232604 ;
  assign lv_zeros_on_left__h148382 =
	     _theResult____h148380[159] ?
	       8'd0 :
	       (_theResult____h148380[158] ?
		  8'd1 :
		  (_theResult____h148380[157] ?
		     8'd2 :
		     (_theResult____h148380[156] ?
			8'd3 :
			(_theResult____h148380[155] ?
			   8'd4 :
			   (_theResult____h148380[154] ?
			      8'd5 :
			      (_theResult____h148380[153] ?
				 8'd6 :
				 (_theResult____h148380[152] ?
				    8'd7 :
				    (_theResult____h148380[151] ?
				       8'd8 :
				       (_theResult____h148380[150] ?
					  8'd9 :
					  (_theResult____h148380[149] ?
					     8'd10 :
					     (_theResult____h148380[148] ?
						8'd11 :
						(_theResult____h148380[147] ?
						   8'd12 :
						   (_theResult____h148380[146] ?
						      8'd13 :
						      (_theResult____h148380[145] ?
							 8'd14 :
							 (_theResult____h148380[144] ?
							    8'd15 :
							    (_theResult____h148380[143] ?
							       8'd16 :
							       (_theResult____h148380[142] ?
								  8'd17 :
								  (_theResult____h148380[141] ?
								     8'd18 :
								     (_theResult____h148380[140] ?
									8'd19 :
									(_theResult____h148380[139] ?
									   8'd20 :
									   (_theResult____h148380[138] ?
									      8'd21 :
									      (_theResult____h148380[137] ?
										 8'd22 :
										 (_theResult____h148380[136] ?
										    8'd23 :
										    (_theResult____h148380[135] ?
										       8'd24 :
										       (_theResult____h148380[134] ?
											  8'd25 :
											  (_theResult____h148380[133] ?
											     8'd26 :
											     (_theResult____h148380[132] ?
												8'd27 :
												(_theResult____h148380[131] ?
												   8'd28 :
												   (_theResult____h148380[130] ?
												      8'd29 :
												      (_theResult____h148380[129] ?
													 8'd30 :
													 (_theResult____h148380[128] ?
													    8'd31 :
													    (_theResult____h148380[127] ?
													       8'd32 :
													       (_theResult____h148380[126] ?
														  8'd33 :
														  (_theResult____h148380[125] ?
														     8'd34 :
														     (_theResult____h148380[124] ?
															8'd35 :
															(_theResult____h148380[123] ?
															   8'd36 :
															   (_theResult____h148380[122] ?
															      8'd37 :
															      (_theResult____h148380[121] ?
																 8'd38 :
																 (_theResult____h148380[120] ?
																    8'd39 :
																    (_theResult____h148380[119] ?
																       8'd40 :
																       (_theResult____h148380[118] ?
																	  8'd41 :
																	  (_theResult____h148380[117] ?
																	     8'd42 :
																	     (_theResult____h148380[116] ?
																		8'd43 :
																		(_theResult____h148380[115] ?
																		   8'd44 :
																		   (_theResult____h148380[114] ?
																		      8'd45 :
																		      (_theResult____h148380[113] ?
																			 8'd46 :
																			 (_theResult____h148380[112] ?
																			    8'd47 :
																			    (_theResult____h148380[111] ?
																			       8'd48 :
																			       (_theResult____h148380[110] ?
																				  8'd49 :
																				  (_theResult____h148380[109] ?
																				     8'd50 :
																				     (_theResult____h148380[108] ?
																					8'd51 :
																					(_theResult____h148380[107] ?
																					   8'd52 :
																					   (_theResult____h148380[106] ?
																					      8'd53 :
																					      (_theResult____h148380[105] ?
																						 8'd54 :
																						 (_theResult____h148380[104] ?
																						    8'd55 :
																						    (_theResult____h148380[103] ?
																						       8'd56 :
																						       (_theResult____h148380[102] ?
																							  8'd57 :
																							  (_theResult____h148380[101] ?
																							     8'd58 :
																							     (_theResult____h148380[100] ?
																								8'd59 :
																								(_theResult____h148380[99] ?
																								   8'd60 :
																								   (_theResult____h148380[98] ?
																								      8'd61 :
																								      (_theResult____h148380[97] ?
																									 8'd62 :
																									 (_theResult____h148380[96] ?
																									    8'd63 :
																									    (_theResult____h148380[95] ?
																									       8'd64 :
																									       (_theResult____h148380[94] ?
																										  8'd65 :
																										  (_theResult____h148380[93] ?
																										     8'd66 :
																										     (_theResult____h148380[92] ?
																											8'd67 :
																											(_theResult____h148380[91] ?
																											   8'd68 :
																											   (_theResult____h148380[90] ?
																											      8'd69 :
																											      (_theResult____h148380[89] ?
																												 8'd70 :
																												 (_theResult____h148380[88] ?
																												    8'd71 :
																												    (_theResult____h148380[87] ?
																												       8'd72 :
																												       (_theResult____h148380[86] ?
																													  8'd73 :
																													  (_theResult____h148380[85] ?
																													     8'd74 :
																													     (_theResult____h148380[84] ?
																														8'd75 :
																														(_theResult____h148380[83] ?
																														   8'd76 :
																														   (_theResult____h148380[82] ?
																														      8'd77 :
																														      (_theResult____h148380[81] ?
																															 8'd78 :
																															 (_theResult____h148380[80] ?
																															    8'd79 :
																															    (_theResult____h148380[79] ?
																															       8'd80 :
																															       (_theResult____h148380[78] ?
																																  8'd81 :
																																  (_theResult____h148380[77] ?
																																     8'd82 :
																																     (_theResult____h148380[76] ?
																																	8'd83 :
																																	(_theResult____h148380[75] ?
																																	   8'd84 :
																																	   (_theResult____h148380[74] ?
																																	      8'd85 :
																																	      (_theResult____h148380[73] ?
																																		 8'd86 :
																																		 (_theResult____h148380[72] ?
																																		    8'd87 :
																																		    (_theResult____h148380[71] ?
																																		       8'd88 :
																																		       (_theResult____h148380[70] ?
																																			  8'd89 :
																																			  (_theResult____h148380[69] ?
																																			     8'd90 :
																																			     (_theResult____h148380[68] ?
																																				8'd91 :
																																				(_theResult____h148380[67] ?
																																				   8'd92 :
																																				   (_theResult____h148380[66] ?
																																				      8'd93 :
																																				      (_theResult____h148380[65] ?
																																					 8'd94 :
																																					 (_theResult____h148380[64] ?
																																					    8'd95 :
																																					    (_theResult____h148380[63] ?
																																					       8'd96 :
																																					       (_theResult____h148380[62] ?
																																						  8'd97 :
																																						  (_theResult____h148380[61] ?
																																						     8'd98 :
																																						     (_theResult____h148380[60] ?
																																							8'd99 :
																																							(_theResult____h148380[59] ?
																																							   8'd100 :
																																							   (_theResult____h148380[58] ?
																																							      8'd101 :
																																							      (_theResult____h148380[57] ?
																																								 8'd102 :
																																								 (_theResult____h148380[56] ?
																																								    8'd103 :
																																								    (_theResult____h148380[55] ?
																																								       8'd104 :
																																								       (_theResult____h148380[54] ?
																																									  8'd105 :
																																									  (_theResult____h148380[53] ?
																																									     8'd106 :
																																									     (_theResult____h148380[52] ?
																																										8'd107 :
																																										(_theResult____h148380[51] ?
																																										   8'd108 :
																																										   (_theResult____h148380[50] ?
																																										      8'd109 :
																																										      (_theResult____h148380[49] ?
																																											 8'd110 :
																																											 (_theResult____h148380[48] ?
																																											    8'd111 :
																																											    (_theResult____h148380[47] ?
																																											       8'd112 :
																																											       (_theResult____h148380[46] ?
																																												  8'd113 :
																																												  (_theResult____h148380[45] ?
																																												     8'd114 :
																																												     (_theResult____h148380[44] ?
																																													8'd115 :
																																													(_theResult____h148380[43] ?
																																													   8'd116 :
																																													   (_theResult____h148380[42] ?
																																													      8'd117 :
																																													      (_theResult____h148380[41] ?
																																														 8'd118 :
																																														 (_theResult____h148380[40] ?
																																														    8'd119 :
																																														    (_theResult____h148380[39] ?
																																														       8'd120 :
																																														       (_theResult____h148380[38] ?
																																															  8'd121 :
																																															  (_theResult____h148380[37] ?
																																															     8'd122 :
																																															     (_theResult____h148380[36] ?
																																																8'd123 :
																																																(_theResult____h148380[35] ?
																																																   8'd124 :
																																																   (_theResult____h148380[34] ?
																																																      8'd125 :
																																																      (_theResult____h148380[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h148380[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h148380[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h148380[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h148380[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h148380[28] ?
																																																			8'd131 :
																																																			(_theResult____h148380[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h148380[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h148380[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h148380[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h148380[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h148380[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h148380[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h148380[20] ?
																																																						8'd139 :
																																																						(_theResult____h148380[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h148380[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h148380[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h148380[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h148380[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h148380[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h148380[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h148380[12] ?
																																																									8'd147 :
																																																									(_theResult____h148380[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h148380[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h148380[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h148380[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h148380[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h148380[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h148380[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h148380[4] ?
																																																												8'd155 :
																																																												(_theResult____h148380[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h148380[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h148380[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h148380[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h47425 =
	     _theResult____h47423[72] ?
	       7'd0 :
	       (_theResult____h47423[71] ?
		  7'd1 :
		  (_theResult____h47423[70] ?
		     7'd2 :
		     (_theResult____h47423[69] ?
			7'd3 :
			(_theResult____h47423[68] ?
			   7'd4 :
			   (_theResult____h47423[67] ?
			      7'd5 :
			      (_theResult____h47423[66] ?
				 7'd6 :
				 (_theResult____h47423[65] ?
				    7'd7 :
				    (_theResult____h47423[64] ?
				       7'd8 :
				       (_theResult____h47423[63] ?
					  7'd9 :
					  (_theResult____h47423[62] ?
					     7'd10 :
					     (_theResult____h47423[61] ?
						7'd11 :
						(_theResult____h47423[60] ?
						   7'd12 :
						   (_theResult____h47423[59] ?
						      7'd13 :
						      (_theResult____h47423[58] ?
							 7'd14 :
							 (_theResult____h47423[57] ?
							    7'd15 :
							    (_theResult____h47423[56] ?
							       7'd16 :
							       (_theResult____h47423[55] ?
								  7'd17 :
								  (_theResult____h47423[54] ?
								     7'd18 :
								     (_theResult____h47423[53] ?
									7'd19 :
									(_theResult____h47423[52] ?
									   7'd20 :
									   (_theResult____h47423[51] ?
									      7'd21 :
									      (_theResult____h47423[50] ?
										 7'd22 :
										 (_theResult____h47423[49] ?
										    7'd23 :
										    (_theResult____h47423[48] ?
										       7'd24 :
										       (_theResult____h47423[47] ?
											  7'd25 :
											  (_theResult____h47423[46] ?
											     7'd26 :
											     (_theResult____h47423[45] ?
												7'd27 :
												(_theResult____h47423[44] ?
												   7'd28 :
												   (_theResult____h47423[43] ?
												      7'd29 :
												      (_theResult____h47423[42] ?
													 7'd30 :
													 (_theResult____h47423[41] ?
													    7'd31 :
													    (_theResult____h47423[40] ?
													       7'd32 :
													       (_theResult____h47423[39] ?
														  7'd33 :
														  (_theResult____h47423[38] ?
														     7'd34 :
														     (_theResult____h47423[37] ?
															7'd35 :
															(_theResult____h47423[36] ?
															   7'd36 :
															   (_theResult____h47423[35] ?
															      7'd37 :
															      (_theResult____h47423[34] ?
																 7'd38 :
																 (_theResult____h47423[33] ?
																    7'd39 :
																    (_theResult____h47423[32] ?
																       7'd40 :
																       (_theResult____h47423[31] ?
																	  7'd41 :
																	  (_theResult____h47423[30] ?
																	     7'd42 :
																	     (_theResult____h47423[29] ?
																		7'd43 :
																		(_theResult____h47423[28] ?
																		   7'd44 :
																		   (_theResult____h47423[27] ?
																		      7'd45 :
																		      (_theResult____h47423[26] ?
																			 7'd46 :
																			 (_theResult____h47423[25] ?
																			    7'd47 :
																			    (_theResult____h47423[24] ?
																			       7'd48 :
																			       (_theResult____h47423[23] ?
																				  7'd49 :
																				  (_theResult____h47423[22] ?
																				     7'd50 :
																				     (_theResult____h47423[21] ?
																					7'd51 :
																					(_theResult____h47423[20] ?
																					   7'd52 :
																					   (_theResult____h47423[19] ?
																					      7'd53 :
																					      (_theResult____h47423[18] ?
																						 7'd54 :
																						 (_theResult____h47423[17] ?
																						    7'd55 :
																						    (_theResult____h47423[16] ?
																						       7'd56 :
																						       (_theResult____h47423[15] ?
																							  7'd57 :
																							  (_theResult____h47423[14] ?
																							     7'd58 :
																							     (_theResult____h47423[13] ?
																								7'd59 :
																								(_theResult____h47423[12] ?
																								   7'd60 :
																								   (_theResult____h47423[11] ?
																								      7'd61 :
																								      (_theResult____h47423[10] ?
																									 7'd62 :
																									 (_theResult____h47423[9] ?
																									    7'd63 :
																									    (_theResult____h47423[8] ?
																									       7'd64 :
																									       (_theResult____h47423[7] ?
																										  7'd65 :
																										  (_theResult____h47423[6] ?
																										     7'd66 :
																										     (_theResult____h47423[5] ?
																											7'd67 :
																											(_theResult____h47423[4] ?
																											   7'd68 :
																											   (_theResult____h47423[3] ?
																											      7'd69 :
																											      (_theResult____h47423[2] ?
																												 7'd70 :
																												 (_theResult____h47423[1] ?
																												    7'd71 :
																												    (_theResult____h47423[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h234934 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q53[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h243162 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q33[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h234935 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q54[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h243163 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q34[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h223616 = { value__h226868[21:0], 30'd0 } ;
  assign man__h228356 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q28[51:27], 23'd0 } >>
	     shiftDist__h228355 ;
  assign man__h228455 =
	     { getMant64_reswget_BITS_155_TO_104__q28[51:27], 24'd0 } ;
  assign mant__h223556 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h102146 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h102168 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h102146 ;
  assign mantissa2__h102189 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       mantissa_to_shift___1__h102187 :
	       mantissa2__h102168 ;
  assign mantissa2__h25810 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h25832 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h25810 ;
  assign mantissa2__h25853 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       mantissa_to_shift___1__h25851 :
	       mantissa2__h25832 ;
  assign mantissa3___1__h121879 =
	     { 1'd0,
	       expo3_zero__h102157,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h35045 =
	     { 1'd0,
	       expo3_zero__h25821,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h102190 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       _theResult____h102159 :
	       mantissa_to_shift___1__h102187 ;
  assign mantissa3__h25854 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       _theResult____h25823 :
	       mantissa_to_shift___1__h25851 ;
  assign mantissa___1__h267748 = { mantissa__h259791[50:0], 1'd0 } ;
  assign mantissa___1__h284870 = { mantissa__h268794[108:0], 1'd0 } ;
  assign mantissa__h13735 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h194460 =
	     { theResult__94456_SL_x00543_BITS_4_TO_0__q3[30:0], 21'd0 } ;
  assign mantissa__h259789 =
	     { IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h259791 = mantissa__h259789 << x__h267751 ;
  assign mantissa__h259801 =
	     { IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810[49:0],
	       2'd0 } ;
  assign mantissa__h268792 =
	     { IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h268794 = mantissa__h268792 << x__h284873 ;
  assign mantissa__h268804 =
	     { IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934[107:0],
	       2'd0 } ;
  assign mantissa__h78127 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h102187 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751 } ;
  assign mantissa_to_shift___1__h25851 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937 } ;
  assign mantissa_to_shift__h102182 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       mantissa2__h102168 :
	       _theResult____h102159 ;
  assign mantissa_to_shift__h25846 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       mantissa2__h25832 :
	       _theResult____h25823 ;
  assign msb_zeros___1__h22027 = msb_zeros__h14980 + 6'd1 ;
  assign msb_zeros___1__h94477 = msb_zeros__h79368 + 7'd1 ;
  assign msb_zeros__h14980 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h21986 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h22027 :
	       msb_zeros__h14980 ;
  assign msb_zeros__h5951 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h64399 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h79368 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h94436 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h94477 :
	       msb_zeros__h79368 ;
  assign new_value_final_result__h171024 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_fst__h171113 ;
  assign new_value_final_result__h57887 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_fst__h57976 ;
  assign op_xor_sign3__h102158 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h102147 ;
  assign op_xor_sign3__h25822 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h25811 ;
  assign or_sign__h197499 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign or_sign__h199378 = ff_input_D_OUT[208] | ff_input_D_OUT[144] ;
  assign quiet_nan_two__h230962 = x__h231533 | y__h231534 ;
  assign quiet_nan_two__h232418 = x__h232984 | y__h232985 ;
  assign res___1__h229232 =
	     { ff_input_D_OUT[208],
	       _theResult_____2__h228964,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365[22:0] } ;
  assign res__h179778 = ff_input_D_OUT[176] ? 32'hCF000000 : 32'd0 ;
  assign res__h194461 =
	     { lv_sign__h194452, expo__h194459, mantissa__h194460 } ;
  assign res__h228589 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       _theResult___fst__h229045 :
	       32'd0 ;
  assign result__h223427 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ? 5'd16 : 5'd0 ;
  assign result__h227993 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ? 5'd16 : 5'd0 ;
  assign result__h228992 =
	     { IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338[4:1],
	       IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338[0] |
	       x__h228889 } ;
  assign result__h229031 = { exception__h228597[4:2], 2'd3 } ;
  assign result_exponent___1__h14573 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h78965 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h259798 = x__h268021 + y__h268022 ;
  assign result_exponent__h268801 = x__h285143 + y__h285144 ;
  assign result_mantissa__h14060 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h13733[28] } ;
  assign result_mantissa__h78452 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h78125[57] } ;
  assign resultant_exponent___1__h171703 =
	     resultant_exponent__h170976 + 13'd1 ;
  assign resultant_exponent___1__h58566 = resultant_exponent__h57839 + 10'd1 ;
  assign resultant_exponent__h170976 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h170971 :
	       _theResult___fst__h171302 ;
  assign resultant_exponent__h57839 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h57834 :
	       _theResult___fst__h58165 ;
  assign resultant_exponent_inc__h170971 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h57834 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h170969 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h57832 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h170974 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 ;
  assign resultant_exponent_sub_zerosMSB__h57837 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 ;
  assign resultant_mantissa___1__h171274 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h58137 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h170972 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h170969 ;
  assign resultant_mantissa_norm_expo__h57835 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h57832 ;
  assign resultant_mantissa_norm_zerosMSB__h170973 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h171551 ;
  assign resultant_mantissa_norm_zerosMSB__h57836 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h58414 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q40 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q39 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q41 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q43 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q42 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h228355 = 11'd896 - getExp64_res_wget[32:22] ;
  assign shift_neg__h21995 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 +
	     10'd1 ;
  assign shift_neg__h6102 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 +
	     10'd1 ;
  assign shift_neg__h64550 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 +
	     13'd1 ;
  assign shift_neg__h94445 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 +
	     13'd1 ;
  assign sign2__h102145 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h25809 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h102147 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h25811 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h205172 = !ff_input_D_OUT[1] && ff_input_D_OUT[208] ;
  assign sub_mantissa1__h148377 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h47420 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h148378 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h47421 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h148379 =
	     sub_mantissa1__h148377 - sub_mantissa2__h148378 ;
  assign sub_mantissa__h47422 =
	     sub_mantissa1__h47420 - sub_mantissa2__h47421 ;
  assign theResult__94456_SL_x00543_BITS_4_TO_0__q3 =
	     _theResult____h194456 << x__h200543[4:0] ;
  assign value__h226868 = getMant32_res_wget[68:46] << x__h223619 ;
  assign wr_final_out_fflags__h194476 = { 4'd0, inexact__h205175 } ;
  assign wr_final_out_final_result__h194475 =
	     { sign__h205172,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716[52] ?
		 local_expo___1__h214450 :
		 expo__h194472,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716[51:0] } ;
  assign x1_avValue_fflags__h179784 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       5'd0 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] ;
  assign x1_avValue_fflags__h184811 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] :
	       x1_avValue_fflags__h179784 ;
  assign x1_avValue_fflags__h194355 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[36:32] :
	       x1_avValue_fflags__h184811 ;
  assign x1_avValue_final_result__h179783 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       res__h179778 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] ;
  assign x1_avValue_final_result__h184810 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] :
	       x1_avValue_final_result__h179783 ;
  assign x1_avValue_final_result__h194354 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[31:0] :
	       x1_avValue_final_result__h184810 ;
  assign x1_avValue_final_result__h194362 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       32'b0 :
	       x1_avValue_final_result__h194354 ;
  assign x1_avValue_final_result__h214517 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign x1_avValue_fst__h228981 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
	       y_avValue_fst__h228978 :
	       res__h228589 ;
  assign x__h101899 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h101930 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h101930 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h101960 =
	     inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h102299 = x__h102311 | y__h102312 ;
  assign x__h102311 = _theResult_____1__h102193 & sign2__h102145 ;
  assign x__h11974 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ;
  assign x__h11979 =
	     (!inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ||
	      inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134) ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h6128 ;
  assign x__h12199 = _theResult____h12046 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h12349 = inst_spfpu_divider_rg_stage3[52] | _theResult____h12046 ;
  assign x__h12384 = x__h12386 | _theResult____h12046 ;
  assign x__h12386 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h137255 =
	     mantissa_to_shift__h102182[0] ?
	       8'd0 :
	       (mantissa_to_shift__h102182[1] ?
		  8'd1 :
		  (mantissa_to_shift__h102182[2] ?
		     8'd2 :
		     (mantissa_to_shift__h102182[3] ?
			8'd3 :
			(mantissa_to_shift__h102182[4] ?
			   8'd4 :
			   (mantissa_to_shift__h102182[5] ?
			      8'd5 :
			      (mantissa_to_shift__h102182[6] ?
				 8'd6 :
				 (mantissa_to_shift__h102182[7] ?
				    8'd7 :
				    (mantissa_to_shift__h102182[8] ?
				       8'd8 :
				       (mantissa_to_shift__h102182[9] ?
					  8'd9 :
					  (mantissa_to_shift__h102182[10] ?
					     8'd10 :
					     (mantissa_to_shift__h102182[11] ?
						8'd11 :
						(mantissa_to_shift__h102182[12] ?
						   8'd12 :
						   (mantissa_to_shift__h102182[13] ?
						      8'd13 :
						      (mantissa_to_shift__h102182[14] ?
							 8'd14 :
							 (mantissa_to_shift__h102182[15] ?
							    8'd15 :
							    (mantissa_to_shift__h102182[16] ?
							       8'd16 :
							       (mantissa_to_shift__h102182[17] ?
								  8'd17 :
								  (mantissa_to_shift__h102182[18] ?
								     8'd18 :
								     (mantissa_to_shift__h102182[19] ?
									8'd19 :
									(mantissa_to_shift__h102182[20] ?
									   8'd20 :
									   (mantissa_to_shift__h102182[21] ?
									      8'd21 :
									      (mantissa_to_shift__h102182[22] ?
										 8'd22 :
										 (mantissa_to_shift__h102182[23] ?
										    8'd23 :
										    (mantissa_to_shift__h102182[24] ?
										       8'd24 :
										       (mantissa_to_shift__h102182[25] ?
											  8'd25 :
											  (mantissa_to_shift__h102182[26] ?
											     8'd26 :
											     (mantissa_to_shift__h102182[27] ?
												8'd27 :
												(mantissa_to_shift__h102182[28] ?
												   8'd28 :
												   (mantissa_to_shift__h102182[29] ?
												      8'd29 :
												      (mantissa_to_shift__h102182[30] ?
													 8'd30 :
													 (mantissa_to_shift__h102182[31] ?
													    8'd31 :
													    (mantissa_to_shift__h102182[32] ?
													       8'd32 :
													       (mantissa_to_shift__h102182[33] ?
														  8'd33 :
														  (mantissa_to_shift__h102182[34] ?
														     8'd34 :
														     (mantissa_to_shift__h102182[35] ?
															8'd35 :
															(mantissa_to_shift__h102182[36] ?
															   8'd36 :
															   (mantissa_to_shift__h102182[37] ?
															      8'd37 :
															      (mantissa_to_shift__h102182[38] ?
																 8'd38 :
																 (mantissa_to_shift__h102182[39] ?
																    8'd39 :
																    (mantissa_to_shift__h102182[40] ?
																       8'd40 :
																       (mantissa_to_shift__h102182[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h102182[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h102182[43] ?
																		8'd43 :
																		(mantissa_to_shift__h102182[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h102182[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h102182[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h102182[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h102182[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h102182[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h102182[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h102182[51] ?
																					8'd51 :
																					(mantissa_to_shift__h102182[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h102182[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h102182[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h102182[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h102182[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h102182[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h102182[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h102182[59] ?
																								8'd59 :
																								(mantissa_to_shift__h102182[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h102182[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h102182[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h102182[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h102182[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h102182[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h102182[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h102182[67] ?
																											8'd67 :
																											(mantissa_to_shift__h102182[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h102182[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h102182[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h102182[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h102182[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h102182[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h102182[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h102182[75] ?
																														8'd75 :
																														(mantissa_to_shift__h102182[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h102182[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h102182[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h102182[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h102182[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h102182[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h102182[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h102182[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h102182[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h102182[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h102182[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h102182[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h102182[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h102182[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h102182[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h102182[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h102182[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h102182[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h102182[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h102182[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h102182[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h102182[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h102182[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h102182[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h102182[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h102182[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h102182[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h102182[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h102182[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h102182[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h102182[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h102182[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h102182[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h102182[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h102182[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h102182[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h102182[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h102182[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h102182[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h102182[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h102182[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h102182[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h102182[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h102182[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h102182[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h102182[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h102182[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h102182[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h102182[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h102182[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h102182[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h102182[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h102182[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h102182[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h102182[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h102182[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h102182[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h102182[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h102182[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h102182[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h102182[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h102182[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h102182[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h102182[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h102182[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h102182[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h102182[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h102182[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h102182[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h102182[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h102182[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h102182[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h102182[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h102182[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h102182[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h102182[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h102182[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h102182[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h102182[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h102182[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h102182[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h102182[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h102182[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h102182[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h13770 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h13733[28],
	       1'd0 } ;
  assign x__h14033 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h13733[28] } ;
  assign x__h14422 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h13733[28] ;
  assign x__h14463 =
	     _theResult____h13733[28] ?
	       lv_remainder__h14485 :
	       _theResult____h13733 ;
  assign x__h14537 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h13733[28] ;
  assign x__h148043 = ~_theResult_____1__h102193 ;
  assign x__h148050 =
	     inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h148158 ;
  assign x__h148158 = sign2__h102145 ^ op_xor_sign3__h102158 ;
  assign x__h148166 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h148123 ;
  assign x__h148198 = x__h148200 & sign2__h102145 ;
  assign x__h148200 = inst_dpfm_add_sub_ff_stage2[4] & y__h148201 ;
  assign x__h148202 = x__h148203 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h148203 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h148207 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h148170 ;
  assign x__h148231 = x__h148243 & y__h148244 ;
  assign x__h148243 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h148120 ;
  assign x__h148273 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h148457 =
	     (_theResult____h148380 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h171551 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h171572 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[104] ;
  assign x__h171654 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[104] ;
  assign x__h179904 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[6] ;
  assign x__h180035 =
	     _theResult____h179873[31] ?
	       6'd0 :
	       (_theResult____h179873[30] ?
		  6'd1 :
		  (_theResult____h179873[29] ?
		     6'd2 :
		     (_theResult____h179873[28] ?
			6'd3 :
			(_theResult____h179873[27] ?
			   6'd4 :
			   (_theResult____h179873[26] ?
			      6'd5 :
			      (_theResult____h179873[25] ?
				 6'd6 :
				 (_theResult____h179873[24] ?
				    6'd7 :
				    (_theResult____h179873[23] ?
				       6'd8 :
				       (_theResult____h179873[22] ?
					  6'd9 :
					  (_theResult____h179873[21] ?
					     6'd10 :
					     (_theResult____h179873[20] ?
						6'd11 :
						(_theResult____h179873[19] ?
						   6'd12 :
						   (_theResult____h179873[18] ?
						      6'd13 :
						      (_theResult____h179873[17] ?
							 6'd14 :
							 (_theResult____h179873[16] ?
							    6'd15 :
							    (_theResult____h179873[15] ?
							       6'd16 :
							       (_theResult____h179873[14] ?
								  6'd17 :
								  (_theResult____h179873[13] ?
								     6'd18 :
								     (_theResult____h179873[12] ?
									6'd19 :
									(_theResult____h179873[11] ?
									   6'd20 :
									   (_theResult____h179873[10] ?
									      6'd21 :
									      (_theResult____h179873[9] ?
										 6'd22 :
										 (_theResult____h179873[8] ?
										    6'd23 :
										    (_theResult____h179873[7] ?
										       6'd24 :
										       (_theResult____h179873[6] ?
											  6'd25 :
											  (_theResult____h179873[5] ?
											     6'd26 :
											     (_theResult____h179873[4] ?
												6'd27 :
												(_theResult____h179873[3] ?
												   6'd28 :
												   (_theResult____h179873[2] ?
												      6'd29 :
												      (_theResult____h179873[1] ?
													 6'd30 :
													 (_theResult____h179873[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h184657 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[6] ;
  assign x__h184944 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[38] ;
  assign x__h185093 =
	     _theResult____h184913[63] ?
	       7'd0 :
	       (_theResult____h184913[62] ?
		  7'd1 :
		  (_theResult____h184913[61] ?
		     7'd2 :
		     (_theResult____h184913[60] ?
			7'd3 :
			(_theResult____h184913[59] ?
			   7'd4 :
			   (_theResult____h184913[58] ?
			      7'd5 :
			      (_theResult____h184913[57] ?
				 7'd6 :
				 (_theResult____h184913[56] ?
				    7'd7 :
				    (_theResult____h184913[55] ?
				       7'd8 :
				       (_theResult____h184913[54] ?
					  7'd9 :
					  (_theResult____h184913[53] ?
					     7'd10 :
					     (_theResult____h184913[52] ?
						7'd11 :
						(_theResult____h184913[51] ?
						   7'd12 :
						   (_theResult____h184913[50] ?
						      7'd13 :
						      (_theResult____h184913[49] ?
							 7'd14 :
							 (_theResult____h184913[48] ?
							    7'd15 :
							    (_theResult____h184913[47] ?
							       7'd16 :
							       (_theResult____h184913[46] ?
								  7'd17 :
								  (_theResult____h184913[45] ?
								     7'd18 :
								     (_theResult____h184913[44] ?
									7'd19 :
									(_theResult____h184913[43] ?
									   7'd20 :
									   (_theResult____h184913[42] ?
									      7'd21 :
									      (_theResult____h184913[41] ?
										 7'd22 :
										 (_theResult____h184913[40] ?
										    7'd23 :
										    (_theResult____h184913[39] ?
										       7'd24 :
										       (_theResult____h184913[38] ?
											  7'd25 :
											  (_theResult____h184913[37] ?
											     7'd26 :
											     (_theResult____h184913[36] ?
												7'd27 :
												(_theResult____h184913[35] ?
												   7'd28 :
												   (_theResult____h184913[34] ?
												      7'd29 :
												      (_theResult____h184913[33] ?
													 7'd30 :
													 (_theResult____h184913[32] ?
													    7'd31 :
													    (_theResult____h184913[31] ?
													       7'd32 :
													       (_theResult____h184913[30] ?
														  7'd33 :
														  (_theResult____h184913[29] ?
														     7'd34 :
														     (_theResult____h184913[28] ?
															7'd35 :
															(_theResult____h184913[27] ?
															   7'd36 :
															   (_theResult____h184913[26] ?
															      7'd37 :
															      (_theResult____h184913[25] ?
																 7'd38 :
																 (_theResult____h184913[24] ?
																    7'd39 :
																    (_theResult____h184913[23] ?
																       7'd40 :
																       (_theResult____h184913[22] ?
																	  7'd41 :
																	  (_theResult____h184913[21] ?
																	     7'd42 :
																	     (_theResult____h184913[20] ?
																		7'd43 :
																		(_theResult____h184913[19] ?
																		   7'd44 :
																		   (_theResult____h184913[18] ?
																		      7'd45 :
																		      (_theResult____h184913[17] ?
																			 7'd46 :
																			 (_theResult____h184913[16] ?
																			    7'd47 :
																			    (_theResult____h184913[15] ?
																			       7'd48 :
																			       (_theResult____h184913[14] ?
																				  7'd49 :
																				  (_theResult____h184913[13] ?
																				     7'd50 :
																				     (_theResult____h184913[12] ?
																					7'd51 :
																					(_theResult____h184913[11] ?
																					   7'd52 :
																					   (_theResult____h184913[10] ?
																					      7'd53 :
																					      (_theResult____h184913[9] ?
																						 7'd54 :
																						 (_theResult____h184913[8] ?
																						    7'd55 :
																						    (_theResult____h184913[7] ?
																						       7'd56 :
																						       (_theResult____h184913[6] ?
																							  7'd57 :
																							  (_theResult____h184913[5] ?
																							     7'd58 :
																							     (_theResult____h184913[4] ?
																								7'd59 :
																								(_theResult____h184913[3] ?
																								   7'd60 :
																								   (_theResult____h184913[2] ?
																								      7'd61 :
																								      (_theResult____h184913[1] ?
																									 7'd62 :
																									 (_theResult____h184913[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h194196 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[38] ;
  assign x__h194550 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h194619 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h194659 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q41[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q41[31:0] :
	       32'h7FC00000 ;
  assign x__h200543 =
	     _theResult____h194456[31] ?
	       6'd0 :
	       (_theResult____h194456[30] ?
		  6'd1 :
		  (_theResult____h194456[29] ?
		     6'd2 :
		     (_theResult____h194456[28] ?
			6'd3 :
			(_theResult____h194456[27] ?
			   6'd4 :
			   (_theResult____h194456[26] ?
			      6'd5 :
			      (_theResult____h194456[25] ?
				 6'd6 :
				 (_theResult____h194456[24] ?
				    6'd7 :
				    (_theResult____h194456[23] ?
				       6'd8 :
				       (_theResult____h194456[22] ?
					  6'd9 :
					  (_theResult____h194456[21] ?
					     6'd10 :
					     (_theResult____h194456[20] ?
						6'd11 :
						(_theResult____h194456[19] ?
						   6'd12 :
						   (_theResult____h194456[18] ?
						      6'd13 :
						      (_theResult____h194456[17] ?
							 6'd14 :
							 (_theResult____h194456[16] ?
							    6'd15 :
							    (_theResult____h194456[15] ?
							       6'd16 :
							       (_theResult____h194456[14] ?
								  6'd17 :
								  (_theResult____h194456[13] ?
								     6'd18 :
								     (_theResult____h194456[12] ?
									6'd19 :
									(_theResult____h194456[11] ?
									   6'd20 :
									   (_theResult____h194456[10] ?
									      6'd21 :
									      (_theResult____h194456[9] ?
										 6'd22 :
										 (_theResult____h194456[8] ?
										    6'd23 :
										    (_theResult____h194456[7] ?
										       6'd24 :
										       (_theResult____h194456[6] ?
											  6'd25 :
											  (_theResult____h194456[5] ?
											     6'd26 :
											     (_theResult____h194456[4] ?
												6'd27 :
												(_theResult____h194456[3] ?
												   6'd28 :
												   (_theResult____h194456[2] ?
												      6'd29 :
												      (_theResult____h194456[1] ?
													 6'd30 :
													 (_theResult____h194456[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h205193 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10] |
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[9] ;
  assign x__h205273 =
	     _theResult____h194469[63] ?
	       7'd0 :
	       (_theResult____h194469[62] ?
		  7'd1 :
		  (_theResult____h194469[61] ?
		     7'd2 :
		     (_theResult____h194469[60] ?
			7'd3 :
			(_theResult____h194469[59] ?
			   7'd4 :
			   (_theResult____h194469[58] ?
			      7'd5 :
			      (_theResult____h194469[57] ?
				 7'd6 :
				 (_theResult____h194469[56] ?
				    7'd7 :
				    (_theResult____h194469[55] ?
				       7'd8 :
				       (_theResult____h194469[54] ?
					  7'd9 :
					  (_theResult____h194469[53] ?
					     7'd10 :
					     (_theResult____h194469[52] ?
						7'd11 :
						(_theResult____h194469[51] ?
						   7'd12 :
						   (_theResult____h194469[50] ?
						      7'd13 :
						      (_theResult____h194469[49] ?
							 7'd14 :
							 (_theResult____h194469[48] ?
							    7'd15 :
							    (_theResult____h194469[47] ?
							       7'd16 :
							       (_theResult____h194469[46] ?
								  7'd17 :
								  (_theResult____h194469[45] ?
								     7'd18 :
								     (_theResult____h194469[44] ?
									7'd19 :
									(_theResult____h194469[43] ?
									   7'd20 :
									   (_theResult____h194469[42] ?
									      7'd21 :
									      (_theResult____h194469[41] ?
										 7'd22 :
										 (_theResult____h194469[40] ?
										    7'd23 :
										    (_theResult____h194469[39] ?
										       7'd24 :
										       (_theResult____h194469[38] ?
											  7'd25 :
											  (_theResult____h194469[37] ?
											     7'd26 :
											     (_theResult____h194469[36] ?
												7'd27 :
												(_theResult____h194469[35] ?
												   7'd28 :
												   (_theResult____h194469[34] ?
												      7'd29 :
												      (_theResult____h194469[33] ?
													 7'd30 :
													 (_theResult____h194469[32] ?
													    7'd31 :
													    (_theResult____h194469[31] ?
													       7'd32 :
													       (_theResult____h194469[30] ?
														  7'd33 :
														  (_theResult____h194469[29] ?
														     7'd34 :
														     (_theResult____h194469[28] ?
															7'd35 :
															(_theResult____h194469[27] ?
															   7'd36 :
															   (_theResult____h194469[26] ?
															      7'd37 :
															      (_theResult____h194469[25] ?
																 7'd38 :
																 (_theResult____h194469[24] ?
																    7'd39 :
																    (_theResult____h194469[23] ?
																       7'd40 :
																       (_theResult____h194469[22] ?
																	  7'd41 :
																	  (_theResult____h194469[21] ?
																	     7'd42 :
																	     (_theResult____h194469[20] ?
																		7'd43 :
																		(_theResult____h194469[19] ?
																		   7'd44 :
																		   (_theResult____h194469[18] ?
																		      7'd45 :
																		      (_theResult____h194469[17] ?
																			 7'd46 :
																			 (_theResult____h194469[16] ?
																			    7'd47 :
																			    (_theResult____h194469[15] ?
																			       7'd48 :
																			       (_theResult____h194469[14] ?
																				  7'd49 :
																				  (_theResult____h194469[13] ?
																				     7'd50 :
																				     (_theResult____h194469[12] ?
																					7'd51 :
																					(_theResult____h194469[11] ?
																					   7'd52 :
																					   (_theResult____h194469[10] ?
																					      7'd53 :
																					      (_theResult____h194469[9] ?
																						 7'd54 :
																						 (_theResult____h194469[8] ?
																						    7'd55 :
																						    (_theResult____h194469[7] ?
																						       7'd56 :
																						       (_theResult____h194469[6] ?
																							  7'd57 :
																							  (_theResult____h194469[5] ?
																							     7'd58 :
																							     (_theResult____h194469[4] ?
																								7'd59 :
																								(_theResult____h194469[3] ?
																								   7'd60 :
																								   (_theResult____h194469[2] ?
																								      7'd61 :
																								      (_theResult____h194469[1] ?
																									 7'd62 :
																									 (_theResult____h194469[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h214369 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[11] |
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[9] ;
  assign x__h215549 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q50[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q50[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h215709 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q51[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q51[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h215806 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q52[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q52[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h216904 =
	     final_result__h215967[0] |
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[21] ;
  assign x__h217275 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22] |
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[21] ;
  assign x__h218048 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q30[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q30[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h218208 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q31[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q31[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h218305 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q32[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q32[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h218578 = lv_exp__h218462 - 12'd1023 ;
  assign x__h219407 =
	     final_result__h218467[0] |
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[50] ;
  assign x__h219776 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51] |
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[50] ;
  assign x__h22060 = msb_zeros__h21986 - 6'd1 ;
  assign x__h22086 = { 4'd0, msb_zeros__h21986 } ;
  assign x__h221212 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			10'd8 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q53[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h222117 =
	     (ff_input_D_OUT[208] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
	       10'd1 :
	       ((ff_input_D_OUT[208] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((ff_input_D_OUT[208] &&
		    condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
		     10'd4 :
		     ((ff_input_D_OUT[208] &&
		       condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			10'd8 :
			((!ff_input_D_OUT[208] &&
			  condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			   10'd16 :
			   ((!ff_input_D_OUT[208] &&
			     condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
			      10'd32 :
			      ((!ff_input_D_OUT[208] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!ff_input_D_OUT[208] &&
				   condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
				    10'd128 :
				    (condFlags64_reswget_BITS_14_TO_10__q33[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h223619 =
	     getMant32_reswget_BITS_68_TO_46__q48[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h228476 = getExp64_res_wget[32:22] - 11'd896 ;
  assign x__h228796 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[24] |
	     lv_sticky__h228595 ;
  assign x__h228889 = x__h228891 | lv_sticky__h228595 ;
  assign x__h228891 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25] |
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[24] ;
  assign x__h231010 =
	     { ~lv_op1_subnormal__h230957, getMant32_res_wget[68:46] } ;
  assign x__h231074 =
	     { ~lv_op2_subnormal__h230958, getMant32_res_wget[45:23] } ;
  assign x__h231147 = x__h231149 + y__h231150 ;
  assign x__h231149 = x__h231151 - 10'd127 ;
  assign x__h231151 = exp1_temp__h230966 + exp2_temp__h230967 ;
  assign x__h231202 =
	     lv_invalid__h215953 ||
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 ||
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h231465 =
	     !lv_invalid__h215953 &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h231471 =
	     !lv_invalid__h215953 &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h231520 =
	     (lv_invalid__h215953 ||
	      IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235) ?
	       quiet_nan_two__h230962 :
	       _theResult___snd_snd_snd__h231393 ;
  assign x__h231533 = condFlags32_reswget_BITS_14_TO_10__q53[2] & y__h231536 ;
  assign x__h231623 = lv_op1_subnormal__h230957 | lv_op2_subnormal__h230958 ;
  assign x__h232466 =
	     { ~lv_op1_subnormal__h232413, getMant64_res_wget[155:104] } ;
  assign x__h232530 =
	     { ~lv_op2_subnormal__h232414, getMant64_res_wget[103:52] } ;
  assign x__h232603 = x__h232605 + y__h232606 ;
  assign x__h232605 = x__h232607 - 13'd1023 ;
  assign x__h232607 = exp1_temp__h232422 + exp2_temp__h232423 ;
  assign x__h232654 =
	     lv_invalid__h218452 ||
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 ||
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h232917 =
	     !lv_invalid__h218452 &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h232923 =
	     !lv_invalid__h218452 &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h232971 =
	     (lv_invalid__h218452 ||
	      IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313) ?
	       quiet_nan_two__h232418 :
	       _theResult___snd_snd_snd__h232845 ;
  assign x__h232984 = condFlags64_reswget_BITS_14_TO_10__q33[2] & y__h232987 ;
  assign x__h233074 = lv_op1_subnormal__h232413 | lv_op2_subnormal__h232414 ;
  assign x__h234997 = exp1__h234942 + y__h234999 ;
  assign x__h235004 =
	     (~condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h238394 =
	     (~condFlags32_reswget_BITS_9_TO_5__q54[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q55[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q55[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q55[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q55[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q55[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q55[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q55[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q55[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q55[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q55[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q55[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q55[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q55[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q55[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q55[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q55[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q55[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q55[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q55[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q55[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q55[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q55[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q55[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h241781 = man1__h234934 << x__h235004 ;
  assign x__h241809 = man2__h234935 << x__h238394 ;
  assign x__h241839 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign x__h241903 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197498 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h241918 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197498 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h241923 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197498 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign x__h243225 = exp1__h243170 + y__h243227 ;
  assign x__h243232 =
	     (~condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h250653 =
	     (~condFlags64_reswget_BITS_9_TO_5__q34[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q35[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q35[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q35[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q35[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q35[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q35[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q35[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q35[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q35[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q35[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q35[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q35[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q35[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q35[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q35[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q35[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q35[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q35[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q35[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q35[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q35[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q35[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q35[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q35[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q35[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q35[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q35[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q35[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q35[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q35[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q35[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q35[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q35[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q35[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q35[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q35[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q35[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q35[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q35[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q35[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q35[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q35[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q35[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q35[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q35[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q35[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q35[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q35[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q35[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q35[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q35[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q35[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h25563 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h25594 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h25594 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h25624 =
	     inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h258071 = man1__h243162 << x__h243232 ;
  assign x__h258099 = man2__h243163 << x__h250653 ;
  assign x__h258181 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199377 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h258196 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199377 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h258201 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199377 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign x__h25963 = x__h25975 | y__h25976 ;
  assign x__h25975 = _theResult_____1__h25857 & sign2__h25809 ;
  assign x__h260399 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       exponent___1__h260428 :
	       exponent__h259785 ;
  assign x__h260430 = { 3'd0, lv_leading_zeros__h259790 } ;
  assign x__h267751 = lv_leading_zeros__h259790 - 6'd1 ;
  assign x__h267777 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h268021 = x__h268023 + 9'd63 ;
  assign x__h268023 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[8:1] } ;
  assign x__h269401 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ?
	       exponent___1__h269430 :
	       lv_exp__h218462 ;
  assign x__h269432 = { 5'd0, lv_leading_zeros__h268793 } ;
  assign x__h284873 = lv_leading_zeros__h268793 - 7'd1 ;
  assign x__h284899 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38[53:0],
	       1'd0 } ;
  assign x__h285143 = x__h285145 + 12'd511 ;
  assign x__h285145 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[11:1] } ;
  assign x__h290815 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h42127 =
	     mantissa_to_shift__h25846[0] ?
	       7'd0 :
	       (mantissa_to_shift__h25846[1] ?
		  7'd1 :
		  (mantissa_to_shift__h25846[2] ?
		     7'd2 :
		     (mantissa_to_shift__h25846[3] ?
			7'd3 :
			(mantissa_to_shift__h25846[4] ?
			   7'd4 :
			   (mantissa_to_shift__h25846[5] ?
			      7'd5 :
			      (mantissa_to_shift__h25846[6] ?
				 7'd6 :
				 (mantissa_to_shift__h25846[7] ?
				    7'd7 :
				    (mantissa_to_shift__h25846[8] ?
				       7'd8 :
				       (mantissa_to_shift__h25846[9] ?
					  7'd9 :
					  (mantissa_to_shift__h25846[10] ?
					     7'd10 :
					     (mantissa_to_shift__h25846[11] ?
						7'd11 :
						(mantissa_to_shift__h25846[12] ?
						   7'd12 :
						   (mantissa_to_shift__h25846[13] ?
						      7'd13 :
						      (mantissa_to_shift__h25846[14] ?
							 7'd14 :
							 (mantissa_to_shift__h25846[15] ?
							    7'd15 :
							    (mantissa_to_shift__h25846[16] ?
							       7'd16 :
							       (mantissa_to_shift__h25846[17] ?
								  7'd17 :
								  (mantissa_to_shift__h25846[18] ?
								     7'd18 :
								     (mantissa_to_shift__h25846[19] ?
									7'd19 :
									(mantissa_to_shift__h25846[20] ?
									   7'd20 :
									   (mantissa_to_shift__h25846[21] ?
									      7'd21 :
									      (mantissa_to_shift__h25846[22] ?
										 7'd22 :
										 (mantissa_to_shift__h25846[23] ?
										    7'd23 :
										    (mantissa_to_shift__h25846[24] ?
										       7'd24 :
										       (mantissa_to_shift__h25846[25] ?
											  7'd25 :
											  (mantissa_to_shift__h25846[26] ?
											     7'd26 :
											     (mantissa_to_shift__h25846[27] ?
												7'd27 :
												(mantissa_to_shift__h25846[28] ?
												   7'd28 :
												   (mantissa_to_shift__h25846[29] ?
												      7'd29 :
												      (mantissa_to_shift__h25846[30] ?
													 7'd30 :
													 (mantissa_to_shift__h25846[31] ?
													    7'd31 :
													    (mantissa_to_shift__h25846[32] ?
													       7'd32 :
													       (mantissa_to_shift__h25846[33] ?
														  7'd33 :
														  (mantissa_to_shift__h25846[34] ?
														     7'd34 :
														     (mantissa_to_shift__h25846[35] ?
															7'd35 :
															(mantissa_to_shift__h25846[36] ?
															   7'd36 :
															   (mantissa_to_shift__h25846[37] ?
															      7'd37 :
															      (mantissa_to_shift__h25846[38] ?
																 7'd38 :
																 (mantissa_to_shift__h25846[39] ?
																    7'd39 :
																    (mantissa_to_shift__h25846[40] ?
																       7'd40 :
																       (mantissa_to_shift__h25846[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h25846[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h25846[43] ?
																		7'd43 :
																		(mantissa_to_shift__h25846[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h25846[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h25846[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h25846[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h25846[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h25846[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h25846[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h25846[51] ?
																					7'd51 :
																					(mantissa_to_shift__h25846[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h25846[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h25846[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h25846[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h25846[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h25846[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h25846[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h25846[59] ?
																								7'd59 :
																								(mantissa_to_shift__h25846[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h25846[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h25846[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h25846[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h25846[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h25846[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h25846[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h25846[67] ?
																											7'd67 :
																											(mantissa_to_shift__h25846[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h25846[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h25846[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h25846[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h25846[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h47086 = ~_theResult_____1__h25857 ;
  assign x__h47093 =
	     inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h47201 ;
  assign x__h47201 = sign2__h25809 ^ op_xor_sign3__h25822 ;
  assign x__h47209 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h47166 ;
  assign x__h47241 = x__h47243 & sign2__h25809 ;
  assign x__h47243 = inst_spfm_add_sub_ff_stage2[4] & y__h47244 ;
  assign x__h47245 = x__h47246 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h47246 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h47250 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h47213 ;
  assign x__h47274 = x__h47286 & y__h47287 ;
  assign x__h47286 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h47163 ;
  assign x__h47316 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h47500 =
	     (_theResult____h47423 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h4764 = { _denominator__h4702, 2'b0, _numerator__h4703, 27'd0 } ;
  assign x__h58414 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h58435 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[46] ;
  assign x__h58517 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[46] ;
  assign x__h63212 =
	     { _denominator__h63150, 2'b0, _numerator__h63151, 56'd0 } ;
  assign x__h76367 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ;
  assign x__h76372 =
	     (!inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ||
	      inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455) ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h64576 ;
  assign x__h76592 = _theResult____h76439 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h76742 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h76439 ;
  assign x__h76777 = x__h76779 | _theResult____h76439 ;
  assign x__h76779 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h78162 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h78125[57],
	       1'd0 } ;
  assign x__h78425 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h78125[57] } ;
  assign x__h78814 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h78125[57] ;
  assign x__h78855 =
	     _theResult____h78125[57] ?
	       lv_remainder__h78877 :
	       _theResult____h78125 ;
  assign x__h78929 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h78125[57] ;
  assign x__h94510 = msb_zeros__h94436 - 7'd1 ;
  assign x__h94536 = { 6'd0, msb_zeros__h94436 } ;
  assign x_data__h197518 =
	     ff_input_D_OUT[8] ?
	       { 32'hFFFFFFFF, _theResult_____3_fst__h198131 } :
	       { 32'd0, _theResult_____3_fst__h197573 } ;
  assign x_data__h199396 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h199978 :
	       _theResult_____3_fst__h199426 ;
  assign x_data__h200315 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h194362 } ;
  assign x_data__h200471 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       64'b0 :
	       _theResult___snd_final_result__h194477 ;
  assign x_data__h214528 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h214517 } ;
  assign x_data__h214766 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
	       ff_input_D_OUT[207:145] } ;
  assign x_data__h215996 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       _theResult_____3_fst__h216568 :
	       final_result__h215967 ;
  assign x_data__h218496 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       _theResult_____3_fst__h219071 :
	       final_result__h218467 ;
  assign x_data__h229319 =
	     { 32'hFFFFFFFF,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388[31:0] } ;
  assign x_data__h229391 =
	     (ff_input_D_OUT[12:6] == 7'b1110000) ?
	       final_result__h229395 :
	       final_result__h229418 ;
  assign x_data__h292551 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h292682 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_data__h292804 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  assign x_fflags__h197520 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h198132 :
	       _theResult_____3_snd__h197574 ;
  assign x_fflags__h199398 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h199979 :
	       _theResult_____3_snd__h199427 ;
  assign x_fflags__h200317 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       5'b0 :
	       x1_avValue_fflags__h194355 ;
  assign x_fflags__h200473 =
	     (ff_input_D_OUT[208:145] == 64'd0 || !ff_input_D_OUT[2]) ?
	       5'b0 :
	       wr_final_out_fflags__h194476 ;
  assign x_lv_exponent__h5994 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	      NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245) ?
	       10'd0 :
	       _theResult___snd_fst__h11916 ;
  assign x_lv_exponent__h64442 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	      NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653) ?
	       13'd0 :
	       _theResult___snd_fst__h76309 ;
  assign x_lv_product_exponent__h15028 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___snd_snd_snd_fst__h22006 ;
  assign x_lv_product_exponent__h79416 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___snd_snd_snd_fst__h94456 ;
  assign x_lv_product_mantissa__h15029 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h14961 :
	       _theResult___snd_snd_snd_snd_fst__h22091 ;
  assign x_lv_product_mantissa__h79417 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h79349 :
	       _theResult___snd_snd_snd_snd_fst__h94541 ;
  assign x_lv_quotient__h5993 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___fst__h6091 :
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] ;
  assign x_lv_quotient__h64441 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ?
	       _theResult___fst__h64539 :
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] ;
  assign y__h102312 = x__h148043 & op_xor_sign3__h102158 ;
  assign y__h12348 = x__h12349 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h12385 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h14143 = x__h14422 | lv_sticky__h14066 ;
  assign y__h14525 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h148199 = x__h148202 & op_xor_sign3__h102158 ;
  assign y__h148201 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h148244 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h171432 = x__h171572 | lv_sticky__h170990 ;
  assign y__h171668 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h184656 = x__h184657 | _theResult____h179885 ;
  assign y__h184694 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ;
  assign y__h194195 = x__h194196 | _theResult____h184925 ;
  assign y__h194233 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ;
  assign y__h214368 = x__h214369 | _theResult____h205174 ;
  assign y__h214405 = ~sign__h205172 ;
  assign y__h216658 = x__h216904 | lv_sticky__h215976 ;
  assign y__h217288 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign y__h219161 = x__h219407 | lv_sticky__h218476 ;
  assign y__h219789 = ~ff_input_D_OUT[208] ;
  assign y__h22085 = x__h22086 - 10'd1 ;
  assign y__h228758 =
	     x__h228796 |
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[26] ;
  assign y__h231148 = { 9'd0, lv_op2_subnormal__h230958 } ;
  assign y__h231150 = { 9'd0, lv_op1_subnormal__h230957 } ;
  assign y__h231534 = condFlags32_reswget_BITS_9_TO_5__q54[2] & y__h231580 ;
  assign y__h231536 = ~condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign y__h231580 = ~condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign y__h232604 = { 12'd0, lv_op2_subnormal__h232414 } ;
  assign y__h232606 = { 12'd0, lv_op1_subnormal__h232413 } ;
  assign y__h232985 = condFlags64_reswget_BITS_9_TO_5__q34[2] & y__h233031 ;
  assign y__h232987 = ~condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign y__h233031 = ~condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign y__h234996 = x__h234997 - y__h234998 ;
  assign y__h234998 = exp2__h234943 + y__h238393 ;
  assign y__h234999 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q53[4] } ;
  assign y__h238393 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q54[4] } ;
  assign y__h243224 = x__h243225 - y__h243226 ;
  assign y__h243226 = exp2__h243171 + y__h250652 ;
  assign y__h243227 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q33[4] } ;
  assign y__h250652 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q34[4] } ;
  assign y__h25976 = x__h47086 & op_xor_sign3__h25822 ;
  assign y__h260048 = ff_input_D_OUT[176] & y__h260069 ;
  assign y__h260069 = ~condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign y__h260400 = x__h260430 - 9'd1 ;
  assign y__h268022 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[0] } ;
  assign y__h269050 = ff_input_D_OUT[208] & y__h269071 ;
  assign y__h269071 = ~condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign y__h269402 = x__h269432 - 12'd1 ;
  assign y__h285144 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[0] } ;
  assign y__h47242 = x__h47245 & op_xor_sign3__h25822 ;
  assign y__h47244 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h47287 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h58295 = x__h58435 | lv_sticky__h57853 ;
  assign y__h58531 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h76741 = x__h76742 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h76778 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h78535 = x__h78814 | lv_sticky__h78458 ;
  assign y__h78917 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y__h94535 = x__h94536 - 13'd1 ;
  assign y_avValue__h228122 =
	     { 5'd5, CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 } ;
  assign y_avValue__h228271 = { result__h228992, x1_avValue_fst__h228981 } ;
  assign y_avValue_fst__h228978 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       res__h228589 :
	       res___1__h229232 ;
  assign y_avValue_snd_snd_fst__h228784 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ?
	       man__h228356 :
	       man__h228455 ;
  assign y_avValue_snd_snd_fst__h228823 =
	     man__h228356[23:0] != 24'd0 || lv_sticky__h228252 ;
  assign y_avValue_snd_snd_snd_fst__h228819 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ?
	       y_avValue_snd_snd_fst__h228823 :
	       lv_sticky__h228252 ;
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[5:3])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      { ff_input_D_OUT[208], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      ff_input_D_OUT[208] ? 32'hFF800000 : 32'h7F7FFFFF;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
		   (ff_input_D_OUT[5:3] == 3'b011 && ff_input_D_OUT[208]) ?
		     32'hFF7FFFFF :
		     { ff_input_D_OUT[208], 31'h7F800000 };
    endcase
  end
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h12384 or lv_round_up___1__h12336 or lv_round_up___1__h12372)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      lv_round_up___1__h12336;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      lv_round_up___1__h12372;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h12384 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h14068 or
	  lv_roundup___1__h14131 or lv_roundup___1__h14513)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      lv_roundup___1__h14131;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      lv_roundup___1__h14513;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h14068 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h57855 or
	  y__h58531 or
	  lv_round_up___1__h58283 or
	  lv_round_up___1__h58505 or
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      lv_round_up___1__h58283;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      lv_round_up___1__h58505;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h57855 & y__h58531;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h76777 or lv_round_up___1__h76729 or lv_round_up___1__h76765)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      lv_round_up___1__h76729;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      lv_round_up___1__h76765;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h76777 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h78460 or
	  lv_roundup___1__h78523 or lv_roundup___1__h78905)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      lv_roundup___1__h78523;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      lv_roundup___1__h78905;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h78460 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h170992 or
	  y__h171668 or
	  lv_round_up___1__h171420 or
	  lv_round_up___1__h171642 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      lv_round_up___1__h171420;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      lv_round_up___1__h171642;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h170992 & y__h171668;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h205175 or
	  sign__h205172 or
	  lv_roundup___1__h214356 or
	  lv_roundup___1__h214392 or
	  IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      lv_roundup___1__h214356;
      3'b011:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      lv_roundup___1__h214392;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   inexact__h205175 & sign__h205172;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ff_input_D_OUT[144];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ~ff_input_D_OUT[144];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
		   ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h179886 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 or
	  lv_roundup___1__h184644 or
	  lv_roundup___1__h184681 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      lv_roundup___1__h184644;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      lv_roundup___1__h184681;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h179886 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h184926 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 or
	  lv_roundup___1__h194183 or
	  lv_roundup___1__h194220 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      lv_roundup___1__h194183;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      lv_roundup___1__h194220;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h184926 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h228889 or
	  lv_round_up___1__h228746 or
	  lv_round_up___1__h228877 or
	  IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0: _theResult_____4___1__h228726 = lv_round_up___1__h228746;
      3'b011: _theResult_____4___1__h228726 = lv_round_up___1__h228877;
      3'b100:
	  _theResult_____4___1__h228726 =
	      IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25];
      default: _theResult_____4___1__h228726 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   x__h228889 & ff_input_D_OUT[208];
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h199381 or
	  condFlags64_reswget_BITS_14_TO_10__q33 or
	  condFlags64_reswget_BITS_9_TO_5__q34)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199381[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199381 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q34[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199381 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
		   64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h218478 or
	  y__h219789 or
	  lv_round_up___1__h219149 or
	  lv_round_up___1__h219764 or
	  IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      lv_round_up___1__h219149;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      lv_round_up___1__h219764;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h218478 & y__h219789;
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h241839 or setCanonicalNaN_reswget_BITS_63_TO_32__q43)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
		   x__h241839;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h197502 or
	  condFlags32_reswget_BITS_14_TO_10__q53 or
	  condFlags32_reswget_BITS_9_TO_5__q54)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197502[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197502 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q54[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197502 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
		   32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h215978 or
	  y__h217288 or
	  lv_round_up___1__h216646 or
	  lv_round_up___1__h217263 or
	  IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      lv_round_up___1__h216646;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      lv_round_up___1__h217263;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h215978 & y__h217288;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_result <= `BSV_ASSIGNMENT_DELAY
	    { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	      6'd0 };
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
	if (rg_result_EN) rg_result <= `BSV_ASSIGNMENT_DELAY rg_result_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
    rg_result = 70'h2AAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6005 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6006 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6007 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h293059 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("[%10d", v__h293059, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_operand1,
	       _start_operand2,
	       _start_operand3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6011 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6012 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6013 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h293205 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("[%10d", v__h293205, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent : %b mantissa : %b flags : %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("sign : %b exponent %b mantissa %b rounding %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("exponent : %d", getExp64_res_wget[32:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("Denormal lv_sticky : %b", lv_sticky__h228252);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("lv_guard : %b shiftDist : %d", 1'd0, shiftDist__h228355);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("expo : %b man : %b", 8'd0, man__h228356);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179)
	$display("expo : %b man : %b", x__h228476[7:0], man__h228455);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("lv_roundup : %b", _theResult_____4___1__h228726);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("fman: %b", fman__h228917);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	  !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 getExp32_res_wget[23:16],
		 getMant32_res_wget[68:46],
		 ff_input_D_OUT[5:3],
		 condFlags32_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481)
	$display("Divide_by_zero");
  end
  // synopsys translate_on
endmodule  // mkfpu

